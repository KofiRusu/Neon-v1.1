generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String?
  role            UserRole         @default(USER)
  avatar          String?
  emailVerified   DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  accounts        Account[]
  agentExecutions AgentExecution[]
  analytics       Analytics[]
  campaigns       Campaign[]
  sessions        Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Campaign {
  id              String           @id @default(cuid())
  name            String
  description     String?
  type            CampaignType
  status          CampaignStatus   @default(DRAFT)
  budget          Float?
  startDate       DateTime?
  endDate         DateTime?
  targetAudience  Json?
  platforms       Platform[]
  metrics         Json?
  settings        Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userId          String
  abTests         ABTest[]
  agentExecutions AgentExecution[]
  analytics       Analytics[]
  campaignMetrics CampaignMetric[]
  user            User             @relation(fields: [userId], references: [id])
  b2bLeads        B2BLead[]
  outreachHistory OutreachHistory[]

  @@map("campaigns")
}

model CampaignMetric {
  id          String   @id @default(cuid())
  impressions Int      @default(0)
  ctr         Float    @default(0.0)
  conversions Int      @default(0)
  timestamp   DateTime @default(now())
  campaignId  String
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaign_metrics")
}

model AIEventLog {
  id        String   @id @default(cuid())
  agent     String
  action    String
  metadata  Json?
  createdAt DateTime @default(now())

  @@map("ai_event_logs")
}

model TrendSignal {
  id          String   @id @default(cuid())
  source      String   // 'tiktok', 'instagram', 'twitter'
  keyword     String
  signalType  String   // 'hashtag', 'sound', 'topic'
  score       Float
  metadata    Json?
  detectedAt  DateTime @default(now())
  region      String?
  createdAt   DateTime @default(now())

  @@index([keyword])
  @@map("trend_signals")
}

model RegionScore {
  id        String   @id @default(cuid())
  region    String
  platform  String
  score     Float
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([region, platform])
  @@map("region_scores")
}

model B2BLead {
  id              String   @id @default(cuid())
  email           String   @unique
  firstName       String?
  lastName        String?
  company         String?
  position        String?
  linkedinUrl     String?
  phone           String?
  website         String?
  industry        String?
  companySize     String?
  location        String?
  source          String   // 'linkedin', 'directory', 'manual'
  status          String   @default("new") // 'new', 'contacted', 'qualified', 'converted'
  score           Float?   // Lead scoring
  lastContactAt   DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  campaigns       Campaign[]
  outreachHistory OutreachHistory[]

  @@map("b2b_leads")
}

model OutreachHistory {
  id          String   @id @default(cuid())
  leadId      String
  campaignId  String?
  type        String   // 'email', 'linkedin', 'call'
  subject     String?
  content     String?
  status      String   // 'sent', 'opened', 'replied', 'bounced'
  sentAt      DateTime @default(now())
  openedAt    DateTime?
  repliedAt   DateTime?

  // Relations
  lead        B2BLead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  campaign    Campaign? @relation(fields: [campaignId], references: [id])

  @@map("outreach_history")
}

model Agent {
  id           String           @id @default(cuid())
  name         String
  type         AgentType
  status       AgentStatus      @default(ACTIVE)
  capabilities Json?
  settings     Json?
  version      String           @default("1.0.0")
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  executions   AgentExecution[]

  @@map("agents")
}

model AgentExecution {
  id          String          @id @default(cuid())
  agentId     String
  campaignId  String?
  userId      String?
  task        String
  payload     Json?
  result      Json?
  status      ExecutionStatus @default(PENDING)
  performance Float?
  error       String?
  startedAt   DateTime        @default(now())
  completedAt DateTime?
  metadata    Json?
  agent       Agent           @relation(fields: [agentId], references: [id])
  campaign    Campaign?       @relation(fields: [campaignId], references: [id])
  user        User?           @relation(fields: [userId], references: [id])

  @@map("agent_executions")
}

model Analytics {
  id         String        @id @default(cuid())
  campaignId String?
  userId     String?
  type       AnalyticsType
  data       Json
  period     String?
  date       DateTime      @default(now())
  metadata   Json?
  campaign   Campaign?     @relation(fields: [campaignId], references: [id])
  user       User?         @relation(fields: [userId], references: [id])

  @@map("analytics")
}

model ABTest {
  id          String       @id @default(cuid())
  campaignId  String
  name        String
  description String?
  status      ABTestStatus @default(RUNNING)
  variants    Json
  results     Json?
  winner      String?
  confidence  Float?
  startDate   DateTime     @default(now())
  endDate     DateTime?
  settings    Json?
  campaign    Campaign     @relation(fields: [campaignId], references: [id])

  @@map("ab_tests")
}

model Content {
  id          String        @id @default(cuid())
  title       String
  type        ContentType
  platform    Platform
  content     Json
  status      ContentStatus @default(DRAFT)
  performance Json?
  metadata    Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("contents")
}

model Lead {
  id        String     @id @default(cuid())
  email     String
  name      String?
  company   String?
  position  String?
  phone     String?
  source    String?
  status    LeadStatus @default(NEW)
  score     Float?
  tags      String[]
  metadata  Json?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("leads")
}

model Trend {
  id         String   @id @default(cuid())
  keyword    String
  platform   Platform
  category   String?
  score      Float
  volume     Int?
  growth     Float?
  data       Json
  detectedAt DateTime @default(now())

  @@map("trends")
}

model DesignTemplate {
  id        String   @id @default(cuid())
  name      String
  category  String
  template  Json
  preview   String?
  tags      String[]
  usage     Int      @default(0)
  rating    Float?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("design_templates")
}

model EmailCampaign {
  id         String              @id @default(cuid())
  name       String
  subject    String
  content    Json
  recipients Json
  status     EmailCampaignStatus @default(DRAFT)
  scheduleAt DateTime?
  sentAt     DateTime?
  openRate   Float?
  clickRate  Float?
  bounceRate Float?
  metadata   Json?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  @@map("email_campaigns")
}

model SocialSchedule {
  id          String           @id @default(cuid())
  platform    Platform
  content     Json
  caption     String?
  scheduledAt DateTime
  publishedAt DateTime?
  status      SocialPostStatus @default(SCHEDULED)
  engagement  Json?
  reach       Int?
  impressions Int?
  metadata    Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("social_schedules")
}

model SupportTicket {
  id           String          @id @default(cuid())
  ticketId     String          @unique
  customer     Json
  subject      String
  priority     SupportPriority @default(MEDIUM)
  status       SupportStatus   @default(OPEN)
  channel      SupportChannel
  messages     Json
  assignedTo   String?
  resolution   String?
  satisfaction Float?
  resolvedAt   DateTime?
  metadata     Json?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@map("support_tickets")
}

enum UserRole {
  USER
  ADMIN
  MANAGER
  SUPER_ADMIN
  VIEWER
}

enum CampaignType {
  CONTENT_GENERATION
  AD_OPTIMIZATION
  B2B_OUTREACH
  TREND_ANALYSIS
  DESIGN_GENERATION
  SOCIAL_MEDIA
  EMAIL
  ADS
  CONTENT
  INFLUENCER
  EVENT
  PRODUCT_LAUNCH
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  FAILED
  CANCELLED
}

enum Platform {
  FACEBOOK
  INSTAGRAM
  TIKTOK
  TWITTER
  LINKEDIN
  YOUTUBE
  EMAIL
  WEBSITE
  SHOPIFY
  GOOGLE_ADS
  META_ADS
}

enum AgentType {
  CONTENT
  SEO
  EMAIL_MARKETING
  SOCIAL_POSTING
  CUSTOMER_SUPPORT
  AD
  OUTREACH
  TREND
  INSIGHT
  DESIGN
  BRAND_VOICE
}

enum AgentStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  DEPRECATED
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum AnalyticsType {
  ENGAGEMENT
  REACH
  CONVERSION
  REVENUE
  CLICKS
  IMPRESSIONS
  SENTIMENT
  PERFORMANCE
}

enum ABTestStatus {
  DRAFT
  RUNNING
  COMPLETED
  STOPPED
}

enum ContentType {
  POST
  STORY
  REEL
  VIDEO
  EMAIL
  AD
  BLOG
  PRODUCT
}

enum ContentStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  LOST
}

enum EmailCampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
  CANCELLED
  FAILED
}

enum SocialPostStatus {
  DRAFT
  SCHEDULED
  PUBLISHING
  PUBLISHED
  FAILED
  CANCELLED
}

enum SupportPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SupportStatus {
  OPEN
  IN_PROGRESS
  PENDING_CUSTOMER
  RESOLVED
  CLOSED
}

enum SupportChannel {
  WHATSAPP
  EMAIL
  CHAT
  PHONE
  SOCIAL
}

model BrandVoice {
  id            String   @id @default(cuid())
  name          String
  description   String?
  guidelines    Json
  keywords      String[]
  toneProfile   Json
  isActive      Boolean  @default(true)
  version       String   @default("1.0")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  analysisData  Json?
  sampleContent Json?
  analyses      BrandVoiceAnalysis[]

  @@map("brand_voices")
}

model BrandVoiceAnalysis {
  id           String     @id @default(cuid())
  brandVoiceId String
  contentId    String?
  contentType  String
  originalText String
  voiceScore   Float
  suggestions  Json
  analyzedAt   DateTime   @default(now())
  metadata     Json?
  brandVoice   BrandVoice @relation(fields: [brandVoiceId], references: [id], onDelete: Cascade)

  @@map("brand_voice_analyses")
}

// Agent Learning Tracker Models
model TrainingLog {
  id               String   @id @default(cuid())
  agentId          String
  agentType        String
  eventType        TrainingEventType
  scoreBefore      Float?
  scoreAfter       Float?
  scoreDelta       Float?
  trainingData     Json?
  hyperparameters  Json?
  modelVersion     String?
  retryCount       Int      @default(0)
  performance      Json?
  metadata         Json?
  createdAt        DateTime @default(now())
  
  @@index([agentId])
  @@index([agentType])
  @@index([eventType])
  @@index([createdAt])
  @@map("training_logs")
}

// AI Asset Library Models
model Asset {
  id          String        @id @default(cuid())
  name        String
  type        AssetType
  category    String?
  description String?
  content     Json          // Flexible content structure
  fileUrl     String?       // URL to stored file
  thumbnail   String?       // Thumbnail/preview URL
  metadata    Json?         // Asset-specific metadata
  tags        String[]
  status      AssetStatus   @default(PENDING)
  version     String        @default("1.0")
  parentId    String?       // For remixes/versions
  createdBy   String?       // User who created/generated it
  approvedBy  String?       // User who approved it
  remixCount  Int           @default(0)
  usage       Int           @default(0)
  rating      Float?
  size        Int?          // File size in bytes
  dimensions  Json?         // Width/height for images/videos
  duration    Int?          // Duration for videos/audio
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  parent      Asset?        @relation("AssetVersions", fields: [parentId], references: [id])
  versions    Asset[]       @relation("AssetVersions")
  approvals   AssetApproval[]
  
  @@index([type])
  @@index([category])
  @@index([status])
  @@index([createdBy])
  @@index([createdAt])
  @@map("assets")
}

model AssetApproval {
  id        String           @id @default(cuid())
  assetId   String
  userId    String
  status    ApprovalStatus
  comment   String?
  createdAt DateTime         @default(now())
  
  asset     Asset            @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  @@unique([assetId, userId])
  @@map("asset_approvals")
}

// Unified System Settings Models
model Setting {
  id          String       @id @default(cuid())
  key         String       @unique
  value       Json
  type        SettingType
  category    String
  description String?
  isSystem    Boolean      @default(false)
  isEncrypted Boolean      @default(false)
  userId      String?      // User-specific settings
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@index([category])
  @@index([userId])
  @@map("settings")
}

model APIKey {
  id          String    @id @default(cuid())
  name        String
  service     String    // OpenAI, Claude, etc.
  keyPreview  String    // First few chars + masked
  isActive    Boolean   @default(true)
  lastUsed    DateTime?
  usageCount  Int       @default(0)
  createdBy   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([service])
  @@index([isActive])
  @@map("api_keys")
}

model PromptTemplate {
  id          String   @id @default(cuid())
  name        String
  category    String
  template    String
  variables   String[] // Available template variables
  description String?
  version     String   @default("1.0")
  isActive    Boolean  @default(true)
  usage       Int      @default(0)
  rating      Float?
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([category])
  @@index([isActive])
  @@map("prompt_templates")
}

// New Enums
enum TrainingEventType {
  FINE_TUNING
  RETRY
  OPTIMIZATION
  PERFORMANCE_UPDATE
  MODEL_SWITCH
  VALIDATION
}

enum AssetType {
  IMAGE
  VIDEO
  AUDIO
  TEXT
  DOCUMENT
  TEMPLATE
  DESIGN
  ANIMATION
  DATASET
}

enum AssetStatus {
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
  DRAFT
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  REQUIRES_CHANGES
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  ARRAY
  ENCRYPTED
}
