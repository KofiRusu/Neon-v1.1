[{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/__tests__/a11y/accessibility.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EmailPage' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":11,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SocialPage' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":12,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SupportPage' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":13,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AgentsPage' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":14,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AnalyticsPage' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":15,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Accessibility Test Suite\n * Validates WCAG 2.1 AA compliance across components\n */\n\nimport { render } from '@testing-library/react';\nimport { axe, toHaveNoViolations } from 'jest-axe';\nimport Dashboard from '@/app/page';\n\n// Import other pages\nconst EmailPage = () => import('@/app/email/page');\nconst SocialPage = () => import('@/app/social/page');\nconst SupportPage = () => import('@/app/support/page');\nconst AgentsPage = () => import('@/app/agents/page');\nconst AnalyticsPage = () => import('@/app/analytics/page');\n\nexpect.extend(toHaveNoViolations);\n\n// Mock Next.js router\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    refresh: jest.fn(),\n  }),\n  useSearchParams: () => ({\n    get: jest.fn(),\n  }),\n  usePathname: () => '/',\n}));\n\n// Mock tRPC\njest.mock('@/utils/trpc', () => ({\n  trpc: {\n    useQuery: () => ({ data: null, isLoading: false }),\n    useMutation: () => ({ mutate: jest.fn() }),\n    campaign: {\n      list: {\n        useQuery: () => ({ data: [], isLoading: false }),\n      },\n    },\n    email: {\n      generateSequence: {\n        useMutation: () => ({ mutate: jest.fn() }),\n      },\n      getAnalytics: {\n        useQuery: () => ({ data: null, isLoading: false }),\n      },\n    },\n    social: {\n      getCredentials: {\n        useQuery: () => ({ data: null, isLoading: false }),\n      },\n    },\n  },\n}));\n\ndescribe('Accessibility Tests', () => {\n  beforeEach(() => {\n    // Reset any DOM state\n    document.body.innerHTML = '';\n  });\n\n  it('Dashboard has no accessibility violations', async () => {\n    const { container } = render(<Dashboard />);\n    const results = await axe(container);\n    expect(results).toHaveNoViolations();\n  });\n\n  it('All interactive elements have proper ARIA labels', async () => {\n    const { container } = render(<Dashboard />);\n    \n    // Check for buttons with aria-label or text content\n    const buttons = container.querySelectorAll('button');\n    buttons.forEach(button => {\n      const hasAccessibleName = \n        button.hasAttribute('aria-label') || \n        button.hasAttribute('aria-labelledby') ||\n        button.textContent?.trim() !== '' ||\n        button.querySelector('svg[aria-label]') !== null;\n      \n      expect(hasAccessibleName).toBe(true);\n    });\n  });\n\n  it('All images have alt text', async () => {\n    const { container } = render(<Dashboard />);\n    \n    const images = container.querySelectorAll('img');\n    images.forEach(img => {\n      const hasAltText = \n        img.hasAttribute('alt') ||\n        img.hasAttribute('aria-label') ||\n        img.hasAttribute('role') && img.getAttribute('role') === 'presentation';\n      \n      expect(hasAltText).toBe(true);\n    });\n  });\n\n  it('Form elements have proper labels', async () => {\n    const { container } = render(<Dashboard />);\n    \n    const inputs = container.querySelectorAll('input, textarea, select');\n    inputs.forEach(input => {\n      const hasLabel = \n        input.hasAttribute('aria-label') ||\n        input.hasAttribute('aria-labelledby') ||\n        input.hasAttribute('placeholder') ||\n        container.querySelector(`label[for=\"${input.id}\"]`) !== null;\n      \n      expect(hasLabel).toBeTruthy();\n    });\n  });\n\n  it('Focus management is properly implemented', async () => {\n    const { container } = render(<Dashboard />);\n    \n    const focusableElements = container.querySelectorAll(\n      'button:not([disabled]), [href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex=\"-1\"])'\n    );\n    \n    expect(focusableElements.length).toBeGreaterThan(0);\n    \n    // Check that focusable elements have visible focus indicators\n    focusableElements.forEach(element => {\n      // In a real test, you'd programmatically focus and check computed styles\n      expect(element).toBeDefined();\n    });\n  });\n\n  it('Color contrast meets WCAG AA standards', async () => {\n    const { container } = render(<Dashboard />);\n    \n    // Run axe specifically for color contrast\n    const results = await axe(container, {\n      rules: {\n        'color-contrast': { enabled: true },\n      },\n    });\n    \n    expect(results).toHaveNoViolations();\n  });\n\n  it('Keyboard navigation works properly', async () => {\n    const { container } = render(<Dashboard />);\n    \n    const interactiveElements = container.querySelectorAll(\n      'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    );\n    \n    // Check that all interactive elements can receive focus\n    interactiveElements.forEach(element => {\n      expect(element.getAttribute('tabindex')).not.toBe('-1');\n    });\n  });\n\n  it('Screen reader compatibility', async () => {\n    const { container } = render(<Dashboard />);\n    \n    // Check for proper heading hierarchy\n    const headings = container.querySelectorAll('h1, h2, h3, h4, h5, h6');\n    expect(headings.length).toBeGreaterThan(0);\n    \n    // Check for landmarks\n    const landmarks = container.querySelectorAll(\n      '[role=\"main\"], [role=\"navigation\"], [role=\"banner\"], [role=\"contentinfo\"], main, nav, header, footer'\n    );\n    expect(landmarks.length).toBeGreaterThan(0);\n  });\n\n  it('Error states are accessible', async () => {\n    const { container } = render(<Dashboard />);\n    \n    // Check for error messages with proper ARIA attributes\n    const errorElements = container.querySelectorAll('[role=\"alert\"], .error, [aria-invalid=\"true\"]');\n    \n    errorElements.forEach(element => {\n      if (element.hasAttribute('aria-invalid')) {\n        // Should have aria-describedby pointing to error message\n        const ariaDescribedBy = element.getAttribute('aria-describedby');\n        if (ariaDescribedBy) {\n          const errorMessage = container.querySelector(`#${ariaDescribedBy}`);\n          expect(errorMessage).toBeTruthy();\n        }\n      }\n    });\n  });\n\n  it('Skip links are present for keyboard users', async () => {\n    const { container } = render(<Dashboard />);\n    \n    // Look for skip links (usually hidden but available to keyboard users)\n    const skipLinks = container.querySelectorAll('a[href^=\"#\"]');\n    \n    // In a proper implementation, there should be skip links to main content\n    expect(skipLinks.length).toBeGreaterThanOrEqual(0);\n  });\n\n  it('Dynamic content changes are announced', async () => {\n    const { container } = render(<Dashboard />);\n    \n    // Check for ARIA live regions\n    const liveRegions = container.querySelectorAll(\n      '[aria-live], [role=\"status\"], [role=\"alert\"]'\n    );\n    \n    // Should have at least some live regions for dynamic updates\n    expect(liveRegions.length).toBeGreaterThanOrEqual(0);\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/ab-testing/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'api' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showCreateTest' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":51,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * A/B Testing Management Page\n * Complete interface for variant generation, test management, and analytics\n */\n\nimport React, { useState } from 'react';\nimport { api } from '../../utils/trpc';\nimport { Button } from '../../components/ui/button';\nimport { Badge } from '../../components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../../components/ui/tabs';\nimport VariantAnalyticsPanel from '../../components/VariantAnalyticsPanel';\nimport { \n  TestTube,\n  Zap,\n  BarChart3,\n  Clock,\n  Users,\n  Target,\n  Sparkles,\n  Play,\n  Plus,\n  Settings,\n  TrendingUp,\n  Trophy,\n  Activity,\n  Calendar,\n  Brain\n} from 'lucide-react';\n\ninterface ABTestSummary {\n  id: string;\n  name: string;\n  status: 'running' | 'completed' | 'winner_declared' | 'draft';\n  progress: number;\n  variants: number;\n  winner?: string;\n  performance: {\n    bestLift: number;\n    significance: number;\n  };\n  createdAt: Date;\n  completedAt?: Date;\n}\n\nexport default function ABTestingPage(): JSX.Element {\n  const [selectedTestId, setSelectedTestId] = useState<string | null>(null);\n  const [activeTab, setActiveTab] = useState('overview');\n  const [showCreateTest, setShowCreateTest] = useState(false);\n\n  // Mock data - replace with real tRPC calls\n  const mockTests: ABTestSummary[] = [\n    {\n      id: 'test_001',\n      name: 'Holiday Email Subject Personalization',\n      status: 'winner_declared',\n      progress: 100,\n      variants: 2,\n      winner: 'variant_b',\n      performance: {\n        bestLift: 32.6,\n        significance: 0.98\n      },\n      createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),\n      completedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000)\n    },\n    {\n      id: 'test_002',\n      name: 'CTA Button Design & Copy',\n      status: 'running',\n      progress: 65,\n      variants: 3,\n      performance: {\n        bestLift: 18.4,\n        significance: 0.85\n      },\n      createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000)\n    },\n    {\n      id: 'test_003',\n      name: 'Email Send Time Optimization',\n      status: 'running',\n      progress: 28,\n      variants: 4,\n      performance: {\n        bestLift: 8.2,\n        significance: 0.65\n      },\n      createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000)\n    }\n  ];\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'running': return <Activity className=\"h-4 w-4 text-neon-green animate-pulse\" />;\n      case 'winner_declared': return <Trophy className=\"h-4 w-4 text-neon-blue\" />;\n      case 'completed': return <Target className=\"h-4 w-4 text-neon-green\" />;\n      case 'draft': return <Clock className=\"h-4 w-4 text-secondary\" />;\n      default: return <Clock className=\"h-4 w-4 text-secondary\" />;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'running':\n        return <Badge className=\"bg-neon-green text-black\">Running</Badge>;\n      case 'winner_declared':\n        return <Badge className=\"bg-neon-blue text-black\">Winner Declared</Badge>;\n      case 'completed':\n        return <Badge className=\"bg-gray-500 text-white\">Completed</Badge>;\n      case 'draft':\n        return <Badge variant=\"outline\">Draft</Badge>;\n      default:\n        return <Badge variant=\"secondary\">Unknown</Badge>;\n    }\n  };\n\n  const formatDate = (date: Date): string => {\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const handleCreateNewTest = () => {\n    setShowCreateTest(true);\n    setActiveTab('create');\n  };\n\n  return (\n    <div className=\"min-h-screen p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"glass-strong p-6 rounded-2xl\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-14 h-14 bg-gradient-to-r from-neon-blue to-neon-purple rounded-2xl flex items-center justify-center\">\n                <TestTube className=\"h-7 w-7 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold text-primary\">A/B Testing Lab</h1>\n                <p className=\"text-secondary\">Advanced campaign optimization with AI-powered variant generation</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-3\">\n              <Button\n                onClick={handleCreateNewTest}\n                className=\"btn-neon\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create New Test\n              </Button>\n              <Button variant=\"outline\" className=\"border-neon-purple text-neon-purple hover:bg-neon-purple hover:text-black\">\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Settings\n              </Button>\n            </div>\n          </div>\n\n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mt-6\">\n            <div className=\"glass p-4 rounded-xl text-center\">\n              <div className=\"text-2xl font-bold text-neon-blue\">{mockTests.filter(t => t.status === 'running').length}</div>\n              <div className=\"text-sm text-secondary\">Running Tests</div>\n            </div>\n            <div className=\"glass p-4 rounded-xl text-center\">\n              <div className=\"text-2xl font-bold text-neon-green\">{mockTests.filter(t => t.status === 'winner_declared').length}</div>\n              <div className=\"text-sm text-secondary\">Winners Declared</div>\n            </div>\n            <div className=\"glass p-4 rounded-xl text-center\">\n              <div className=\"text-2xl font-bold text-neon-purple\">\n                {Math.round(mockTests.reduce((sum, t) => sum + t.performance.bestLift, 0) / mockTests.length)}%\n              </div>\n              <div className=\"text-sm text-secondary\">Avg. Lift</div>\n            </div>\n            <div className=\"glass p-4 rounded-xl text-center\">\n              <div className=\"text-2xl font-bold text-neon-pink\">\n                {Math.round(mockTests.reduce((sum, t) => sum + t.performance.significance, 0) / mockTests.length * 100)}%\n              </div>\n              <div className=\"text-sm text-secondary\">Avg. Confidence</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"glass\">\n            <TabsTrigger value=\"overview\" className=\"flex items-center space-x-2\">\n              <BarChart3 className=\"h-4 w-4\" />\n              <span>Overview</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"analytics\" className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"h-4 w-4\" />\n              <span>Analytics</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"create\" className=\"flex items-center space-x-2\">\n              <Zap className=\"h-4 w-4\" />\n              <span>Create Test</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"schedule\" className=\"flex items-center space-x-2\">\n              <Calendar className=\"h-4 w-4\" />\n              <span>Smart Scheduling</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\">\n            <div className=\"space-y-6\">\n              {/* Active Tests */}\n              <Card className=\"card-neon\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Activity className=\"h-5 w-5 text-neon-green\" />\n                    <span>Active Tests</span>\n                  </CardTitle>\n                  <CardDescription>Currently running A/B tests with real-time performance tracking</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {mockTests.filter(test => test.status === 'running').map(test => (\n                      <div key={test.id} className=\"glass p-4 rounded-xl\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <div className=\"flex items-center space-x-3\">\n                            {getStatusIcon(test.status)}\n                            <div>\n                              <h4 className=\"font-semibold text-primary\">{test.name}</h4>\n                              <p className=\"text-sm text-secondary\">{test.variants} variants • Started {formatDate(test.createdAt)}</p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-3\">\n                            {getStatusBadge(test.status)}\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => {\n                                setSelectedTestId(test.id);\n                                setActiveTab('analytics');\n                              }}\n                            >\n                              View Details\n                            </Button>\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                          <div>\n                            <span className=\"text-secondary\">Progress</span>\n                            <div className=\"text-lg font-semibold text-primary\">{test.progress}%</div>\n                          </div>\n                          <div>\n                            <span className=\"text-secondary\">Best Lift</span>\n                            <div className=\"text-lg font-semibold text-neon-green\">+{test.performance.bestLift.toFixed(1)}%</div>\n                          </div>\n                          <div>\n                            <span className=\"text-secondary\">Confidence</span>\n                            <div className=\"text-lg font-semibold text-neon-blue\">{(test.performance.significance * 100).toFixed(0)}%</div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Completed Tests */}\n              <Card className=\"card-neon\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Trophy className=\"h-5 w-5 text-neon-blue\" />\n                    <span>Completed Tests</span>\n                  </CardTitle>\n                  <CardDescription>Historical A/B tests with declared winners and learnings</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {mockTests.filter(test => test.status === 'winner_declared' || test.status === 'completed').map(test => (\n                      <div key={test.id} className=\"glass p-4 rounded-xl\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-3\">\n                            {getStatusIcon(test.status)}\n                            <div>\n                              <h4 className=\"font-semibold text-primary\">{test.name}</h4>\n                              <p className=\"text-sm text-secondary\">\n                                Completed {test.completedAt ? formatDate(test.completedAt) : 'Recently'}\n                                {test.winner && ` • Winner: ${test.winner}`}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-3\">\n                            {getStatusBadge(test.status)}\n                            <div className=\"text-right\">\n                              <div className=\"text-sm text-secondary\">Performance Lift</div>\n                              <div className=\"text-lg font-semibold text-neon-green\">\n                                +{test.performance.bestLift.toFixed(1)}%\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Analytics Tab */}\n          <TabsContent value=\"analytics\">\n            <div className=\"space-y-6\">\n              {selectedTestId ? (\n                <VariantAnalyticsPanel \n                  testId={selectedTestId}\n                  autoRefresh={true}\n                  refreshInterval={30}\n                />\n              ) : (\n                <Card className=\"card-neon\">\n                  <CardContent className=\"text-center py-12\">\n                    <BarChart3 className=\"h-16 w-16 text-secondary mx-auto mb-4\" />\n                    <h3 className=\"text-xl font-semibold text-primary mb-2\">Select a Test to View Analytics</h3>\n                    <p className=\"text-secondary mb-6\">Choose an active or completed test from the overview to see detailed performance analytics</p>\n                    <Button \n                      onClick={() => setActiveTab('overview')}\n                      className=\"btn-neon\"\n                    >\n                      Go to Overview\n                    </Button>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </TabsContent>\n\n          {/* Create Test Tab */}\n          <TabsContent value=\"create\">\n            <div className=\"space-y-6\">\n              <Card className=\"card-neon\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Zap className=\"h-5 w-5 text-neon-purple\" />\n                    <span>AI-Powered Variant Generation</span>\n                  </CardTitle>\n                  <CardDescription>\n                    Create optimized content variants using advanced AI and historical performance data\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {/* Campaign Content Input */}\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                    <div className=\"space-y-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium text-secondary mb-2\">Email Subject Line</label>\n                        <input\n                          type=\"text\"\n                          placeholder=\"Enter your email subject...\"\n                          className=\"input-neon w-full\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-secondary mb-2\">Email Body</label>\n                        <textarea\n                          placeholder=\"Enter your email content...\"\n                          rows={4}\n                          className=\"input-neon w-full\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-secondary mb-2\">Call-to-Action</label>\n                        <input\n                          type=\"text\"\n                          placeholder=\"Learn More\"\n                          className=\"input-neon w-full\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium text-secondary mb-2\">Target Audience</label>\n                        <select className=\"input-neon w-full\">\n                          <option>Premium Subscribers</option>\n                          <option>New Users</option>\n                          <option>Engaged Users</option>\n                          <option>At-Risk Users</option>\n                        </select>\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-secondary mb-2\">Content Type</label>\n                        <select className=\"input-neon w-full\">\n                          <option>Email Marketing</option>\n                          <option>Social Media</option>\n                          <option>SMS Campaign</option>\n                          <option>Push Notification</option>\n                        </select>\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-secondary mb-2\">Brand Tone</label>\n                        <select className=\"input-neon w-full\">\n                          <option>Professional</option>\n                          <option>Conversational</option>\n                          <option>Urgent</option>\n                          <option>Friendly</option>\n                        </select>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Variant Types Selection */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-secondary mb-3\">Variant Types to Generate</label>\n                    <div className=\"grid grid-cols-2 md:grid-cols-5 gap-3\">\n                      {[\n                        { key: 'subject', label: 'Subject Lines', icon: Brain },\n                        { key: 'copy', label: 'Copy Styles', icon: Sparkles },\n                        { key: 'visual', label: 'Visual Themes', icon: BarChart3 },\n                        { key: 'cta', label: 'CTAs', icon: Target },\n                        { key: 'timing', label: 'Send Times', icon: Clock }\n                      ].map(({ key, label, icon: Icon }) => (\n                        <label key={key} className=\"glass p-3 rounded-xl cursor-pointer hover:bg-neon-blue/10 transition-colors\">\n                          <div className=\"flex items-center space-x-2\">\n                            <input type=\"checkbox\" className=\"rounded border-gray-600\" defaultChecked />\n                            <Icon className=\"h-4 w-4 text-neon-blue\" />\n                            <span className=\"text-sm font-medium\">{label}</span>\n                          </div>\n                        </label>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Generate Button */}\n                  <div className=\"flex items-center justify-between pt-4 border-t border-gray-700\">\n                    <div className=\"text-sm text-secondary\">\n                      AI will generate 3-5 optimized variants for each selected type\n                    </div>\n                    <Button className=\"btn-neon\">\n                      <Sparkles className=\"h-4 w-4 mr-2\" />\n                      Generate Variants\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Test Configuration */}\n              <Card className=\"card-neon\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Settings className=\"h-5 w-5 text-neon-green\" />\n                    <span>Test Configuration</span>\n                  </CardTitle>\n                  <CardDescription>Advanced settings for statistical significance and test parameters</CardDescription>\n                </CardHeader>\n                <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-secondary mb-2\">Test Duration</label>\n                      <select className=\"input-neon w-full\">\n                        <option>48 hours (Recommended)</option>\n                        <option>24 hours</option>\n                        <option>72 hours</option>\n                        <option>1 week</option>\n                        <option>Custom</option>\n                      </select>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-secondary mb-2\">Confidence Level</label>\n                      <select className=\"input-neon w-full\">\n                        <option>95% (Standard)</option>\n                        <option>90%</option>\n                        <option>99%</option>\n                      </select>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-secondary mb-2\">Primary Metric</label>\n                      <select className=\"input-neon w-full\">\n                        <option>Conversion Rate</option>\n                        <option>Open Rate</option>\n                        <option>Click Rate</option>\n                        <option>Revenue per User</option>\n                      </select>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-secondary mb-2\">Auto-declare Winner</label>\n                      <select className=\"input-neon w-full\">\n                        <option>Yes (Recommended)</option>\n                        <option>No - Manual Review</option>\n                      </select>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Smart Scheduling Tab */}\n          <TabsContent value=\"schedule\">\n            <Card className=\"card-neon\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Calendar className=\"h-5 w-5 text-neon-purple\" />\n                  <span>Smart Scheduling Engine</span>\n                </CardTitle>\n                <CardDescription>\n                  AI-powered optimal timing based on audience behavior and historical performance\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"text-center py-12\">\n                <Calendar className=\"h-16 w-16 text-secondary mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold text-primary mb-2\">Smart Scheduling Integration</h3>\n                <p className=\"text-secondary mb-6 max-w-2xl mx-auto\">\n                  The Smart Scheduling Engine analyzes historical performance, audience behavior patterns, and \n                  competitive landscape to determine optimal send times for maximum engagement.\n                </p>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 max-w-4xl mx-auto mb-6\">\n                  <div className=\"glass p-4 rounded-xl\">\n                    <Users className=\"h-8 w-8 text-neon-blue mx-auto mb-2\" />\n                    <h4 className=\"font-semibold text-primary mb-1\">Audience Analysis</h4>\n                    <p className=\"text-sm text-secondary\">Learns from audience activity patterns</p>\n                  </div>\n                  <div className=\"glass p-4 rounded-xl\">\n                    <Clock className=\"h-8 w-8 text-neon-green mx-auto mb-2\" />\n                    <h4 className=\"font-semibold text-primary mb-1\">Optimal Timing</h4>\n                    <p className=\"text-sm text-secondary\">Predicts best send times per segment</p>\n                  </div>\n                  <div className=\"glass p-4 rounded-xl\">\n                    <TrendingUp className=\"h-8 w-8 text-neon-purple mx-auto mb-2\" />\n                    <h4 className=\"font-semibold text-primary mb-1\">Performance Boost</h4>\n                    <p className=\"text-sm text-secondary\">Average 15-30% engagement increase</p>\n                  </div>\n                </div>\n                <Button className=\"btn-neon\">\n                  <Play className=\"h-4 w-4 mr-2\" />\n                  Enable Smart Scheduling\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/agents/content-editor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/agents/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'api' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CpuChipIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PauseIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[620,623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[620,623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3751,3754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3751,3754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { api } from '../../utils/trpc';\nimport {\n  CpuChipIcon,\n  DocumentTextIcon,\n  EnvelopeIcon,\n  GlobeAltIcon,\n  ChatBubbleLeftIcon,\n  ChartBarIcon,\n  PaintBrushIcon,\n  BoltIcon,\n  MagnifyingGlassIcon,\n  PlayIcon,\n  PauseIcon,\n  Cog6ToothIcon,\n  ArrowTrendingUpIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n} from '@heroicons/react/24/outline';\n\ninterface Agent {\n  id: string;\n  name: string;\n  type: string;\n  status: 'active' | 'inactive' | 'error';\n  performance: number;\n  lastAction: string;\n  description: string;\n  icon: React.ComponentType<any>;\n  color: string;\n}\n\nexport default function AgentsPage(): JSX.Element {\n  const [selectedAgent, setSelectedAgent] = useState<string | null>(null);\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  useEffect(() => {\n    const timer = setInterval(() => setCurrentTime(new Date()), 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  const agents: Agent[] = [\n    {\n      id: 'content',\n      name: 'ContentAgent',\n      type: 'Content Generation',\n      status: 'active',\n      performance: 94,\n      lastAction: '2 min ago',\n      description: 'AI-powered content generation and optimization',\n      icon: DocumentTextIcon,\n      color: 'text-blue-400'\n    },\n    {\n      id: 'email',\n      name: 'EmailAgent',\n      type: 'Email Marketing',\n      status: 'active',\n      performance: 91,\n      lastAction: '1 min ago',\n      description: 'Automated email campaigns and sequences',\n      icon: EnvelopeIcon,\n      color: 'text-purple-400'\n    },\n    {\n      id: 'social',\n      name: 'SocialAgent',\n      type: 'Social Media',\n      status: 'active',\n      performance: 89,\n      lastAction: '3 min ago',\n      description: 'Multi-platform social media management',\n      icon: GlobeAltIcon,\n      color: 'text-green-400'\n    },\n    {\n      id: 'support',\n      name: 'SupportAgent',\n      type: 'Customer Support',\n      status: 'active',\n      performance: 96,\n      lastAction: '4 min ago',\n      description: 'AI-powered customer support automation',\n      icon: ChatBubbleLeftIcon,\n      color: 'text-pink-400'\n    },\n    {\n      id: 'seo',\n      name: 'SEOAgent',\n      type: 'SEO Optimization',\n      status: 'active',\n      performance: 87,\n      lastAction: '5 min ago',\n      description: 'Search engine optimization and keyword targeting',\n      icon: MagnifyingGlassIcon,\n      color: 'text-indigo-400'\n    },\n    {\n      id: 'insight',\n      name: 'InsightAgent',\n      type: 'Analytics & Insights',\n      status: 'active',\n      performance: 92,\n      lastAction: '6 min ago',\n      description: 'Advanced analytics and performance insights',\n      icon: ChartBarIcon,\n      color: 'text-cyan-400'\n    },\n    {\n      id: 'design',\n      name: 'DesignAgent',\n      type: 'Creative Design',\n      status: 'active',\n      performance: 88,\n      lastAction: '8 min ago',\n      description: 'AI-powered creative asset generation',\n      icon: PaintBrushIcon,\n      color: 'text-orange-400'\n    },\n    {\n      id: 'ad',\n      name: 'AdAgent',\n      type: 'Ad Optimization',\n      status: 'active',\n      performance: 93,\n      lastAction: '7 min ago',\n      description: 'Automated ad optimization and bidding',\n      icon: BoltIcon,\n      color: 'text-yellow-400'\n    },\n  ];\n\n  const getStatusColor = (status: string): string => {\n    switch (status) {\n      case 'active':\n        return 'text-green-400 bg-green-400/20';\n      case 'inactive':\n        return 'text-gray-400 bg-gray-400/20';\n      case 'error':\n        return 'text-red-400 bg-red-400/20';\n      default:\n        return 'text-gray-400 bg-gray-400/20';\n    }\n  };\n\n  const getStatusIcon = (status: string): React.ComponentType<any> => {\n    switch (status) {\n      case 'active':\n        return CheckCircleIcon;\n      case 'error':\n        return ExclamationTriangleIcon;\n      default:\n        return Cog6ToothIcon;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-space-gray\">\n      {/* Header */}\n      <div className=\"border-b border-gray-800 bg-gray-900/50 backdrop-blur-md\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-white\">AI Agents Hub</h1>\n              <p className=\"text-gray-400 mt-1\">Manage and monitor your AI workforce</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                <span className=\"text-sm text-gray-400\">All systems operational</span>\n              </div>\n              <div className=\"text-sm text-gray-500\">{currentTime.toLocaleTimeString()}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Agents Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {agents.map((agent) => {\n            const Icon = agent.icon;\n            const StatusIcon = getStatusIcon(agent.status);\n            \n            return (\n              <div\n                key={agent.id}\n                className={`glass-strong p-6 rounded-2xl hover:scale-105 transition-all duration-300 cursor-pointer ${\n                  selectedAgent === agent.id ? 'ring-2 ring-blue-500' : ''\n                }`}\n                onClick={() => setSelectedAgent(selectedAgent === agent.id ? null : agent.id)}\n              >\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-500 rounded-xl flex items-center justify-center\">\n                    <Icon className=\"h-6 w-6 text-white\" />\n                  </div>\n                  <div className={`w-6 h-6 rounded-full flex items-center justify-center ${getStatusColor(agent.status)}`}>\n                    <StatusIcon className=\"h-4 w-4\" />\n                  </div>\n                </div>\n\n                <div className=\"mb-4\">\n                  <h3 className=\"text-lg font-bold text-white mb-1\">{agent.name}</h3>\n                  <p className=\"text-sm text-gray-400 mb-2\">{agent.type}</p>\n                  <p className=\"text-xs text-gray-500\">{agent.description}</p>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-400\">Performance</span>\n                    <span className={`font-semibold ${agent.color}`}>{agent.performance}%</span>\n                  </div>\n                  \n                  <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                    <div\n                      className=\"bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${agent.performance}%` }}\n                    ></div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between text-xs\">\n                    <span className=\"text-gray-500\">Last action</span>\n                    <span className=\"text-gray-400\">{agent.lastAction}</span>\n                  </div>\n                </div>\n\n                <div className=\"mt-4 pt-4 border-t border-gray-700\">\n                  <div className=\"flex items-center justify-between\">\n                    <button className=\"flex items-center space-x-2 text-blue-400 hover:text-blue-300 transition-colors\">\n                      <PlayIcon className=\"h-4 w-4\" />\n                      <span className=\"text-sm\">Configure</span>\n                    </button>\n                    <button className=\"flex items-center space-x-2 text-gray-400 hover:text-white transition-colors\">\n                      <ArrowTrendingUpIcon className=\"h-4 w-4\" />\n                      <span className=\"text-sm\">View Metrics</span>\n                    </button>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Agent Details Panel */}\n        {selectedAgent && (\n          <div className=\"mt-8 glass-strong p-6 rounded-2xl\">\n            <h2 className=\"text-xl font-bold text-white mb-4\">\n              {agents.find(a => a.id === selectedAgent)?.name} Details\n            </h2>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-white mb-3\">Recent Activity</h3>\n                <div className=\"space-y-3\">\n                  {[1, 2, 3].map((_, index) => (\n                    <div key={index} className=\"glass p-3 rounded-lg\">\n                      <p className=\"text-sm text-white\">Sample activity {index + 1}</p>\n                      <p className=\"text-xs text-gray-400 mt-1\">{index + 1} minutes ago</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              <div>\n                <h3 className=\"text-lg font-semibold text-white mb-3\">Performance Metrics</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Success Rate</span>\n                    <span className=\"text-green-400 font-semibold\">98.5%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Response Time</span>\n                    <span className=\"text-blue-400 font-semibold\">1.2s</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Tasks Completed</span>\n                    <span className=\"text-purple-400 font-semibold\">247</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/agents/seo-optimizer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/analytics/agents/[id]/page.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":83,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":83,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2686,2741],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":353,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":353,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14443,14446],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14443,14446],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":358,"column":102,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":358,"endColumn":105,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14785,14788],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14785,14788],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":364,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":364,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14992,14995],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14992,14995],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'next/navigation';\n\ninterface AgentMetrics {\n  id: string;\n  name: string;\n  type: string;\n  status: 'active' | 'inactive' | 'maintenance';\n  performance: {\n    score: number;\n    trend: number;\n    tasksCompleted: number;\n    successRate: number;\n    avgExecutionTime: number;\n    errorRate: number;\n  };\n  usage: {\n    totalExecutions: number;\n    todayExecutions: number;\n    weeklyExecutions: number;\n    monthlyExecutions: number;\n  };\n  capabilities: string[];\n  lastActivity: string;\n  recentTasks: Array<{\n    id: string;\n    task: string;\n    status: 'success' | 'failed' | 'running';\n    executionTime: number;\n    timestamp: string;\n  }>;\n  performanceHistory: Array<{\n    date: string;\n    score: number;\n    executions: number;\n    errors: number;\n  }>;\n}\n\nexport default function AgentDetailPage(): JSX.Element {\n  const params = useParams();\n  const agentId = params.id as string;\n  const [agentMetrics, setAgentMetrics] = useState<AgentMetrics | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [timeRange, setTimeRange] = useState<'24h' | '7d' | '30d' | '90d'>('7d');\n\n  useEffect(() => {\n    const fetchAgentMetrics = async (): Promise<void> => {\n      setIsLoading(true);\n      try {\n        // Simulate API call - replace with actual API integration\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        const mockMetrics: AgentMetrics = {\n          id: agentId,\n          name: getAgentName(agentId),\n          type: getAgentType(agentId),\n          status: 'active',\n          performance: {\n            score: Math.floor(Math.random() * 20) + 80, // 80-100\n            trend: (Math.random() - 0.5) * 10, // -5 to +5\n            tasksCompleted: Math.floor(Math.random() * 1000) + 500,\n            successRate: Math.random() * 0.1 + 0.9, // 90-100%\n            avgExecutionTime: Math.random() * 2000 + 500, // 500-2500ms\n            errorRate: Math.random() * 0.05, // 0-5%\n          },\n          usage: {\n            totalExecutions: Math.floor(Math.random() * 10000) + 5000,\n            todayExecutions: Math.floor(Math.random() * 100) + 20,\n            weeklyExecutions: Math.floor(Math.random() * 500) + 100,\n            monthlyExecutions: Math.floor(Math.random() * 2000) + 500,\n          },\n          capabilities: getAgentCapabilities(agentId),\n          lastActivity: new Date(Date.now() - Math.random() * 3600000).toISOString(),\n          recentTasks: generateRecentTasks(),\n          performanceHistory: generatePerformanceHistory(timeRange),\n        };\n\n        setAgentMetrics(mockMetrics);\n      } catch (error) {\n        console.error('Failed to fetch agent metrics:', error);\n        setAgentMetrics(null);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchAgentMetrics();\n  }, [agentId, timeRange]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex items-center justify-center h-96\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-purple-400\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!agentMetrics) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center py-12\">\n            <div className=\"text-6xl mb-4\">🤖</div>\n            <h3 className=\"text-xl font-semibold text-white mb-2\">Agent Not Found</h3>\n            <p className=\"text-purple-200\">The requested agent could not be found.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-12 h-12 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center\">\n              <span className=\"text-white font-bold text-lg\">\n                {agentMetrics.name.charAt(0)}\n              </span>\n            </div>\n            <div>\n              <h1 className=\"text-4xl font-bold text-white\">{agentMetrics.name}</h1>\n              <p className=\"text-purple-200\">{agentMetrics.type} Agent • Performance Analytics</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <div className={`px-3 py-1 rounded-full text-sm font-medium ${\n              agentMetrics.status === 'active' \n                ? 'bg-green-500/20 text-green-400' \n                : 'bg-red-500/20 text-red-400'\n            }`}>\n              {agentMetrics.status}\n            </div>\n            <div className=\"flex space-x-2\">\n              {(['24h', '7d', '30d', '90d'] as const).map(range => (\n                <button\n                  key={range}\n                  onClick={() => setTimeRange(range)}\n                  className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${\n                    timeRange === range\n                      ? 'bg-purple-600 text-white shadow-lg'\n                      : 'bg-white/10 text-purple-200 hover:bg-white/20'\n                  }`}\n                >\n                  {range.toUpperCase()}\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <MetricCard\n            title=\"Performance Score\"\n            value={`${agentMetrics.performance.score}%`}\n            change={`${agentMetrics.performance.trend > 0 ? '+' : ''}${agentMetrics.performance.trend.toFixed(1)}%`}\n            positive={agentMetrics.performance.trend >= 0}\n            icon=\"🎯\"\n          />\n          <MetricCard\n            title=\"Success Rate\"\n            value={`${(agentMetrics.performance.successRate * 100).toFixed(1)}%`}\n            change={`${agentMetrics.performance.tasksCompleted} tasks`}\n            positive={true}\n            icon=\"✅\"\n          />\n          <MetricCard\n            title=\"Avg Execution Time\"\n            value={`${agentMetrics.performance.avgExecutionTime.toFixed(0)}ms`}\n            change={`${agentMetrics.performance.errorRate.toFixed(2)}% error rate`}\n            positive={agentMetrics.performance.errorRate < 0.02}\n            icon=\"⚡\"\n          />\n          <MetricCard\n            title=\"Total Executions\"\n            value={agentMetrics.usage.totalExecutions.toLocaleString()}\n            change={`${agentMetrics.usage.todayExecutions} today`}\n            positive={true}\n            icon=\"🔄\"\n          />\n        </div>\n\n        {/* Performance Charts */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Performance Trend */}\n          <div className=\"bg-white/10 backdrop-blur-md rounded-xl p-6 border border-white/20\">\n            <h3 className=\"text-xl font-semibold text-white mb-4\">Performance Trend</h3>\n            <div className=\"h-64 flex items-end space-x-2\">\n              {agentMetrics.performanceHistory.map((data, index) => (\n                <div key={index} className=\"flex-1 flex flex-col items-center\">\n                  <div\n                    className=\"w-full bg-gradient-to-t from-purple-600 to-purple-400 rounded-t\"\n                    style={{ height: `${data.score}%` }}\n                  />\n                  <span className=\"text-xs text-purple-200 mt-2 transform -rotate-45 origin-left\">\n                    {data.date.slice(-5)}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Usage Statistics */}\n          <div className=\"bg-white/10 backdrop-blur-md rounded-xl p-6 border border-white/20\">\n            <h3 className=\"text-xl font-semibold text-white mb-4\">Usage Statistics</h3>\n            <div className=\"space-y-4\">\n              <UsageBar \n                label=\"Today\" \n                value={agentMetrics.usage.todayExecutions} \n                max={agentMetrics.usage.weeklyExecutions} \n                color=\"bg-green-500\" \n              />\n              <UsageBar \n                label=\"This Week\" \n                value={agentMetrics.usage.weeklyExecutions} \n                max={agentMetrics.usage.monthlyExecutions} \n                color=\"bg-blue-500\" \n              />\n              <UsageBar \n                label=\"This Month\" \n                value={agentMetrics.usage.monthlyExecutions} \n                max={agentMetrics.usage.totalExecutions} \n                color=\"bg-purple-500\" \n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Capabilities and Recent Tasks */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Agent Capabilities */}\n          <div className=\"bg-white/10 backdrop-blur-md rounded-xl p-6 border border-white/20\">\n            <h3 className=\"text-xl font-semibold text-white mb-4\">Agent Capabilities</h3>\n            <div className=\"space-y-3\">\n              {agentMetrics.capabilities.map((capability, index) => (\n                <div key={index} className=\"flex items-center space-x-3\">\n                  <div className=\"w-2 h-2 bg-purple-400 rounded-full\"></div>\n                  <span className=\"text-white\">{capability}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Recent Tasks */}\n          <div className=\"bg-white/10 backdrop-blur-md rounded-xl p-6 border border-white/20\">\n            <h3 className=\"text-xl font-semibold text-white mb-4\">Recent Tasks</h3>\n            <div className=\"space-y-3\">\n              {agentMetrics.recentTasks.map((task, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-2 h-2 rounded-full ${\n                      task.status === 'success' ? 'bg-green-400' : \n                      task.status === 'failed' ? 'bg-red-400' : 'bg-yellow-400'\n                    }`}></div>\n                    <span className=\"text-white text-sm\">{task.task}</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-purple-200 text-xs\">{task.executionTime}ms</div>\n                    <div className=\"text-purple-300 text-xs\">{new Date(task.timestamp).toLocaleTimeString()}</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Performance Insights */}\n        <div className=\"bg-white/10 backdrop-blur-md rounded-xl p-6 border border-white/20\">\n          <h3 className=\"text-xl font-semibold text-white mb-4\">Performance Insights</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-green-400 mb-2\">\n                {agentMetrics.performance.score >= 95 ? 'Excellent' : \n                 agentMetrics.performance.score >= 85 ? 'Good' : \n                 agentMetrics.performance.score >= 70 ? 'Fair' : 'Needs Improvement'}\n              </div>\n              <div className=\"text-purple-200\">Overall Performance</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-blue-400 mb-2\">\n                {agentMetrics.performance.avgExecutionTime < 1000 ? 'Fast' : \n                 agentMetrics.performance.avgExecutionTime < 2000 ? 'Moderate' : 'Slow'}\n              </div>\n              <div className=\"text-purple-200\">Execution Speed</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-purple-400 mb-2\">\n                {agentMetrics.performance.errorRate < 0.01 ? 'Excellent' : \n                 agentMetrics.performance.errorRate < 0.03 ? 'Good' : 'Needs Attention'}\n              </div>\n              <div className=\"text-purple-200\">Reliability</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Helper functions and components\nfunction getAgentName(agentId: string): string {\n  const agentNames: Record<string, string> = {\n    'content-agent': 'Content Agent',\n    'seo-agent': 'SEO Agent',\n    'email-agent': 'Email Agent',\n    'social-agent': 'Social Agent',\n    'support-agent': 'Support Agent',\n    'trend-agent': 'Trend Agent',\n    'outreach-agent': 'Outreach Agent',\n    'ui-refinement-agent': 'UI Refinement Agent',\n  };\n  return agentNames[agentId] || 'Unknown Agent';\n}\n\nfunction getAgentType(agentId: string): string {\n  const agentTypes: Record<string, string> = {\n    'content-agent': 'Content Generation',\n    'seo-agent': 'SEO Optimization',\n    'email-agent': 'Email Marketing',\n    'social-agent': 'Social Media',\n    'support-agent': 'Customer Support',\n    'trend-agent': 'Trend Analysis',\n    'outreach-agent': 'Outreach & Proposals',\n    'ui-refinement-agent': 'UI/UX Optimization',\n  };\n  return agentTypes[agentId] || 'General Purpose';\n}\n\nfunction getAgentCapabilities(agentId: string): string[] {\n  const capabilities: Record<string, string[]> = {\n    'content-agent': ['Generate blog posts', 'Create social media content', 'Write product descriptions', 'Content optimization'],\n    'seo-agent': ['Keyword research', 'On-page optimization', 'Technical SEO', 'Content analysis'],\n    'email-agent': ['Email campaigns', 'A/B testing', 'Segmentation', 'Automation'],\n    'social-agent': ['Multi-platform posting', 'Engagement tracking', 'Content scheduling', 'Analytics'],\n    'support-agent': ['Ticket management', 'WhatsApp integration', 'Knowledge base', 'Escalation'],\n    'trend-agent': ['Cross-platform trends', 'Viral prediction', 'Hashtag tracking', 'Competitor analysis'],\n    'outreach-agent': ['PDF proposals', 'HTML proposals', 'Email outreach', 'Lead generation'],\n    'ui-refinement-agent': ['UX analysis', 'A/B testing', 'Conversion optimization', 'User journey mapping'],\n  };\n  return capabilities[agentId] || ['General capabilities'];\n}\n\nfunction generateRecentTasks(): any[] {\n  const tasks = ['Generate content', 'Optimize SEO', 'Send email', 'Analyze trends', 'Create proposal'];\n  return Array.from({ length: 5 }, (_, i) => ({\n    id: `task_${i}`,\n    task: tasks[Math.floor(Math.random() * tasks.length)],\n    status: ['success', 'success', 'success', 'failed', 'running'][Math.floor(Math.random() * 5)] as any,\n    executionTime: Math.floor(Math.random() * 2000) + 500,\n    timestamp: new Date(Date.now() - Math.random() * 3600000).toISOString(),\n  }));\n}\n\nfunction generatePerformanceHistory(timeRange: string): any[] {\n  const days = timeRange === '24h' ? 24 : timeRange === '7d' ? 7 : timeRange === '30d' ? 30 : 90;\n  return Array.from({ length: Math.min(days, 20) }, (_, i) => ({\n    date: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n    score: Math.floor(Math.random() * 20) + 80,\n    executions: Math.floor(Math.random() * 100) + 10,\n    errors: Math.floor(Math.random() * 5),\n  }));\n}\n\ninterface MetricCardProps {\n  title: string;\n  value: string;\n  change: string;\n  positive: boolean;\n  icon: string;\n}\n\nfunction MetricCard({ title, value, change, positive, icon }: MetricCardProps): JSX.Element {\n  return (\n    <div className=\"bg-white/10 backdrop-blur-md rounded-xl p-6 border border-white/20 hover:bg-white/15 transition-all\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <span className=\"text-2xl\">{icon}</span>\n        <span className={`text-sm font-medium ${positive ? 'text-green-400' : 'text-red-400'}`}>\n          {change}\n        </span>\n      </div>\n      <h3 className=\"text-purple-200 text-sm font-medium\">{title}</h3>\n      <p className=\"text-2xl font-bold text-white mt-1\">{value}</p>\n    </div>\n  );\n}\n\ninterface UsageBarProps {\n  label: string;\n  value: number;\n  max: number;\n  color: string;\n}\n\nfunction UsageBar({ label, value, max, color }: UsageBarProps): JSX.Element {\n  const percentage = (value / max) * 100;\n  \n  return (\n    <div>\n      <div className=\"flex justify-between text-sm mb-1\">\n        <span className=\"text-white\">{label}</span>\n        <span className=\"text-purple-200\">{value.toLocaleString()}</span>\n      </div>\n      <div className=\"w-full bg-white/20 rounded-full h-2\">\n        <div\n          className={`h-2 rounded-full ${color}`}\n          style={{ width: `${Math.min(percentage, 100)}%` }}\n        />\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/analytics/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'api' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EyeIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CalendarIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FunnelIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserGroupIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ClockIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckCircleIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExclamationTriangleIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[586,589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[586,589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1968,2024],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { api } from '../../utils/trpc';\nimport {\n  ChartBarIcon,\n  CpuChipIcon,\n  RocketLaunchIcon,\n  TrendingUpIcon,\n  EyeIcon,\n  CalendarIcon,\n  FunnelIcon,\n  UserGroupIcon,\n  ArrowTrendingUpIcon,\n  ClockIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n} from '@heroicons/react/24/outline';\n\ninterface TimeRange {\n  label: string;\n  value: string;\n  days: number;\n}\n\ninterface MetricCard {\n  title: string;\n  value: string;\n  change: string;\n  changeType: 'positive' | 'negative' | 'neutral';\n  icon: React.ComponentType<any>;\n  color: string;\n}\n\nexport default function AnalyticsPage(): JSX.Element {\n  const [selectedTimeRange, setSelectedTimeRange] = useState<string>('7d');\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  useEffect(() => {\n    const timer = setInterval(() => setCurrentTime(new Date()), 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // Mock data for development\n  const timeRanges: TimeRange[] = [\n    { label: 'Last 7 days', value: '7d', days: 7 },\n    { label: 'Last 30 days', value: '30d', days: 30 },\n    { label: 'Last 90 days', value: '90d', days: 90 },\n    { label: 'Last year', value: '1y', days: 365 },\n  ];\n\n  const metrics: MetricCard[] = [\n    {\n      title: 'Total Campaigns',\n      value: '24',\n      change: '+12%',\n      changeType: 'positive',\n      icon: RocketLaunchIcon,\n      color: 'neon-blue'\n    },\n    {\n      title: 'Active AI Agents',\n      value: '9',\n      change: '+2',\n      changeType: 'positive',\n      icon: CpuChipIcon,\n      color: 'neon-purple'\n    },\n    {\n      title: 'Conversion Rate',\n      value: '28.4%',\n      change: '+4.2%',\n      changeType: 'positive',\n      icon: TrendingUpIcon,\n      color: 'neon-green'\n    },\n    {\n      title: 'Revenue Generated',\n      value: '$156K',\n      change: '+23.1%',\n      changeType: 'positive',\n      icon: ArrowTrendingUpIcon,\n      color: 'neon-pink'\n    },\n  ];\n\n  console.log('Analytics page rendered at:', currentTime);\n\n  return (\n    <div className=\"min-h-screen bg-space-gray\">\n      {/* Header */}\n      <div className=\"border-b border-gray-800 bg-gray-900/50 backdrop-blur-md\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-white\">Analytics Dashboard</h1>\n              <p className=\"text-gray-400 mt-1\">Real-time insights and performance metrics</p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <select\n                value={selectedTimeRange}\n                onChange={(e) => setSelectedTimeRange(e.target.value)}\n                className=\"bg-gray-800 border border-gray-700 text-white px-4 py-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                {timeRanges.map((range) => (\n                  <option key={range.value} value={range.value}>\n                    {range.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Metrics Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {metrics.map((metric) => {\n            const Icon = metric.icon;\n            return (\n              <div key={metric.title} className=\"stat-card\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className={`w-12 h-12 bg-${metric.color} rounded-xl flex items-center justify-center`}>\n                    <Icon className=\"h-6 w-6 text-white\" />\n                  </div>\n                  <div className={`px-3 py-1 rounded-full text-xs font-semibold ${\n                    metric.changeType === 'positive'\n                      ? 'bg-green-500 text-white'\n                      : metric.changeType === 'negative'\n                      ? 'bg-red-500 text-white'\n                      : 'bg-gray-500 text-white'\n                  }`}>\n                    {metric.change}\n                  </div>\n                </div>\n                <div>\n                  <p className=\"text-gray-400 text-sm font-medium mb-1\">{metric.title}</p>\n                  <p className=\"text-3xl font-bold text-white\">{metric.value}</p>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Charts Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          <div className=\"glass-strong p-6 rounded-2xl\">\n            <h3 className=\"text-xl font-bold text-white mb-6\">Campaign Performance</h3>\n            <div className=\"h-64 flex items-center justify-center text-gray-400\">\n              <div className=\"text-center\">\n                <ChartBarIcon className=\"h-16 w-16 mx-auto mb-4 text-gray-600\" />\n                <p>Performance chart will be displayed here</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"glass-strong p-6 rounded-2xl\">\n            <h3 className=\"text-xl font-bold text-white mb-6\">Agent Activity</h3>\n            <div className=\"h-64 flex items-center justify-center text-gray-400\">\n              <div className=\"text-center\">\n                <CpuChipIcon className=\"h-16 w-16 mx-auto mb-4 text-gray-600\" />\n                <p>Agent activity chart will be displayed here</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Additional Analytics */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2 glass-strong p-6 rounded-2xl\">\n            <h3 className=\"text-xl font-bold text-white mb-6\">Revenue Analytics</h3>\n            <div className=\"h-80 flex items-center justify-center text-gray-400\">\n              <div className=\"text-center\">\n                <TrendingUpIcon className=\"h-16 w-16 mx-auto mb-4 text-gray-600\" />\n                <p>Revenue analytics will be displayed here</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"glass-strong p-6 rounded-2xl\">\n            <h3 className=\"text-xl font-bold text-white mb-6\">Top Performing</h3>\n            <div className=\"space-y-4\">\n              {[\n                { name: 'ContentAgent', performance: '96%', color: 'text-blue-400' },\n                { name: 'EmailAgent', performance: '94%', color: 'text-purple-400' },\n                { name: 'SocialAgent', performance: '92%', color: 'text-green-400' },\n                { name: 'SEOAgent', performance: '89%', color: 'text-pink-400' },\n              ].map((agent) => (\n                <div key={agent.name} className=\"flex items-center justify-between p-3 glass rounded-lg\">\n                  <span className={`font-medium ${agent.color}`}>{agent.name}</span>\n                  <span className=\"text-white font-bold\">{agent.performance}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/brand-voice/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Alert' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'metrics' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":17},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":33,"column":18,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":33,"endColumn":69,"fix":{"range":[1062,1113],"text":"`${brand.voice.primary  } - ${  brand.voice.secondary}`"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedProfile' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":105,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":105,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":106,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":106,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":106,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":106,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":1,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { \n  TrendingUp, \n  MessageSquare, \n  Target, \n  BarChart3, \n  Settings, \n  Plus,\n  Brain,\n  CheckCircle,\n  AlertCircle,\n  Lightbulb\n} from 'lucide-react';\nimport { BrandVoiceProfileModal } from '@/components/BrandVoiceProfileModal';\nimport { ContentVoiceAnalyzer } from '@/components/ContentVoiceAnalyzer';\nimport { VoiceGuidelinesPanel } from '@/components/VoiceGuidelinesPanel';\nimport { brand } from '@/lib/brand';\nimport { metrics } from '@/lib/metrics';\n\n// Real brand voice data from brand configuration\nconst brandProfiles = [\n  {\n    id: '1',\n    name: 'Primary Brand Voice',\n    description: brand.voice.primary + ' - ' + brand.voice.secondary,\n    isActive: true,\n    averageScore: 94,\n    analysisCount: 1847,\n    lastUsed: new Date('2024-01-16'),\n    consistency: 96,\n    toneSettings: brand.voice.tone\n  },\n  {\n    id: '2', \n    name: 'Technical Communication',\n    description: 'Data-driven and analytical for technical content',\n    isActive: false,\n    averageScore: 89,\n    analysisCount: 234,\n    lastUsed: new Date('2024-01-14'),\n    consistency: 91,\n    toneSettings: {\n      professional: 95,\n      friendly: 40,\n      authoritative: 90,\n      casual: 20,\n      innovative: 85\n    }\n  },\n];\n\nconst recentAnalyses = [\n  {\n    id: '1',\n    contentType: 'email',\n    voiceScore: 96,\n    analyzedAt: new Date('2024-01-16T14:30:00'),\n    suggestions: 1,\n    content: 'Email Marketing Campaign - AI Marketing Insights Weekly'\n  },\n  {\n    id: '2',\n    contentType: 'social',\n    voiceScore: 92,\n    analyzedAt: new Date('2024-01-16T12:15:00'),\n    suggestions: 2,\n    content: 'LinkedIn thought leadership post'\n  },\n  {\n    id: '3',\n    contentType: 'blog',\n    voiceScore: 98,\n    analyzedAt: new Date('2024-01-16T09:45:00'),\n    suggestions: 0,\n    content: 'The Future of AI Marketing Automation'\n  },\n  {\n    id: '4',\n    contentType: 'ads',\n    voiceScore: 94,\n    analyzedAt: new Date('2024-01-15T16:20:00'),\n    suggestions: 1,\n    content: 'Facebook ad campaign - Enterprise B2B'\n  },\n];\n\nconst consistencyData = [\n  { contentType: 'Email', score: 96, count: 156, trend: 'up' },\n  { contentType: 'Social', score: 92, count: 89, trend: 'up' },\n  { contentType: 'Blog', score: 98, count: 34, trend: 'up' },\n  { contentType: 'Ads', score: 94, count: 67, trend: 'stable' },\n];\n\nexport default function BrandVoicePage() {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [profileModalOpen, setProfileModalOpen] = useState(false);\n  const [selectedProfile, setSelectedProfile] = useState(brandProfiles[0]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return 'text-green-600';\n    if (score >= 60) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const getScoreBadgeVariant = (score: number) => {\n    if (score >= 80) return 'default';\n    if (score >= 60) return 'secondary';\n    return 'destructive';\n  };\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case 'up':\n        return <TrendingUp className=\"h-4 w-4 text-green-500\" />;\n      case 'down':\n        return <TrendingUp className=\"h-4 w-4 text-red-500 rotate-180\" />;\n      default:\n        return <TrendingUp className=\"h-4 w-4 text-gray-400\" />;\n    }\n  };\n\n  return (\n    <div className=\"p-8 space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Brand Voice</h1>\n          <p className=\"text-gray-600 mt-2\">\n            {brand.mission}\n          </p>\n        </div>\n        <div className=\"flex gap-3\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setProfileModalOpen(true)}\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            New Profile\n          </Button>\n          <Button>\n            <Brain className=\"h-4 w-4 mr-2\" />\n            Analyze Content\n          </Button>\n        </div>\n      </div>\n\n      {/* Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Voice Consistency</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">96%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              +4.2% from last month\n            </p>\n            <Progress value={96} className=\"mt-2\" />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Avg Voice Score</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">94</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across all content types\n            </p>\n            <Progress value={94} className=\"mt-2\" />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Content Analyzed</CardTitle>\n            <MessageSquare className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">2,081</div>\n            <p className=\"text-xs text-muted-foreground\">\n              This month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Profiles</CardTitle>\n            <Settings className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">2</div>\n            <p className=\"text-xs text-muted-foreground\">\n              1 active, 1 specialized\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"analyzer\">Content Analyzer</TabsTrigger>\n          <TabsTrigger value=\"profiles\">Voice Profiles</TabsTrigger>\n          <TabsTrigger value=\"guidelines\">Guidelines</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Consistency by Content Type */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Voice Consistency by Content Type</CardTitle>\n              <CardDescription>\n                Track how consistent your brand voice is across different content channels\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {consistencyData.map((item) => (\n                  <div key={item.contentType} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"font-medium\">{item.contentType}</div>\n                      <Badge variant=\"outline\">{item.count} items</Badge>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`text-lg font-semibold ${getScoreColor(item.score)}`}>\n                        {item.score}%\n                      </div>\n                      {getTrendIcon(item.trend)}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Recent Analyses */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Voice Analyses</CardTitle>\n              <CardDescription>\n                Latest content analyzed for brand voice consistency\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {recentAnalyses.map((analysis) => (\n                  <div key={analysis.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Badge variant=\"outline\" className=\"capitalize\">\n                        {analysis.contentType}\n                      </Badge>\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-sm font-medium text-gray-800\">\n                          {analysis.content}\n                        </span>\n                        <span className=\"text-xs text-gray-600\">\n                          {analysis.analyzedAt.toLocaleDateString()} at {analysis.analyzedAt.toLocaleTimeString()}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <Badge variant={getScoreBadgeVariant(analysis.voiceScore)}>\n                        {analysis.voiceScore}% match\n                      </Badge>\n                      {analysis.suggestions > 0 && (\n                        <div className=\"flex items-center text-sm text-amber-600\">\n                          <Lightbulb className=\"h-4 w-4 mr-1\" />\n                          {analysis.suggestions} suggestion{analysis.suggestions !== 1 ? 's' : ''}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analyzer\">\n          <ContentVoiceAnalyzer profiles={brandProfiles} />\n        </TabsContent>\n\n        <TabsContent value=\"profiles\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-lg font-semibold\">Voice Profiles</h3>\n              <p className=\"text-sm text-gray-600\">Manage your brand voice profiles and configurations</p>\n            </div>\n            <Button onClick={() => setProfileModalOpen(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Profile\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {brandProfiles.map((profile) => (\n              <Card key={profile.id} className={`cursor-pointer transition-all hover:shadow-md ${profile.isActive ? 'ring-2 ring-blue-500' : ''}`}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">{profile.name}</CardTitle>\n                    <div className=\"flex items-center space-x-2\">\n                      {profile.isActive ? (\n                        <Badge variant=\"default\">\n                          <CheckCircle className=\"h-3 w-3 mr-1\" />\n                          Active\n                        </Badge>\n                      ) : (\n                        <Badge variant=\"secondary\">Inactive</Badge>\n                      )}\n                    </div>\n                  </div>\n                  <CardDescription>{profile.description}</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Average Score</span>\n                      <span className={`font-semibold ${getScoreColor(profile.averageScore)}`}>\n                        {profile.averageScore}%\n                      </span>\n                    </div>\n                    <Progress value={profile.averageScore} />\n                    \n                    <div className=\"flex justify-between text-sm text-gray-600\">\n                      <span>{profile.analysisCount} analyses</span>\n                      <span>{profile.consistency}% consistent</span>\n                    </div>\n                    \n                    <div className=\"text-xs text-gray-500\">\n                      Last used: {profile.lastUsed.toLocaleDateString()}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"guidelines\">\n          <VoiceGuidelinesPanel profileId={selectedProfile?.id} />\n        </TabsContent>\n      </Tabs>\n\n      {/* Modals */}\n      <BrandVoiceProfileModal\n        open={profileModalOpen}\n        onOpenChange={setProfileModalOpen}\n        onSuccess={() => {\n          setProfileModalOpen(false);\n          // Refresh profiles list\n        }}\n      />\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/campaigns/page.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":86,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":86,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3556,3607],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":164,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":164,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5844,5902],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { trpc } from '../../lib/trpc';\nimport { brand } from '@/lib/brand';\nimport {\n  PlayIcon,\n  PauseIcon,\n  PencilIcon,\n  TrashIcon,\n} from '@heroicons/react/24/outline';\n\ninterface Campaign {\n  id: string;\n  name: string;\n  type: 'social_media' | 'email' | 'display' | 'search' | 'video';\n  status: 'active' | 'paused' | 'completed' | 'draft';\n  budget: number;\n  spent: number;\n  roi: number;\n  impressions: number;\n  clicks: number;\n  conversions: number;\n  startDate: string;\n  endDate: string;\n  targetAudience: string;\n  agentsAssigned: string[];\n  createdAt: string;\n  lastModified: string;\n}\n\nexport default function CampaignsPage(): JSX.Element {\n  const { data: campaigns, isLoading } = trpc.campaign.getAll.useQuery({ limit: 20 });\n  const [filteredCampaigns, setFilteredCampaigns] = useState<Campaign[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState<'all' | Campaign['status']>('all');\n  const [typeFilter, setTypeFilter] = useState<'all' | Campaign['type']>('all');\n  const [sortBy, setSortBy] = useState<'name' | 'roi' | 'budget' | 'created'>('created');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n  const [showNewCampaignModal, setShowNewCampaignModal] = useState(false);\n\n  useEffect(() => {\n    const fetchCampaigns = async (): Promise<void> => {\n      try {\n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        // Import real campaign data from metrics\n        const { metrics } = await import('@/lib/metrics');\n        \n                 const realCampaigns: Campaign[] = metrics.campaignMetrics.active.map(campaign => ({\n           id: campaign.id,\n           name: campaign.name,\n           type: 'social_media' as Campaign['type'], // Default type since our metrics don't have this exact mapping\n           status: 'active' as Campaign['status'],\n          budget: campaign.budget,\n          spent: campaign.spent,\n          roi: campaign.roi,\n          impressions: campaign.leads * 100, // Approximate impressions from leads\n          clicks: campaign.leads * 10, // Approximate clicks\n          conversions: campaign.conversions,\n          startDate: new Date().toISOString().split('T')[0], // Current date as start\n          endDate: new Date(Date.now() + campaign.daysRemaining * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n          targetAudience: campaign.channels.includes('linkedin') ? 'Business Professionals' : \n                          campaign.channels.includes('social') ? 'Social Media Users' :\n                          'General Audience',\n          agentsAssigned: campaign.channels.map(channel => {\n            switch(channel) {\n              case 'email': return 'EmailAgent';\n              case 'social': return 'SocialAgent';\n              case 'ads': return 'AdAgent';\n              case 'content': return 'ContentAgent';\n              case 'linkedin': return 'LinkedInAgent';\n              case 'blog': return 'ContentAgent';\n              case 'youtube': return 'VideoAgent';\n              default: return 'GeneralAgent';\n            }\n          }),\n          createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n          lastModified: new Date().toISOString().split('T')[0],\n        }));\n\n        setFilteredCampaigns(realCampaigns);\n      } catch (error) {\n        // Error handling - could be logged to external service or shown to user\n        console.error('Failed to fetch campaigns:', error);\n        setFilteredCampaigns([]);\n      }\n    };\n\n    fetchCampaigns();\n  }, []);\n\n  useEffect(() => {\n    const filtered =\n      campaigns?.filter(campaign => {\n        const matchesSearch =\n          campaign.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          campaign.targetAudience.toLowerCase().includes(searchTerm.toLowerCase());\n        const matchesStatus = statusFilter === 'all' || campaign.status === statusFilter;\n        const matchesType = typeFilter === 'all' || campaign.type === typeFilter;\n\n        return matchesSearch && matchesStatus && matchesType;\n      }) || [];\n\n    // Sort campaigns\n    filtered.sort((a, b) => {\n      let valueA: string | number;\n      let valueB: string | number;\n\n      switch (sortBy) {\n        case 'name':\n          valueA = a.name.toLowerCase();\n          valueB = b.name.toLowerCase();\n          break;\n        case 'roi':\n          valueA = a.roi;\n          valueB = b.roi;\n          break;\n        case 'budget':\n          valueA = a.budget;\n          valueB = b.budget;\n          break;\n        case 'created':\n          valueA = new Date(a.createdAt).getTime();\n          valueB = new Date(b.createdAt).getTime();\n          break;\n        default:\n          valueA = a.name.toLowerCase();\n          valueB = b.name.toLowerCase();\n      }\n\n      if (sortOrder === 'asc') {\n        return valueA < valueB ? -1 : valueA > valueB ? 1 : 0;\n      } else {\n        return valueA > valueB ? -1 : valueA < valueB ? 1 : 0;\n      }\n    });\n\n    setFilteredCampaigns(filtered);\n  }, [campaigns, searchTerm, statusFilter, typeFilter, sortBy, sortOrder]);\n\n  const handleStatusChange = async (\n    campaignId: string,\n    newStatus: Campaign['status']\n  ): Promise<void> => {\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      setFilteredCampaigns(prev =>\n        prev.map(campaign =>\n          campaign.id === campaignId\n            ? {\n                ...campaign,\n                status: newStatus,\n                lastModified: new Date().toISOString().split('T')[0],\n              }\n            : campaign\n        )\n      );\n    } catch (error) {\n      // Error handling - could show error toast or notification\n      console.error('Failed to update campaign status:', error);\n      // For now, silently fail and keep existing state\n    }\n  };\n\n  const getStatusColor = (status: Campaign['status']): string => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-500/20 text-green-400 border-green-500/30';\n      case 'paused':\n        return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';\n      case 'completed':\n        return 'bg-blue-500/20 text-blue-400 border-blue-500/30';\n      case 'draft':\n        return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n      default:\n        return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n    }\n  };\n\n  const getTypeIcon = (type: Campaign['type']): string => {\n    switch (type) {\n      case 'social_media':\n        return '📱';\n      case 'email':\n        return '📧';\n      case 'display':\n        return '🖼️';\n      case 'search':\n        return '🔍';\n      case 'video':\n        return '🎥';\n      default:\n        return '��';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex items-center justify-center h-96\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-purple-400\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-4xl font-bold text-white mb-2\">Campaign Management</h1>\n            <p className=\"text-purple-200\">\n              {brand.messaging.keyMessages[0]}\n            </p>\n          </div>\n          <button\n            onClick={() => setShowNewCampaignModal(true)}\n            className=\"bg-gradient-to-r from-purple-600 to-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:from-purple-700 hover:to-blue-700 transition-all shadow-lg\"\n          >\n            + New Campaign\n          </button>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <SummaryCard\n            title=\"Total Campaigns\"\n            value={campaigns?.length.toString() || ''}\n            subtext={`${campaigns?.filter(c => c.status === 'active').length} active`}\n            icon=\"🚀\"\n          />\n          <SummaryCard\n            title=\"Total Budget\"\n            value={`$${campaigns?.reduce((sum, c) => sum + c.budget, 0).toLocaleString()}`}\n            subtext={`$${campaigns?.reduce((sum, c) => sum + c.spent, 0).toLocaleString()} spent`}\n            icon=\"💰\"\n          />\n          <SummaryCard\n            title=\"Average ROI\"\n            value={`${(campaigns?.reduce((sum, c) => sum + c.roi, 0) / campaigns?.length).toFixed(1)}x`}\n            subtext=\"Across all campaigns\"\n            icon=\"📈\"\n          />\n          <SummaryCard\n            title=\"Total Conversions\"\n            value={campaigns?.reduce((sum, c) => sum + c.conversions, 0).toLocaleString() || ''}\n            subtext=\"This month\"\n            icon=\"🎯\"\n          />\n        </div>\n\n        {/* Filters and Search */}\n        <div className=\"bg-white/10 backdrop-blur-md rounded-xl p-6 border border-white/20\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n            <div>\n              <input\n                type=\"text\"\n                placeholder=\"Search campaigns...\"\n                value={searchTerm}\n                onChange={e => setSearchTerm(e.target.value)}\n                className=\"w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-purple-200 focus:outline-none focus:ring-2 focus:ring-purple-500\"\n              />\n            </div>\n            <div>\n              <select\n                value={statusFilter}\n                onChange={e => setStatusFilter(e.target.value as typeof statusFilter)}\n                className=\"w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-purple-500\"\n              >\n                <option value=\"all\">All Status</option>\n                <option value=\"active\">Active</option>\n                <option value=\"paused\">Paused</option>\n                <option value=\"completed\">Completed</option>\n                <option value=\"draft\">Draft</option>\n              </select>\n            </div>\n            <div>\n              <select\n                value={typeFilter}\n                onChange={e => setTypeFilter(e.target.value as typeof typeFilter)}\n                className=\"w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-purple-500\"\n              >\n                <option value=\"all\">All Types</option>\n                <option value=\"social_media\">Social Media</option>\n                <option value=\"email\">Email</option>\n                <option value=\"display\">Display</option>\n                <option value=\"search\">Search</option>\n                <option value=\"video\">Video</option>\n              </select>\n            </div>\n            <div>\n              <select\n                value={sortBy}\n                onChange={e => setSortBy(e.target.value as typeof sortBy)}\n                className=\"w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-purple-500\"\n              >\n                <option value=\"created\">Sort by Created</option>\n                <option value=\"name\">Sort by Name</option>\n                <option value=\"roi\">Sort by ROI</option>\n                <option value=\"budget\">Sort by Budget</option>\n              </select>\n            </div>\n            <div>\n              <button\n                onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}\n                className=\"w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white hover:bg-white/20 transition-all\"\n              >\n                {sortOrder === 'asc' ? '↑ Ascending' : '↓ Descending'}\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Campaigns Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {filteredCampaigns.map(campaign => (\n            <CampaignCard\n              key={campaign.id}\n              campaign={campaign}\n              onStatusChange={handleStatusChange}\n              getStatusColor={getStatusColor}\n              getTypeIcon={getTypeIcon}\n            />\n          ))}\n        </div>\n\n        {filteredCampaigns.length === 0 && (\n          <div className=\"text-center py-12\">\n            <div className=\"text-6xl mb-4\">🔍</div>\n            <h3 className=\"text-xl font-semibold text-white mb-2\">No campaigns found</h3>\n            <p className=\"text-purple-200\">Try adjusting your search or filters</p>\n          </div>\n        )}\n      </div>\n\n      {/* New Campaign Modal (placeholder) */}\n      {showNewCampaignModal && (\n        <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-8\">\n          <div className=\"bg-white/10 backdrop-blur-md rounded-xl p-6 border border-white/20 max-w-md w-full\">\n            <h3 className=\"text-xl font-semibold text-white mb-4\">New Campaign</h3>\n            <p className=\"text-purple-200 mb-6\">Campaign creation wizard coming soon!</p>\n            <button\n              onClick={() => setShowNewCampaignModal(false)}\n              className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white px-4 py-2 rounded-lg font-medium hover:from-purple-700 hover:to-blue-700 transition-all\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\ninterface SummaryCardProps {\n  title: string;\n  value: string;\n  subtext: string;\n  icon: string;\n}\n\nfunction SummaryCard({ title, value, subtext, icon }: SummaryCardProps): JSX.Element {\n  return (\n    <div className=\"bg-white/10 backdrop-blur-md rounded-xl p-6 border border-white/20 hover:bg-white/15 transition-all\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <span className=\"text-2xl\">{icon}</span>\n      </div>\n      <h3 className=\"text-purple-200 text-sm font-medium\">{title}</h3>\n      <p className=\"text-2xl font-bold text-white mt-1\">{value}</p>\n      <p className=\"text-purple-300 text-xs mt-1\">{subtext}</p>\n    </div>\n  );\n}\n\ninterface CampaignCardProps {\n  campaign: Campaign;\n  onStatusChange: (id: string, status: Campaign['status']) => Promise<void>;\n  getStatusColor: (status: Campaign['status']) => string;\n  getTypeIcon: (type: Campaign['type']) => string;\n}\n\nfunction CampaignCard({\n  campaign,\n  onStatusChange,\n  getStatusColor,\n  getTypeIcon,\n}: CampaignCardProps): JSX.Element {\n  const budgetUsed = (campaign.spent / campaign.budget) * 100;\n\n  return (\n    <div className=\"bg-white/10 backdrop-blur-md rounded-xl p-6 border border-white/20 hover:bg-white/15 transition-all\">\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex items-center space-x-3\">\n          <span className=\"text-2xl\">{getTypeIcon(campaign.type)}</span>\n          <div>\n            <h3 className=\"text-lg font-semibold text-white\">{campaign.name}</h3>\n            <p className=\"text-purple-200 text-sm\">{campaign.targetAudience}</p>\n          </div>\n        </div>\n        <div\n          className={`px-2 py-1 rounded-full text-xs font-medium border ${getStatusColor(campaign.status)}`}\n        >\n          {campaign.status}\n        </div>\n      </div>\n\n      <div className=\"space-y-3 mb-4\">\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-purple-200\">Budget Progress</span>\n          <span className=\"text-white\">\n            ${campaign.spent.toLocaleString()} / ${campaign.budget.toLocaleString()}\n          </span>\n        </div>\n        <div className=\"w-full bg-white/20 rounded-full h-2\">\n          <div\n            className=\"bg-gradient-to-r from-purple-500 to-blue-500 h-2 rounded-full\"\n            style={{ width: `${Math.min(budgetUsed, 100)}%` }}\n          />\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-3 gap-3 mb-4 text-center\">\n        <div>\n          <p className=\"text-white font-semibold\">{campaign.roi}x</p>\n          <p className=\"text-purple-200 text-xs\">ROI</p>\n        </div>\n        <div>\n          <p className=\"text-white font-semibold\">{(campaign.impressions / 1000).toFixed(0)}K</p>\n          <p className=\"text-purple-200 text-xs\">Impressions</p>\n        </div>\n        <div>\n          <p className=\"text-white font-semibold\">{campaign.conversions.toLocaleString()}</p>\n          <p className=\"text-purple-200 text-xs\">Conversions</p>\n        </div>\n      </div>\n\n      <div className=\"mb-4\">\n        <p className=\"text-purple-200 text-xs mb-2\">Assigned Agents</p>\n        <div className=\"flex flex-wrap gap-1\">\n          {campaign.agentsAssigned.map((agent, index) => (\n            <span key={index} className=\"px-2 py-1 bg-white/20 rounded-full text-xs text-white\">\n              {agent}\n            </span>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"flex space-x-2\">\n        {campaign.status === 'active' && (\n          <button\n            onClick={() => onStatusChange(campaign.id, 'paused')}\n            className=\"flex-1 flex items-center justify-center space-x-1 bg-yellow-500/20 text-yellow-400 px-3 py-2 rounded-lg text-sm hover:bg-yellow-500/30 transition-all\"\n          >\n            <PauseIcon className=\"h-4 w-4\" />\n            <span>Pause</span>\n          </button>\n        )}\n        {campaign.status === 'paused' && (\n          <button\n            onClick={() => onStatusChange(campaign.id, 'active')}\n            className=\"flex-1 flex items-center justify-center space-x-1 bg-green-500/20 text-green-400 px-3 py-2 rounded-lg text-sm hover:bg-green-500/30 transition-all\"\n          >\n            <PlayIcon className=\"h-4 w-4\" />\n            <span>Resume</span>\n          </button>\n        )}\n        <button className=\"flex items-center justify-center bg-blue-500/20 text-blue-400 px-3 py-2 rounded-lg text-sm hover:bg-blue-500/30 transition-all\">\n          <PencilIcon className=\"h-4 w-4\" />\n        </button>\n        <button className=\"flex items-center justify-center bg-red-500/20 text-red-400 px-3 py-2 rounded-lg text-sm hover:bg-red-500/30 transition-all\">\n          <TrashIcon className=\"h-4 w-4\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/campaigns/strategy/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Pause' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Square' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used. Allowed unused vars must match /^_/u.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertTriangle' is defined but never used. Allowed unused vars must match /^_/u.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Upload' is defined but never used. Allowed unused vars must match /^_/u.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Trash2' is defined but never used. Allowed unused vars must match /^_/u.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1174,1177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1174,1177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":168,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5724,5727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5724,5727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":175,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5903,5906],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5903,5906],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":176,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5985,5988],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5985,5988],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":222,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":222,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7267,7320],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":248,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":248,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8029,8096],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":262,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":262,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8458,8528],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":265,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":265,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8565,8617],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":317,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":317,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11000,11003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11000,11003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":405,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":405,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15274,15277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15274,15277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport ReactFlow, {\n  Node,\n  Edge,\n  addEdge,\n  Connection,\n  useNodesState,\n  useEdgesState,\n  Controls,\n  Background,\n  MiniMap,\n  Panel,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { \n  Play, \n  Pause, \n  Square, \n  RefreshCw, \n  Settings, \n  BarChart3, \n  Calendar,\n  DollarSign,\n  Users,\n  Target,\n  Zap,\n  Clock,\n  TrendingUp,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Download,\n  Upload,\n  Copy,\n  Trash2\n} from 'lucide-react';\nimport { trpc } from '@/utils/trpc';\n\n// Custom node component for agents\nconst AgentNode = ({ data }: { data: any }) => {\n  const getAgentIcon = (agentType: string) => {\n    const icons: Record<string, React.ReactNode> = {\n      'trend-agent': <TrendingUp className=\"w-4 h-4\" />,\n      'content-agent': <Users className=\"w-4 h-4\" />,\n      'brand-voice-agent': <Target className=\"w-4 h-4\" />,\n      'social-agent': <Users className=\"w-4 h-4\" />,\n      'email-agent': <Users className=\"w-4 h-4\" />,\n      'ad-agent': <DollarSign className=\"w-4 h-4\" />,\n      'seo-agent': <TrendingUp className=\"w-4 h-4\" />,\n      'design-agent': <Settings className=\"w-4 h-4\" />,\n      'outreach-agent': <Users className=\"w-4 h-4\" />,\n      'insight-agent': <BarChart3 className=\"w-4 h-4\" />,\n    };\n    return icons[agentType] || <Zap className=\"w-4 h-4\" />;\n  };\n\n  const getStatusIcon = (status?: string) => {\n    switch (status) {\n      case 'completed': return <CheckCircle className=\"w-3 h-3 text-green-400\" />;\n      case 'running': return <RefreshCw className=\"w-3 h-3 text-blue-400 animate-spin\" />;\n      case 'failed': return <XCircle className=\"w-3 h-3 text-red-400\" />;\n      case 'pending': return <Clock className=\"w-3 h-3 text-yellow-400\" />;\n      default: return null;\n    }\n  };\n\n  return (\n    <div className=\"bg-slate-900/95 backdrop-blur-xl border border-blue-500/30 rounded-lg p-3 min-w-[200px] shadow-lg shadow-blue-500/10\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"p-1 bg-blue-500/20 rounded border border-blue-400/30\">\n            {getAgentIcon(data.agent)}\n          </div>\n          <span className=\"text-white font-medium text-sm\">{data.agent.replace('-', ' ').toUpperCase()}</span>\n        </div>\n        {getStatusIcon(data.status)}\n      </div>\n      \n      <div className=\"text-blue-100 text-xs mb-2 line-clamp-2\">\n        {data.action}\n      </div>\n      \n      <div className=\"flex flex-wrap gap-1 mb-2\">\n        <Badge variant=\"outline\" className=\"text-xs bg-purple-500/20 text-purple-300 border-purple-400/30\">\n          {data.stage}\n        </Badge>\n        <Badge variant=\"outline\" className=\"text-xs bg-green-500/20 text-green-300 border-green-400/30\">\n          {data.priority}\n        </Badge>\n      </div>\n      \n      <div className=\"flex justify-between text-xs text-slate-400\">\n        <span>{data.estimatedDuration}min</span>\n        {data.performanceScore && (\n          <span className=\"text-blue-300\">{data.performanceScore}%</span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst nodeTypes = {\n  agentNode: AgentNode,\n};\n\nexport default function CampaignStrategyPage() {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [selectedStrategy, setSelectedStrategy] = useState<string | null>(null);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [activeTab, setActiveTab] = useState('build');\n\n  // Strategy form state\n  const [strategyForm, setStrategyForm] = useState({\n    goal: {\n      type: 'product_launch' as const,\n      objective: '',\n      kpis: [{ metric: 'conversions' as const, target: 1000, timeframe: '30 days' }],\n      budget: { total: 10000, allocation: {} },\n    },\n    audience: {\n      segment: 'consumer' as const,\n      demographics: {\n        ageRange: '25-45',\n        interests: ['technology'],\n        painPoints: ['efficiency'],\n        channels: ['social', 'email'],\n      },\n      persona: {\n        name: 'Tech Professional',\n        description: 'Early adopter professional',\n        motivations: ['productivity'],\n        objections: ['cost'],\n      },\n    },\n    context: {\n      timeline: {\n        startDate: new Date().toISOString().split('T')[0],\n        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      },\n      channels: ['social', 'email', 'content'] as const,\n    },\n  });\n\n  // tRPC hooks\n  const { data: strategies, refetch: refetchStrategies } = trpc.strategy.getRecent.useQuery({ limit: 10 });\n  const { data: templates } = trpc.strategy.getTemplates.useQuery({});\n  const generateStrategyMutation = trpc.strategy.generateStrategy.useMutation();\n  const generateFromTemplateMutation = trpc.strategy.generateFromTemplate.useMutation();\n  const executeStrategyMutation = trpc.strategy.executeStrategy.useMutation();\n\n  const onConnect = useCallback(\n    (params: Connection) => setEdges((eds) => addEdge(params, eds)),\n    [setEdges]\n  );\n\n  // Convert strategy to ReactFlow nodes and edges\n  const visualizeStrategy = useCallback((strategy: any) => {\n    if (!strategy) return;\n\n    const newNodes: Node[] = [];\n    const newEdges: Edge[] = [];\n\n    // Create nodes for each action\n    strategy.actions.forEach((action: any, index: number) => {\n      const stageIndex = strategy.timeline.findIndex((t: any) => \n        t.actions.includes(action.id)\n      );\n      \n      const node: Node = {\n        id: action.id,\n        type: 'agentNode',\n        position: { \n          x: (index % 4) * 250 + 50, \n          y: Math.floor(index / 4) * 150 + stageIndex * 80 + 50 \n        },\n        data: {\n          ...action,\n          status: 'pending', // This would come from execution state\n        },\n      };\n      newNodes.push(node);\n\n      // Create edges based on dependencies\n      action.dependsOn.forEach((depId: string) => {\n        newEdges.push({\n          id: `${depId}-${action.id}`,\n          source: depId,\n          target: action.id,\n          type: 'smoothstep',\n          style: { stroke: '#3b82f6', strokeWidth: 2 },\n          markerEnd: { type: 'arrowclosed', color: '#3b82f6' },\n        });\n      });\n    });\n\n    setNodes(newNodes);\n    setEdges(newEdges);\n  }, [setNodes, setEdges]);\n\n  // Generate new strategy\n  const handleGenerateStrategy = async () => {\n    setIsGenerating(true);\n    try {\n      const result = await generateStrategyMutation.mutateAsync(strategyForm);\n      if (result.success) {\n        visualizeStrategy(result.strategy);\n        setSelectedStrategy(result.strategy.id);\n        await refetchStrategies();\n      }\n    } catch (error) {\n      console.error('Failed to generate strategy:', error);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  // Generate from template\n  const handleGenerateFromTemplate = async (templateId: string) => {\n    setIsGenerating(true);\n    try {\n      const result = await generateFromTemplateMutation.mutateAsync({\n        templateId,\n        customizations: {\n          name: `Campaign from ${templateId}`,\n          context: {\n            timeline: strategyForm.context.timeline,\n            channels: strategyForm.context.channels,\n          },\n        },\n      });\n      if (result.success) {\n        visualizeStrategy(result.strategy);\n        setSelectedStrategy(result.strategy.id);\n        await refetchStrategies();\n      }\n    } catch (error) {\n      console.error('Failed to generate strategy from template:', error);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  // Execute strategy\n  const handleExecuteStrategy = async () => {\n    if (!selectedStrategy) return;\n    \n    try {\n      const result = await executeStrategyMutation.mutateAsync({ id: selectedStrategy });\n      if (result.success) {\n        // Update node statuses or refresh execution state\n        console.log('Strategy execution initialized:', result.executionState);\n      }\n    } catch (error) {\n      console.error('Failed to execute strategy:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (strategies && strategies.length > 0 && !selectedStrategy) {\n      const latestStrategy = strategies[0];\n      setSelectedStrategy(latestStrategy.id);\n      visualizeStrategy(latestStrategy);\n    }\n  }, [strategies, selectedStrategy, visualizeStrategy]);\n\n  const currentStrategy = strategies?.find(s => s.id === selectedStrategy);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-950 via-blue-950 to-slate-900 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-white mb-2\">\n            Campaign Strategy Builder\n          </h1>\n          <p className=\"text-blue-200\">\n            Design autonomous marketing campaigns with AI agent collaboration\n          </p>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4 bg-slate-800/50 border border-blue-500/30\">\n            <TabsTrigger value=\"build\" className=\"data-[state=active]:bg-blue-600\">Build</TabsTrigger>\n            <TabsTrigger value=\"visualize\" className=\"data-[state=active]:bg-blue-600\">Visualize</TabsTrigger>\n            <TabsTrigger value=\"templates\" className=\"data-[state=active]:bg-blue-600\">Templates</TabsTrigger>\n            <TabsTrigger value=\"manage\" className=\"data-[state=active]:bg-blue-600\">Manage</TabsTrigger>\n          </TabsList>\n\n          {/* Build Tab */}\n          <TabsContent value=\"build\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* Strategy Form */}\n              <div className=\"lg:col-span-2 space-y-6\">\n                <Card className=\"bg-slate-900/50 border-blue-500/30 backdrop-blur-xl\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white flex items-center gap-2\">\n                      <Target className=\"w-5 h-5 text-blue-400\" />\n                      Campaign Goal\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <Label className=\"text-blue-200\">Campaign Type</Label>\n                      <Select \n                        value={strategyForm.goal.type} \n                        onValueChange={(value: any) => \n                          setStrategyForm(prev => ({ \n                            ...prev, \n                            goal: { ...prev.goal, type: value }\n                          }))\n                        }\n                      >\n                        <SelectTrigger className=\"bg-slate-800 border-blue-500/30 text-white\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-slate-800 border-blue-500/30\">\n                          <SelectItem value=\"product_launch\">Product Launch</SelectItem>\n                          <SelectItem value=\"seasonal_promo\">Seasonal Promotion</SelectItem>\n                          <SelectItem value=\"b2b_outreach\">B2B Outreach</SelectItem>\n                          <SelectItem value=\"retargeting\">Retargeting</SelectItem>\n                          <SelectItem value=\"brand_awareness\">Brand Awareness</SelectItem>\n                          <SelectItem value=\"lead_generation\">Lead Generation</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-blue-200\">Objective</Label>\n                      <Textarea\n                        value={strategyForm.goal.objective}\n                        onChange={(e) => \n                          setStrategyForm(prev => ({ \n                            ...prev, \n                            goal: { ...prev.goal, objective: e.target.value }\n                          }))\n                        }\n                        placeholder=\"Describe your campaign objective...\"\n                        className=\"bg-slate-800 border-blue-500/30 text-white\"\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label className=\"text-blue-200\">Target Conversions</Label>\n                        <Input\n                          type=\"number\"\n                          value={strategyForm.goal.kpis[0].target}\n                          onChange={(e) => \n                            setStrategyForm(prev => ({ \n                              ...prev, \n                              goal: { \n                                ...prev.goal, \n                                kpis: [{ ...prev.goal.kpis[0], target: parseInt(e.target.value) }]\n                              }\n                            }))\n                          }\n                          className=\"bg-slate-800 border-blue-500/30 text-white\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-blue-200\">Budget</Label>\n                        <Input\n                          type=\"number\"\n                          value={strategyForm.goal.budget.total}\n                          onChange={(e) => \n                            setStrategyForm(prev => ({ \n                              ...prev, \n                              goal: { \n                                ...prev.goal, \n                                budget: { ...prev.goal.budget, total: parseInt(e.target.value) }\n                              }\n                            }))\n                          }\n                          className=\"bg-slate-800 border-blue-500/30 text-white\"\n                        />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"bg-slate-900/50 border-blue-500/30 backdrop-blur-xl\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white flex items-center gap-2\">\n                      <Users className=\"w-5 h-5 text-purple-400\" />\n                      Target Audience\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label className=\"text-blue-200\">Segment</Label>\n                        <Select \n                          value={strategyForm.audience.segment} \n                          onValueChange={(value: any) => \n                            setStrategyForm(prev => ({ \n                              ...prev, \n                              audience: { ...prev.audience, segment: value }\n                            }))\n                          }\n                        >\n                          <SelectTrigger className=\"bg-slate-800 border-blue-500/30 text-white\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-slate-800 border-blue-500/30\">\n                            <SelectItem value=\"enterprise\">Enterprise</SelectItem>\n                            <SelectItem value=\"smb\">Small/Medium Business</SelectItem>\n                            <SelectItem value=\"agencies\">Agencies</SelectItem>\n                            <SelectItem value=\"ecommerce\">E-commerce</SelectItem>\n                            <SelectItem value=\"saas\">SaaS</SelectItem>\n                            <SelectItem value=\"consumer\">Consumer</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label className=\"text-blue-200\">Age Range</Label>\n                        <Input\n                          value={strategyForm.audience.demographics.ageRange}\n                          onChange={(e) => \n                            setStrategyForm(prev => ({ \n                              ...prev, \n                              audience: { \n                                ...prev.audience,\n                                demographics: { ...prev.audience.demographics, ageRange: e.target.value }\n                              }\n                            }))\n                          }\n                          className=\"bg-slate-800 border-blue-500/30 text-white\"\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-blue-200\">Persona Name</Label>\n                      <Input\n                        value={strategyForm.audience.persona.name}\n                        onChange={(e) => \n                          setStrategyForm(prev => ({ \n                            ...prev, \n                            audience: { \n                              ...prev.audience,\n                              persona: { ...prev.audience.persona, name: e.target.value }\n                            }\n                          }))\n                        }\n                        className=\"bg-slate-800 border-blue-500/30 text-white\"\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Quick Actions */}\n              <div className=\"space-y-6\">\n                <Card className=\"bg-slate-900/50 border-green-500/30 backdrop-blur-xl\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white flex items-center gap-2\">\n                      <Zap className=\"w-5 h-5 text-green-400\" />\n                      Generate Strategy\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <Button \n                      onClick={handleGenerateStrategy}\n                      disabled={isGenerating}\n                      className=\"w-full bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700\"\n                    >\n                      {isGenerating ? (\n                        <>\n                          <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                          Generating...\n                        </>\n                      ) : (\n                        <>\n                          <Play className=\"w-4 h-4 mr-2\" />\n                          Generate Campaign\n                        </>\n                      )}\n                    </Button>\n\n                    {currentStrategy && (\n                      <Button \n                        onClick={handleExecuteStrategy}\n                        variant=\"outline\"\n                        className=\"w-full border-blue-500/30 text-blue-300 hover:bg-blue-600/20\"\n                      >\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        Execute Strategy\n                      </Button>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {currentStrategy && (\n                  <Card className=\"bg-slate-900/50 border-blue-500/30 backdrop-blur-xl\">\n                    <CardHeader>\n                      <CardTitle className=\"text-white text-sm\">Current Strategy</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div className=\"text-blue-100 font-medium\">\n                        {currentStrategy.name}\n                      </div>\n                      <div className=\"flex flex-wrap gap-2\">\n                        <Badge className=\"bg-blue-500/20 text-blue-300\">\n                          {currentStrategy.actions.length} Actions\n                        </Badge>\n                        <Badge className=\"bg-green-500/20 text-green-300\">\n                          ${currentStrategy.estimatedCost.toLocaleString()}\n                        </Badge>\n                        <Badge className=\"bg-purple-500/20 text-purple-300\">\n                          {currentStrategy.estimatedDuration} days\n                        </Badge>\n                      </div>\n                      <div className=\"text-sm text-slate-400\">\n                        Success Probability: {currentStrategy.successProbability.toFixed(1)}%\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Visualize Tab */}\n          <TabsContent value=\"visualize\" className=\"space-y-6\">\n            <div className=\"h-[800px] bg-slate-900/50 backdrop-blur-xl rounded-lg border border-blue-500/30 overflow-hidden\">\n              <ReactFlow\n                nodes={nodes}\n                edges={edges}\n                onNodesChange={onNodesChange}\n                onEdgesChange={onEdgesChange}\n                onConnect={onConnect}\n                nodeTypes={nodeTypes}\n                fitView\n                className=\"reactflow-dark\"\n              >\n                <Background color=\"#1e40af\" gap={20} />\n                <Controls className=\"bg-slate-800 border-blue-500/30\" />\n                <MiniMap \n                  className=\"bg-slate-800 border-blue-500/30\" \n                  nodeColor=\"#3b82f6\"\n                  maskColor=\"rgba(0, 0, 0, 0.8)\"\n                />\n                <Panel position=\"top-right\" className=\"space-y-2\">\n                  <div className=\"bg-slate-900/90 backdrop-blur-xl border border-blue-500/30 rounded-lg p-3\">\n                    <div className=\"text-white text-sm font-medium mb-2\">Legend</div>\n                    <div className=\"space-y-1 text-xs\">\n                      <div className=\"flex items-center gap-2\">\n                        <CheckCircle className=\"w-3 h-3 text-green-400\" />\n                        <span className=\"text-slate-300\">Completed</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <RefreshCw className=\"w-3 h-3 text-blue-400\" />\n                        <span className=\"text-slate-300\">Running</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"w-3 h-3 text-yellow-400\" />\n                        <span className=\"text-slate-300\">Pending</span>\n                      </div>\n                    </div>\n                  </div>\n                </Panel>\n              </ReactFlow>\n            </div>\n          </TabsContent>\n\n          {/* Templates Tab */}\n          <TabsContent value=\"templates\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {templates?.map((template) => (\n                <Card key={template.id} className=\"bg-slate-900/50 border-blue-500/30 backdrop-blur-xl\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white text-lg\">{template.name}</CardTitle>\n                    <CardDescription className=\"text-blue-200\">\n                      {template.description}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex flex-wrap gap-2\">\n                      <Badge className=\"bg-purple-500/20 text-purple-300\">\n                        {template.category}\n                      </Badge>\n                      <Badge className=\"bg-blue-500/20 text-blue-300\">\n                        {template.complexity}\n                      </Badge>\n                      <Badge className=\"bg-green-500/20 text-green-300\">\n                        {template.estimatedDuration} days\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"text-sm text-slate-400\">\n                      <div>Stages: {template.stages.length}</div>\n                      <div>Channels: {template.recommendedChannels.join(', ')}</div>\n                    </div>\n\n                    <Button \n                      onClick={() => handleGenerateFromTemplate(template.id)}\n                      disabled={isGenerating}\n                      className=\"w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\n                    >\n                      Use Template\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* Manage Tab */}\n          <TabsContent value=\"manage\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 gap-6\">\n              {strategies?.map((strategy) => (\n                <Card key={strategy.id} className=\"bg-slate-900/50 border-blue-500/30 backdrop-blur-xl\">\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <CardTitle className=\"text-white\">{strategy.name}</CardTitle>\n                        <CardDescription className=\"text-blue-200\">\n                          Created {new Date(strategy.createdAt).toLocaleDateString()}\n                        </CardDescription>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge \n                          className={`${\n                            strategy.status === 'completed' ? 'bg-green-500/20 text-green-300' :\n                            strategy.status === 'executing' ? 'bg-blue-500/20 text-blue-300' :\n                            strategy.status === 'failed' ? 'bg-red-500/20 text-red-300' :\n                            'bg-yellow-500/20 text-yellow-300'\n                          }`}\n                        >\n                          {strategy.status}\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-blue-300\">{strategy.actions.length}</div>\n                        <div className=\"text-sm text-slate-400\">Actions</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-green-300\">${strategy.estimatedCost.toLocaleString()}</div>\n                        <div className=\"text-sm text-slate-400\">Budget</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-purple-300\">{strategy.estimatedDuration}</div>\n                        <div className=\"text-sm text-slate-400\">Days</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-orange-300\">{strategy.successProbability.toFixed(0)}%</div>\n                        <div className=\"text-sm text-slate-400\">Success Rate</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <Button \n                        size=\"sm\" \n                        onClick={() => {\n                          setSelectedStrategy(strategy.id);\n                          visualizeStrategy(strategy);\n                          setActiveTab('visualize');\n                        }}\n                        className=\"bg-blue-600 hover:bg-blue-700\"\n                      >\n                        <BarChart3 className=\"w-4 h-4 mr-1\" />\n                        View\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\" className=\"border-blue-500/30 text-blue-300\">\n                        <Copy className=\"w-4 h-4 mr-1\" />\n                        Clone\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\" className=\"border-blue-500/30 text-blue-300\">\n                        <Download className=\"w-4 h-4 mr-1\" />\n                        Export\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/coordination/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'trpc' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1393,1396],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1393,1396],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'engineStateQuery' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":62,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'executionMonitorsQuery' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":68,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'meshActivityQuery' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":73,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":197,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":197,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6486,6528],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":202,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":202,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6646,6699],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":207,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":207,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6795,6849],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport React, { useState, useEffect } from 'react'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { PlanViewerPanel } from '@/components/PlanViewerPanel'\nimport { MeshActivityLog } from '@/components/MeshActivityLog'\nimport { AgentIntentionsGrid } from '@/components/AgentIntentionsGrid'\nimport { ExecutionProgressMonitor } from '@/components/ExecutionProgressMonitor'\nimport { SystemMetrics } from '@/components/SystemMetrics'\nimport { trpc } from '@/utils/trpc'\n\ninterface CoordinationState {\n  activePlans: number\n  queuedRequests: number\n  agentsInUse: Array<{ agentType: string; goalPlanId: string }>\n  systemLoad: number\n  averageConsensusTime: number\n  successRate: number\n}\n\ninterface ExecutionMonitor {\n  goalPlanId: string\n  currentPhase: number\n  executingAgent: string\n  status: string\n  progress: number\n  startedAt: string\n  expectedCompletion: string\n  blockers: string[]\n  fallbacksAvailable: string[]\n}\n\ninterface MeshActivity {\n  id: string\n  timestamp: string\n  type: 'GOAL_SUBMITTED' | 'PLAN_PROPOSED' | 'CONSENSUS_REACHED' | 'EXECUTION_STARTED' | 'REPLANNING_TRIGGERED'\n  agentType?: string\n  goalPlanId?: string\n  message: string\n  metadata?: any\n}\n\nexport default function CoordinationDashboard() {\n  const [coordinationState, setCoordinationState] = useState<CoordinationState>({\n    activePlans: 0,\n    queuedRequests: 0,\n    agentsInUse: [],\n    systemLoad: 0,\n    averageConsensusTime: 0,\n    successRate: 0,\n  })\n\n  const [executionMonitors, setExecutionMonitors] = useState<ExecutionMonitor[]>([])\n  const [meshActivities, setMeshActivities] = useState<MeshActivity[]>([])\n  const [selectedGoalPlan, setSelectedGoalPlan] = useState<string | null>(null)\n  const [isRealTimeMode, setIsRealTimeMode] = useState(true)\n\n  // Mock tRPC hooks (in production, these would be real API calls)\n  const engineStateQuery = {\n    data: coordinationState,\n    isLoading: false,\n    refetch: () => Promise.resolve(),\n  }\n\n  const executionMonitorsQuery = {\n    data: executionMonitors,\n    isLoading: false,\n  }\n\n  const meshActivityQuery = {\n    data: meshActivities,\n    isLoading: false,\n  }\n\n  // Real-time updates simulation\n  useEffect(() => {\n    if (!isRealTimeMode) return\n\n    const interval = setInterval(() => {\n      // Simulate real-time state updates\n      setCoordinationState(prev => ({\n        ...prev,\n        activePlans: Math.max(0, prev.activePlans + (Math.random() > 0.7 ? 1 : -1)),\n        queuedRequests: Math.max(0, prev.queuedRequests + (Math.random() > 0.8 ? 1 : 0)),\n        systemLoad: Math.max(0, Math.min(1, prev.systemLoad + (Math.random() - 0.5) * 0.1)),\n        successRate: Math.max(0, Math.min(1, prev.successRate + (Math.random() - 0.5) * 0.05)),\n      }))\n\n      // Simulate new mesh activities\n      if (Math.random() > 0.6) {\n        const activities: MeshActivity['type'][] = [\n          'GOAL_SUBMITTED', 'PLAN_PROPOSED', 'CONSENSUS_REACHED', \n          'EXECUTION_STARTED', 'REPLANNING_TRIGGERED'\n        ]\n        const agentTypes = ['CONTENT', 'SEO', 'BRAND_VOICE', 'TREND', 'AD']\n        \n        const newActivity: MeshActivity = {\n          id: `activity_${Date.now()}`,\n          timestamp: new Date().toISOString(),\n          type: activities[Math.floor(Math.random() * activities.length)],\n          agentType: agentTypes[Math.floor(Math.random() * agentTypes.length)],\n          goalPlanId: `goal_${Math.floor(Math.random() * 100)}`,\n          message: generateActivityMessage(activities[Math.floor(Math.random() * activities.length)]),\n        }\n\n        setMeshActivities(prev => [newActivity, ...prev.slice(0, 19)]) // Keep last 20\n      }\n    }, 3000)\n\n    return () => clearInterval(interval)\n  }, [isRealTimeMode])\n\n  // Initialize with mock data\n  useEffect(() => {\n    setCoordinationState({\n      activePlans: 7,\n      queuedRequests: 3,\n      agentsInUse: [\n        { agentType: 'CONTENT', goalPlanId: 'goal_001' },\n        { agentType: 'SEO', goalPlanId: 'goal_002' },\n        { agentType: 'BRAND_VOICE', goalPlanId: 'goal_003' },\n      ],\n      systemLoad: 0.65,\n      averageConsensusTime: 12500,\n      successRate: 0.847,\n    })\n\n    setExecutionMonitors([\n      {\n        goalPlanId: 'goal_001',\n        currentPhase: 2,\n        executingAgent: 'content-agent-001',\n        status: 'RUNNING',\n        progress: 0.68,\n        startedAt: new Date(Date.now() - 45 * 60 * 1000).toISOString(),\n        expectedCompletion: new Date(Date.now() + 25 * 60 * 1000).toISOString(),\n        blockers: [],\n        fallbacksAvailable: ['design-agent-001', 'content-agent-002'],\n      },\n      {\n        goalPlanId: 'goal_002',\n        currentPhase: 1,\n        executingAgent: 'seo-agent-001',\n        status: 'RUNNING',\n        progress: 0.34,\n        startedAt: new Date(Date.now() - 20 * 60 * 1000).toISOString(),\n        expectedCompletion: new Date(Date.now() + 40 * 60 * 1000).toISOString(),\n        blockers: ['API_RATE_LIMIT'],\n        fallbacksAvailable: ['seo-agent-002'],\n      },\n    ])\n\n    setMeshActivities([\n      {\n        id: 'activity_001',\n        timestamp: new Date(Date.now() - 2 * 60 * 1000).toISOString(),\n        type: 'CONSENSUS_REACHED',\n        agentType: 'GOAL_PLANNER',\n        goalPlanId: 'goal_001',\n        message: 'Plan accepted by consensus with quorum 8/9 agents (score: 0.89)',\n      },\n      {\n        id: 'activity_002',\n        timestamp: new Date(Date.now() - 5 * 60 * 1000).toISOString(),\n        type: 'PLAN_PROPOSED',\n        agentType: 'CONTENT',\n        goalPlanId: 'goal_003',\n        message: \"Agent 'ContentAgent' proposed plan with 92% brand alignment\",\n      },\n      {\n        id: 'activity_003',\n        timestamp: new Date(Date.now() - 8 * 60 * 1000).toISOString(),\n        type: 'EXECUTION_STARTED',\n        agentType: 'SEO',\n        goalPlanId: 'goal_002',\n        message: 'Phase 1 execution started: Market Research & Competitive Analysis',\n      },\n    ])\n  }, [])\n\n  const getSystemStatusColor = (load: number) => {\n    if (load < 0.5) return 'text-green-400'\n    if (load < 0.8) return 'text-yellow-400'\n    return 'text-red-400'\n  }\n\n  const getSystemStatusText = (load: number) => {\n    if (load < 0.5) return 'OPTIMAL'\n    if (load < 0.8) return 'MODERATE'\n    return 'HIGH LOAD'\n  }\n\n  const handleEmergencyStop = () => {\n    console.log('🛑 Emergency stop triggered')\n    // In production, would call emergency stop API\n  }\n\n  const handleTriggerReplan = (goalPlanId: string) => {\n    console.log(`🔄 Triggering replan for ${goalPlanId}`)\n    // In production, would call replan API\n  }\n\n  const handleNewGoalSubmission = () => {\n    console.log('➕ New goal submission dialog would open')\n    // In production, would open goal submission modal\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white p-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-400 via-purple-400 to-blue-400 bg-clip-text text-transparent\">\n              Multi-Agent Coordination Console\n            </h1>\n            <p className=\"text-slate-400 mt-2\">Real-time orchestration of the NeonHub reasoning mesh</p>\n          </div>\n          \n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant={isRealTimeMode ? \"default\" : \"outline\"}\n              onClick={() => setIsRealTimeMode(!isRealTimeMode)}\n              className=\"bg-blue-600 hover:bg-blue-700 text-white border-blue-500\"\n            >\n              {isRealTimeMode ? \"🟢 Live\" : \"⏸️ Paused\"}\n            </Button>\n            \n            <Button\n              onClick={handleNewGoalSubmission}\n              className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-medium px-6\"\n            >\n              ➕ Submit New Goal\n            </Button>\n            \n            <Button\n              variant=\"destructive\"\n              onClick={handleEmergencyStop}\n              className=\"bg-red-600 hover:bg-red-700 text-white\"\n            >\n              🛑 Emergency Stop\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* System Status Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <Card className=\"bg-slate-800/50 border-slate-700 backdrop-blur-sm\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-slate-400\">System Status</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-between\">\n              <div className={`text-2xl font-bold ${getSystemStatusColor(coordinationState.systemLoad)}`}>\n                {getSystemStatusText(coordinationState.systemLoad)}\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-sm text-slate-400\">Load</div>\n                <div className=\"text-lg font-semibold\">{Math.round(coordinationState.systemLoad * 100)}%</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800/50 border-slate-700 backdrop-blur-sm\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-slate-400\">Active Plans</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-3xl font-bold text-blue-400\">{coordinationState.activePlans}</div>\n              <div className=\"text-right\">\n                <div className=\"text-sm text-slate-400\">Queued</div>\n                <div className=\"text-lg font-semibold text-purple-400\">{coordinationState.queuedRequests}</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800/50 border-slate-700 backdrop-blur-sm\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-slate-400\">Success Rate</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-3xl font-bold text-green-400\">\n                {Math.round(coordinationState.successRate * 100)}%\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-sm text-slate-400\">Avg Consensus</div>\n                <div className=\"text-lg font-semibold text-blue-400\">\n                  {Math.round(coordinationState.averageConsensusTime / 1000)}s\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800/50 border-slate-700 backdrop-blur-sm\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-slate-400\">Agents in Use</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-3xl font-bold text-purple-400\">{coordinationState.agentsInUse.length}</div>\n              <div className=\"flex flex-wrap gap-1\">\n                {coordinationState.agentsInUse.slice(0, 3).map((agent, index) => (\n                  <Badge \n                    key={index} \n                    variant=\"secondary\" \n                    className=\"bg-blue-600/20 text-blue-300 border-blue-500/30 text-xs\"\n                  >\n                    {agent.agentType}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Dashboard Tabs */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5 bg-slate-800/50 border-slate-700\">\n          <TabsTrigger value=\"overview\" className=\"data-[state=active]:bg-blue-600 data-[state=active]:text-white\">\n            Overview\n          </TabsTrigger>\n          <TabsTrigger value=\"plans\" className=\"data-[state=active]:bg-blue-600 data-[state=active]:text-white\">\n            Plan Viewer\n          </TabsTrigger>\n          <TabsTrigger value=\"execution\" className=\"data-[state=active]:bg-blue-600 data-[state=active]:text-white\">\n            Execution Monitor\n          </TabsTrigger>\n          <TabsTrigger value=\"intentions\" className=\"data-[state=active]:bg-blue-600 data-[state=active]:text-white\">\n            Agent Intentions\n          </TabsTrigger>\n          <TabsTrigger value=\"activity\" className=\"data-[state=active]:bg-blue-600 data-[state=active]:text-white\">\n            Activity Log\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <SystemMetrics \n              coordinationState={coordinationState}\n              executionMonitors={executionMonitors}\n            />\n            <MeshActivityLog \n              activities={meshActivities.slice(0, 8)}\n              isRealTime={isRealTimeMode}\n            />\n          </div>\n          \n          <ExecutionProgressMonitor \n            monitors={executionMonitors}\n            onTriggerReplan={handleTriggerReplan}\n            selectedGoalPlan={selectedGoalPlan}\n            onSelectGoalPlan={setSelectedGoalPlan}\n          />\n        </TabsContent>\n\n        {/* Plan Viewer Tab */}\n        <TabsContent value=\"plans\">\n          <PlanViewerPanel \n            selectedGoalPlan={selectedGoalPlan}\n            onSelectGoalPlan={setSelectedGoalPlan}\n            executionMonitors={executionMonitors}\n          />\n        </TabsContent>\n\n        {/* Execution Monitor Tab */}\n        <TabsContent value=\"execution\">\n          <ExecutionProgressMonitor \n            monitors={executionMonitors}\n            onTriggerReplan={handleTriggerReplan}\n            selectedGoalPlan={selectedGoalPlan}\n            onSelectGoalPlan={setSelectedGoalPlan}\n            expandedView={true}\n          />\n        </TabsContent>\n\n        {/* Agent Intentions Tab */}\n        <TabsContent value=\"intentions\">\n          <AgentIntentionsGrid \n            agentsInUse={coordinationState.agentsInUse}\n            isRealTime={isRealTimeMode}\n          />\n        </TabsContent>\n\n        {/* Activity Log Tab */}\n        <TabsContent value=\"activity\">\n          <MeshActivityLog \n            activities={meshActivities}\n            isRealTime={isRealTimeMode}\n            expandedView={true}\n          />\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n\n// Helper function for generating activity messages\nfunction generateActivityMessage(type: MeshActivity['type']): string {\n  const messages = {\n    'GOAL_SUBMITTED': 'New goal submitted to planning queue',\n    'PLAN_PROPOSED': 'Agent proposed execution plan for review',\n    'CONSENSUS_REACHED': 'Plan approved by agent consensus',\n    'EXECUTION_STARTED': 'Plan execution phase initiated',\n    'REPLANNING_TRIGGERED': 'Replanning triggered due to execution failure',\n  }\n  \n  return messages[type] || 'Unknown activity type'\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/copilot/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useCallback' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AvatarImage' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Play' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Pause' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Volume2' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'VolumeX' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Trash2' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MoreVertical' is defined but never used. Allowed unused vars must match /^_/u.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Copy' is defined but never used. Allowed unused vars must match /^_/u.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Share' is defined but never used. Allowed unused vars must match /^_/u.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Bookmark' is defined but never used. Allowed unused vars must match /^_/u.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setAutoScroll' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":108,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":35},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":222,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":222,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6305,6352],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":310,"column":32,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":310,"endColumn":62,"fix":{"range":[11363,11393],"text":"`${words.substring(0, 20)  }...`"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":331,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":331,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11849,11906],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":363,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":363,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12669,12721],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":374,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":374,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12923,12966],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":381,"column":12,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":381,"endColumn":17},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":382,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":382,"endColumn":21,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[13191,13192],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":391,"column":14,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":391,"endColumn":19},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":392,"column":18,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":392,"endColumn":23,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[13574,13575],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":399,"column":12,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":399,"endColumn":17},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":400,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":400,"endColumn":21,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[13760,13761],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":488,"column":26,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":488,"endColumn":34,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[17181,17182],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":490,"column":23,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":490,"endColumn":31,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[17295,17296],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":499,"column":30,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":499,"endColumn":38,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[17798,17799],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":502,"column":30,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":502,"endColumn":38,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[17944,17945],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":505,"column":46,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":505,"endColumn":54,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[18116,18117],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":509,"column":36,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":509,"endColumn":44,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[18270,18271],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":512,"column":28,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":512,"endColumn":36,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[18425,18426],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":773,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":773,"endColumn":61}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":1,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { \n  Send, \n  Mic, \n  MicOff, \n  Settings, \n  History, \n  Zap, \n  Bot, \n  User, \n  Clock, \n  CheckCircle, \n  AlertCircle, \n  Loader2, \n  Download, \n  Play, \n  Pause, \n  Volume2, \n  VolumeX,\n  Trash2,\n  MoreVertical,\n  Copy,\n  Share,\n  Bookmark\n} from 'lucide-react';\n\n// Mock types for copilot functionality\ninterface CopilotMessage {\n  id: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: string;\n  confidence?: number;\n  actions?: string[];\n  attachments?: MessageAttachment[];\n  status?: 'sending' | 'sent' | 'processing' | 'completed' | 'failed';\n}\n\ninterface MessageAttachment {\n  type: 'report' | 'chart' | 'campaign' | 'insight';\n  id: string;\n  title: string;\n  preview?: string;\n  downloadUrl?: string;\n}\n\ninterface CopilotSession {\n  id: string;\n  title: string;\n  startedAt: string;\n  lastMessageAt: string;\n  messageCount: number;\n  status: 'active' | 'paused' | 'archived';\n}\n\ninterface VoiceRecording {\n  isRecording: boolean;\n  isProcessing: boolean;\n  duration: number;\n  transcript?: string;\n  confidence?: number;\n}\n\ninterface ExecutionPlan {\n  steps: ExecutionStep[];\n  estimatedTime: number;\n  requiresApproval: boolean;\n}\n\ninterface ExecutionStep {\n  id: string;\n  description: string;\n  status: 'pending' | 'running' | 'completed' | 'failed';\n  estimatedDuration: number;\n  progress?: number;\n}\n\nconst CopilotDashboard: React.FC = () => {\n  // Chat state\n  const [messages, setMessages] = useState<CopilotMessage[]>([]);\n  const [inputValue, setInputValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  \n  // Voice state\n  const [voiceRecording, setVoiceRecording] = useState<VoiceRecording>({\n    isRecording: false,\n    isProcessing: false,\n    duration: 0\n  });\n  \n  // Session state\n  const [currentSession, setCurrentSession] = useState<CopilotSession | null>(null);\n  const [sessionHistory, setSessionHistory] = useState<CopilotSession[]>([]);\n  \n  // UI state\n  const [activeTab, setActiveTab] = useState('chat');\n  const [showHistory, setShowHistory] = useState(false);\n  const [autoScroll, setAutoScroll] = useState(true);\n  \n  // Execution state\n  const [currentExecution, setCurrentExecution] = useState<ExecutionPlan | null>(null);\n  \n  // Refs\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const voiceTimerRef = useRef<NodeJS.Timeout | null>(null);\n  \n  // Initialize session on mount\n  useEffect(() => {\n    initializeSession();\n    loadSessionHistory();\n    loadInitialMessages();\n  }, []);\n  \n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (autoScroll && messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages, autoScroll]);\n  \n  const initializeSession = () => {\n    const newSession: CopilotSession = {\n      id: `session_${Date.now()}`,\n      title: 'New Conversation',\n      startedAt: new Date().toISOString(),\n      lastMessageAt: new Date().toISOString(),\n      messageCount: 0,\n      status: 'active'\n    };\n    setCurrentSession(newSession);\n  };\n  \n  const loadSessionHistory = () => {\n    // Mock session history\n    const mockSessions: CopilotSession[] = [\n      {\n        id: 'session_1',\n        title: 'Q1 Report Generation',\n        startedAt: '2024-03-25T10:30:00Z',\n        lastMessageAt: '2024-03-25T11:15:00Z',\n        messageCount: 12,\n        status: 'archived'\n      },\n      {\n        id: 'session_2',\n        title: 'Campaign Performance Analysis',\n        startedAt: '2024-03-24T14:20:00Z',\n        lastMessageAt: '2024-03-24T15:45:00Z',\n        messageCount: 8,\n        status: 'archived'\n      },\n      {\n        id: 'session_3',\n        title: 'Brand Voice Optimization',\n        startedAt: '2024-03-23T09:00:00Z',\n        lastMessageAt: '2024-03-23T09:30:00Z',\n        messageCount: 6,\n        status: 'archived'\n      }\n    ];\n    setSessionHistory(mockSessions);\n  };\n  \n  const loadInitialMessages = () => {\n    const welcomeMessage: CopilotMessage = {\n      id: 'welcome',\n      role: 'assistant',\n      content: `Hi! I'm your AI Marketing Copilot. I can help you with:\\n\\n• **Generate Reports**: \"Create a Q1 boardroom report\"\\n• **Analyze Performance**: \"What's our top campaign?\"\\n• **Manage Campaigns**: \"Pause low-performing ads\"\\n• **Create Forecasts**: \"Predict next quarter's revenue\"\\n• **System Status**: \"Show agent health\"\\n\\nWhat would you like to do today?`,\n      timestamp: new Date().toISOString(),\n      confidence: 1.0,\n      status: 'completed'\n    };\n    setMessages([welcomeMessage]);\n  };\n  \n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isLoading) return;\n    \n    const userMessage: CopilotMessage = {\n      id: `msg_${Date.now()}`,\n      role: 'user',\n      content: inputValue.trim(),\n      timestamp: new Date().toISOString(),\n      status: 'sent'\n    };\n    \n    setMessages(prev => [...prev, userMessage]);\n    setInputValue('');\n    setIsLoading(true);\n    setIsTyping(true);\n    \n    try {\n      // Simulate AI processing\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      const response = await generateCopilotResponse(userMessage.content);\n      setMessages(prev => [...prev, response]);\n      \n      // Update session\n      if (currentSession) {\n        const updatedSession = {\n          ...currentSession,\n          lastMessageAt: new Date().toISOString(),\n          messageCount: currentSession.messageCount + 2,\n          title: currentSession.messageCount === 0 ? generateSessionTitle(userMessage.content) : currentSession.title\n        };\n        setCurrentSession(updatedSession);\n      }\n      \n    } catch (error) {\n      console.error('Error sending message:', error);\n      const errorMessage: CopilotMessage = {\n        id: `error_${Date.now()}`,\n        role: 'assistant',\n        content: 'I apologize, but I encountered an error processing your request. Please try again.',\n        timestamp: new Date().toISOString(),\n        status: 'failed'\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n      setIsTyping(false);\n    }\n  };\n  \n  const generateCopilotResponse = async (input: string): Promise<CopilotMessage> => {\n    // Mock AI response generation based on input\n    const inputLower = input.toLowerCase();\n    \n    let content = '';\n    let actions: string[] = [];\n    let attachments: MessageAttachment[] = [];\n    let confidence = 0.9;\n    \n    if (inputLower.includes('report') || inputLower.includes('generate')) {\n      content = `I'll generate a comprehensive report for you. This will include performance metrics, strategic insights, and recommendations.\\n\\nWould you like me to proceed with creating the report?`;\n      actions = ['Generate Report', 'Customize Format', 'Schedule Report'];\n      attachments = [{\n        type: 'report',\n        id: 'sample_report',\n        title: 'Sample Executive Report',\n        preview: 'Performance overview with key metrics'\n      }];\n      \n      // Mock execution plan\n      setCurrentExecution({\n        steps: [\n          { id: 'step1', description: 'Gathering performance data', status: 'pending', estimatedDuration: 2000 },\n          { id: 'step2', description: 'Analyzing trends and patterns', status: 'pending', estimatedDuration: 1500 },\n          { id: 'step3', description: 'Generating insights and recommendations', status: 'pending', estimatedDuration: 3000 },\n          { id: 'step4', description: 'Creating presentation format', status: 'pending', estimatedDuration: 2500 }\n        ],\n        estimatedTime: 9000,\n        requiresApproval: false\n      });\n      \n    } else if (inputLower.includes('campaign') && inputLower.includes('pause')) {\n      content = `I found 3 underperforming campaigns that could be paused:\\n\\n• Campaign A: ROAS 1.8x (target: 3.0x)\\n• Campaign B: ROAS 2.1x (target: 3.0x)\\n• Campaign C: ROAS 1.9x (target: 3.0x)\\n\\nPausing these campaigns will save approximately $2,400/day. Should I proceed?`;\n      actions = ['Pause Campaigns', 'Review Details', 'Optimize Instead'];\n      confidence = 0.85;\n      \n    } else if (inputLower.includes('forecast') || inputLower.includes('predict')) {\n      content = `I'll create forecasts for your key metrics. Based on current trends, here are the projections:\\n\\n• Revenue: +23% growth projected\\n• ROAS: Expected to reach 3.8x\\n• Brand Alignment: 94% target achievement\\n\\nWould you like detailed forecasts with confidence intervals?`;\n      actions = ['Generate Forecasts', 'View Trends', 'Compare Scenarios'];\n      attachments = [{\n        type: 'chart',\n        id: 'forecast_chart',\n        title: 'Revenue Forecast Chart',\n        preview: '3-month projection with confidence bands'\n      }];\n      \n    } else if (inputLower.includes('status') || inputLower.includes('health')) {\n      content = `System Status: **Healthy** ✅\\n\\n• **Active Campaigns**: 12\\n• **Agents Online**: 11/12\\n• **Last Report**: 2 hours ago\\n• **Data Freshness**: Real-time\\n• **Performance**: 96% success rate\\n\\nAll systems are operating normally.`;\n      confidence = 0.95;\n      \n    } else if (inputLower.includes('help') || inputLower.includes('what can you')) {\n      content = `I can help you with comprehensive marketing operations:\\n\\n🔹 **Strategic Reports**: Generate boardroom presentations, QBRs, and executive summaries\\n🔹 **Performance Analysis**: Analyze campaigns, ROAS, brand alignment, and trends\\n🔹 **Campaign Management**: Create, optimize, pause, or analyze campaigns\\n🔹 **Forecasting**: Predict revenue, performance metrics, and strategic outcomes\\n🔹 **Content Creation**: Generate brand-aligned content and creative assets\\n🔹 **System Operations**: Monitor health, configure settings, and manage agents\\n\\nJust tell me what you need in natural language!`;\n      actions = ['Try Demo', 'View Capabilities', 'System Tour'];\n      \n    } else {\n      content = `I understand you're looking for help with \"${input}\". Could you provide more details about what specifically you'd like me to do?\\n\\nFor example:\\n• \"Generate a weekly performance report\"\\n• \"Show me top-performing campaigns\"\\n• \"Create forecasts for next quarter\"\\n• \"Pause underperforming ads\"`;\n      confidence = 0.6;\n    }\n    \n    return {\n      id: `resp_${Date.now()}`,\n      role: 'assistant',\n      content,\n      timestamp: new Date().toISOString(),\n      confidence,\n      actions: actions.length > 0 ? actions : undefined,\n      attachments: attachments.length > 0 ? attachments : undefined,\n      status: 'completed'\n    };\n  };\n  \n  const generateSessionTitle = (firstMessage: string): string => {\n    const words = firstMessage.split(' ').slice(0, 4).join(' ');\n    return words.length > 20 ? words.substring(0, 20) + '...' : words;\n  };\n  \n  const startVoiceRecording = async () => {\n    try {\n      // Mock voice recording start\n      setVoiceRecording({\n        isRecording: true,\n        isProcessing: false,\n        duration: 0\n      });\n      \n      // Start timer\n      voiceTimerRef.current = setInterval(() => {\n        setVoiceRecording(prev => ({\n          ...prev,\n          duration: prev.duration + 1\n        }));\n      }, 1000);\n      \n    } catch (error) {\n      console.error('Failed to start voice recording:', error);\n    }\n  };\n  \n  const stopVoiceRecording = async () => {\n    if (voiceTimerRef.current) {\n      clearInterval(voiceTimerRef.current);\n      voiceTimerRef.current = null;\n    }\n    \n    setVoiceRecording(prev => ({\n      ...prev,\n      isRecording: false,\n      isProcessing: true\n    }));\n    \n    try {\n      // Mock voice transcription\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      const mockTranscript = \"Generate a comprehensive quarterly business review report with performance metrics\";\n      \n      setVoiceRecording(prev => ({\n        ...prev,\n        isProcessing: false,\n        transcript: mockTranscript,\n        confidence: 0.94\n      }));\n      \n      setInputValue(mockTranscript);\n      \n    } catch (error) {\n      console.error('Voice transcription failed:', error);\n      setVoiceRecording(prev => ({\n        ...prev,\n        isProcessing: false\n      }));\n    }\n  };\n  \n  const executeAction = async (action: string) => {\n    if (!currentExecution) return;\n    \n    console.log(`Executing action: ${action}`);\n    \n    // Mock execution process\n    for (let i = 0; i < currentExecution.steps.length; i++) {\n      const step = currentExecution.steps[i];\n      \n      setCurrentExecution(prev => ({\n        ...prev!,\n        steps: prev!.steps.map(s => \n          s.id === step.id ? { ...s, status: 'running', progress: 0 } : s\n        )\n      }));\n      \n      // Simulate step progress\n      for (let progress = 0; progress <= 100; progress += 20) {\n        await new Promise(resolve => setTimeout(resolve, step.estimatedDuration / 5));\n        setCurrentExecution(prev => ({\n          ...prev!,\n          steps: prev!.steps.map(s => \n            s.id === step.id ? { ...s, progress } : s\n          )\n        }));\n      }\n      \n      setCurrentExecution(prev => ({\n        ...prev!,\n        steps: prev!.steps.map(s => \n          s.id === step.id ? { ...s, status: 'completed', progress: 100 } : s\n        )\n      }));\n    }\n    \n    // Add completion message\n    const completionMessage: CopilotMessage = {\n      id: `completion_${Date.now()}`,\n      role: 'assistant',\n      content: `✅ **${action} Completed Successfully!**\\n\\nThe report has been generated and is ready for download. All performance metrics have been analyzed and strategic recommendations are included.`,\n      timestamp: new Date().toISOString(),\n      status: 'completed',\n      attachments: [{\n        type: 'report',\n        id: 'generated_report',\n        title: 'Executive Performance Report',\n        preview: 'Q1 2024 comprehensive analysis with forecasts',\n        downloadUrl: '/downloads/executive-report-q1-2024.pdf'\n      }]\n    };\n    \n    setMessages(prev => [...prev, completionMessage]);\n    setCurrentExecution(null);\n  };\n  \n  const formatTimestamp = (timestamp: string): string => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    const minutes = Math.floor(diff / 60000);\n    \n    if (minutes < 1) return 'Just now';\n    if (minutes < 60) return `${minutes}m ago`;\n    if (minutes < 1440) return `${Math.floor(minutes / 60)}h ago`;\n    return date.toLocaleDateString();\n  };\n  \n  const formatDuration = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-950 text-gray-100\">\n      {/* Header */}\n      <div className=\"border-b border-gray-800 bg-gray-900/50 backdrop-blur-sm sticky top-0 z-10\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 rounded-lg bg-neon-green/20\">\n                <Bot className=\"w-6 h-6 text-neon-green\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-white\">AI Marketing Copilot</h1>\n                <p className=\"text-sm text-gray-400\">\n                  {currentSession ? `Session: ${currentSession.title}` : 'Ready to assist'}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={() => setShowHistory(!showHistory)}\n              >\n                <History className=\"w-4 h-4 mr-2\" />\n                History\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <Settings className=\"w-4 h-4 mr-2\" />\n                Settings\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto flex h-[calc(100vh-80px)]\">\n        {/* Sidebar - Session History */}\n        {showHistory && (\n          <div className=\"w-80 border-r border-gray-800 bg-gray-900/30 p-4\">\n            <h3 className=\"font-semibold text-gray-200 mb-4\">Conversation History</h3>\n            <ScrollArea className=\"h-full\">\n              <div className=\"space-y-2\">\n                {[currentSession, ...sessionHistory].filter(Boolean).map((session) => (\n                  <Card \n                    key={session!.id} \n                    className={`cursor-pointer transition-all duration-200 ${\n                      session!.id === currentSession?.id \n                        ? 'border-neon-green bg-gray-800/50' \n                        : 'border-gray-700 hover:border-gray-600'\n                    }`}\n                  >\n                    <CardContent className=\"p-3\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1 min-w-0\">\n                          <h4 className=\"font-medium text-sm text-gray-200 truncate\">\n                            {session!.title}\n                          </h4>\n                          <p className=\"text-xs text-gray-400 mt-1\">\n                            {session!.messageCount} messages\n                          </p>\n                          <p className=\"text-xs text-gray-500\">\n                            {formatTimestamp(session!.lastMessageAt)}\n                          </p>\n                        </div>\n                        <Badge \n                          variant={session!.status === 'active' ? 'default' : 'secondary'}\n                          className=\"text-xs\"\n                        >\n                          {session!.status}\n                        </Badge>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </ScrollArea>\n          </div>\n        )}\n\n        {/* Main Chat Area */}\n        <div className=\"flex-1 flex flex-col\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"flex-1 flex flex-col\">\n            <TabsList className=\"grid w-full grid-cols-2 bg-gray-900/50 m-4 mb-0\">\n              <TabsTrigger value=\"chat\">Chat</TabsTrigger>\n              <TabsTrigger value=\"execution\">Execution</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"chat\" className=\"flex-1 flex flex-col p-4 pt-2\">\n              {/* Messages Area */}\n              <ScrollArea className=\"flex-1 rounded-lg border border-gray-800 bg-gray-900/20\">\n                <div className=\"p-4 space-y-4\">\n                  {messages.map((message) => (\n                    <div key={message.id} className=\"flex gap-3\">\n                      <Avatar className=\"w-8 h-8 flex-shrink-0\">\n                        {message.role === 'user' ? (\n                          <>\n                            <AvatarFallback className=\"bg-blue-600\">\n                              <User className=\"w-4 h-4\" />\n                            </AvatarFallback>\n                          </>\n                        ) : (\n                          <>\n                            <AvatarFallback className=\"bg-neon-green/20 text-neon-green\">\n                              <Bot className=\"w-4 h-4\" />\n                            </AvatarFallback>\n                          </>\n                        )}\n                      </Avatar>\n                      \n                      <div className=\"flex-1 space-y-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"font-medium text-sm\">\n                            {message.role === 'user' ? 'You' : 'AI Copilot'}\n                          </span>\n                          <span className=\"text-xs text-gray-500\">\n                            {formatTimestamp(message.timestamp)}\n                          </span>\n                          {message.confidence && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {(message.confidence * 100).toFixed(0)}% confident\n                            </Badge>\n                          )}\n                          {message.status && (\n                            <div className=\"flex items-center gap-1\">\n                              {message.status === 'sending' && <Loader2 className=\"w-3 h-3 animate-spin\" />}\n                              {message.status === 'sent' && <CheckCircle className=\"w-3 h-3 text-green-500\" />}\n                              {message.status === 'failed' && <AlertCircle className=\"w-3 h-3 text-red-500\" />}\n                            </div>\n                          )}\n                        </div>\n                        \n                        <div className=\"bg-gray-800/50 rounded-lg p-3\">\n                          <div className=\"whitespace-pre-wrap text-gray-200\">\n                            {message.content}\n                          </div>\n                          \n                          {/* Message Actions */}\n                          {message.actions && (\n                            <div className=\"flex flex-wrap gap-2 mt-3\">\n                              {message.actions.map((action, index) => (\n                                <Button\n                                  key={index}\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => executeAction(action)}\n                                  className=\"text-xs\"\n                                >\n                                  {action}\n                                </Button>\n                              ))}\n                            </div>\n                          )}\n                          \n                          {/* Attachments */}\n                          {message.attachments && (\n                            <div className=\"mt-3 space-y-2\">\n                              {message.attachments.map((attachment, index) => (\n                                <Card key={index} className=\"border-gray-700\">\n                                  <CardContent className=\"p-3\">\n                                    <div className=\"flex items-center justify-between\">\n                                      <div className=\"flex items-center gap-2\">\n                                        <div className=\"p-1 rounded bg-neon-green/20 text-neon-green\">\n                                          {attachment.type === 'report' && <Download className=\"w-3 h-3\" />}\n                                          {attachment.type === 'chart' && <Zap className=\"w-3 h-3\" />}\n                                        </div>\n                                        <div>\n                                          <div className=\"text-sm font-medium\">{attachment.title}</div>\n                                          {attachment.preview && (\n                                            <div className=\"text-xs text-gray-400\">{attachment.preview}</div>\n                                          )}\n                                        </div>\n                                      </div>\n                                      <Button variant=\"ghost\" size=\"sm\">\n                                        <Download className=\"w-3 h-3\" />\n                                      </Button>\n                                    </div>\n                                  </CardContent>\n                                </Card>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                  \n                  {/* Typing Indicator */}\n                  {isTyping && (\n                    <div className=\"flex gap-3\">\n                      <Avatar className=\"w-8 h-8 flex-shrink-0\">\n                        <AvatarFallback className=\"bg-neon-green/20 text-neon-green\">\n                          <Bot className=\"w-4 h-4\" />\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"bg-gray-800/50 rounded-lg p-3\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"flex space-x-1\">\n                            <div className=\"w-2 h-2 bg-neon-green rounded-full animate-bounce\"></div>\n                            <div className=\"w-2 h-2 bg-neon-green rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                            <div className=\"w-2 h-2 bg-neon-green rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                          </div>\n                          <span className=\"text-sm text-gray-400\">AI Copilot is thinking...</span>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div ref={messagesEndRef} />\n                </div>\n              </ScrollArea>\n\n              {/* Voice Recording Status */}\n              {(voiceRecording.isRecording || voiceRecording.isProcessing) && (\n                <Card className=\"border-neon-green bg-neon-green/5 mt-4\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-3\">\n                      {voiceRecording.isRecording ? (\n                        <>\n                          <div className=\"p-2 rounded-full bg-red-500\">\n                            <Mic className=\"w-4 h-4 text-white\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <div className=\"text-sm font-medium text-red-400\">Recording...</div>\n                            <div className=\"text-xs text-gray-400\">\n                              Duration: {formatDuration(voiceRecording.duration)}\n                            </div>\n                          </div>\n                          <Button variant=\"outline\" onClick={stopVoiceRecording}>\n                            Stop\n                          </Button>\n                        </>\n                      ) : (\n                        <>\n                          <Loader2 className=\"w-5 h-5 animate-spin text-neon-green\" />\n                          <div className=\"flex-1\">\n                            <div className=\"text-sm font-medium text-neon-green\">Processing voice...</div>\n                            <div className=\"text-xs text-gray-400\">Converting speech to text</div>\n                          </div>\n                        </>\n                      )}\n                    </div>\n                    {voiceRecording.transcript && (\n                      <div className=\"mt-2 p-2 bg-gray-800 rounded text-sm\">\n                        <div className=\"text-gray-300\">{voiceRecording.transcript}</div>\n                        {voiceRecording.confidence && (\n                          <div className=\"text-xs text-gray-500 mt-1\">\n                            Confidence: {(voiceRecording.confidence * 100).toFixed(0)}%\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Input Area */}\n              <div className=\"mt-4 space-y-2\">\n                <div className=\"flex gap-2\">\n                  <div className=\"flex-1 relative\">\n                    <Input\n                      ref={inputRef}\n                      value={inputValue}\n                      onChange={(e) => setInputValue(e.target.value)}\n                      onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                      placeholder=\"Ask me anything about your marketing performance...\"\n                      className=\"pr-24 bg-gray-900/50 border-gray-700 focus:border-neon-green\"\n                      disabled={isLoading}\n                    />\n                    <div className=\"absolute right-2 top-1/2 -translate-y-1/2 flex gap-1\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={voiceRecording.isRecording ? stopVoiceRecording : startVoiceRecording}\n                        className={`p-1 ${voiceRecording.isRecording ? 'text-red-400' : 'text-gray-400 hover:text-neon-green'}`}\n                      >\n                        {voiceRecording.isRecording ? <MicOff className=\"w-4 h-4\" /> : <Mic className=\"w-4 h-4\" />}\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={handleSendMessage}\n                        disabled={!inputValue.trim() || isLoading}\n                        className=\"p-1 text-gray-400 hover:text-neon-green\"\n                      >\n                        {isLoading ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : <Send className=\"w-4 h-4\" />}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Quick Actions */}\n                <div className=\"flex flex-wrap gap-2\">\n                  {[\n                    \"Generate weekly report\",\n                    \"Show top campaigns\",\n                    \"Create forecast\",\n                    \"Check system status\",\n                    \"Pause low performers\"\n                  ].map((suggestion, index) => (\n                    <Button\n                      key={index}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setInputValue(suggestion)}\n                      className=\"text-xs border-gray-700 hover:border-neon-green\"\n                    >\n                      {suggestion}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"execution\" className=\"flex-1 p-4 pt-2\">\n              {currentExecution ? (\n                <Card className=\"h-full border-gray-800 bg-gray-900/20\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Zap className=\"w-5 h-5 text-neon-green\" />\n                      Execution Plan\n                    </CardTitle>\n                    <CardDescription>\n                      Estimated time: {(currentExecution.estimatedTime / 1000).toFixed(0)} seconds\n                      {currentExecution.requiresApproval && (\n                        <Badge variant=\"outline\" className=\"ml-2\">Approval Required</Badge>\n                      )}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {currentExecution.steps.map((step, index) => (\n                      <div key={step.id} className=\"flex items-center gap-3\">\n                        <div className=\"flex-shrink-0\">\n                          {step.status === 'pending' && <Clock className=\"w-4 h-4 text-gray-400\" />}\n                          {step.status === 'running' && <Loader2 className=\"w-4 h-4 text-neon-green animate-spin\" />}\n                          {step.status === 'completed' && <CheckCircle className=\"w-4 h-4 text-green-500\" />}\n                          {step.status === 'failed' && <AlertCircle className=\"w-4 h-4 text-red-500\" />}\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"text-sm font-medium\">{step.description}</div>\n                          {step.status === 'running' && step.progress !== undefined && (\n                            <div className=\"mt-1\">\n                              <div className=\"w-full bg-gray-700 rounded-full h-1.5\">\n                                <div \n                                  className=\"bg-neon-green h-1.5 rounded-full transition-all duration-300\"\n                                  style={{ width: `${step.progress}%` }}\n                                ></div>\n                              </div>\n                              <div className=\"text-xs text-gray-400 mt-1\">{step.progress}%</div>\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          {(step.estimatedDuration / 1000).toFixed(0)}s\n                        </div>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n              ) : (\n                <div className=\"h-full flex items-center justify-center\">\n                  <div className=\"text-center text-gray-400\">\n                    <Zap className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                    <h3 className=\"text-lg font-medium mb-2\">No Active Execution</h3>\n                    <p className=\"text-sm\">Start a conversation to see execution plans here</p>\n                  </div>\n                </div>\n              )}\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CopilotDashboard; ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/email/components/CampaignConfigDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/email/components/EmailComposer.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1147,1150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1147,1150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":49,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":49,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1236,1285],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_error' is defined but never used.","line":61,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { \n  XMarkIcon,\n  PaperAirplaneIcon\n} from '@heroicons/react/24/outline';\nimport { trpc } from '../../../lib/trpc';\nimport CampaignConfigDrawer from './CampaignConfigDrawer';\n\ninterface EmailComposerProps {\n  onClose: () => void;\n}\n\nexport default function EmailComposer({ onClose }: EmailComposerProps): JSX.Element {\n  const [step, setStep] = useState<'compose' | 'configure' | 'preview'>('compose');\n  const [emailData, setEmailData] = useState({\n    name: '',\n    subject: '',\n    content: {\n      text: '',\n      html: '',\n    },\n    recipients: {\n      emails: [] as string[],\n      segments: [] as string[],\n    },\n    scheduling: {\n      sendImmediately: true,\n      scheduledAt: undefined as Date | undefined,\n    },\n    settings: {\n      trackOpens: true,\n      trackClicks: true,\n      fromName: 'NeonHub Team',\n      fromEmail: 'hello@neonhub.ai',\n    },\n  });\n\n  const [showConfig, setShowConfig] = useState(false);\n\n  const sendCampaignMutation = trpc.email.sendCampaign.useMutation({\n    onSuccess: () => {\n      // Handle success\n      onClose();\n    },\n    onError: (error: any) => {\n      // Error handling - could show error toast or notification to user\n      console.error('Failed to send campaign:', error);\n      // For now, the error is handled by the mutation's error state\n    },\n  });\n\n  const handleSend = async (): Promise<void> => {\n    if (!emailData.name || !emailData.subject || !emailData.content.text) {\n      return;\n    }\n\n    try {\n      await sendCampaignMutation.mutateAsync(emailData);\n    } catch (_error) {\n      // Error handling - the error is already handled by the mutation's onError callback\n      // Additional error handling could be added here if needed\n    }\n  };\n\n  const isValid = emailData.name && emailData.subject && emailData.content.text && emailData.recipients.emails.length > 0;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-xl shadow-2xl w-full max-w-4xl h-[80vh] flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <div>\n            <h2 className=\"text-xl font-semibold text-gray-900\">Create Email Campaign</h2>\n            <p className=\"text-sm text-gray-600 mt-1\">Design and send your email campaign</p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            {/* Step Indicators */}\n            <div className=\"flex items-center gap-2\">\n              <button\n                onClick={() => setStep('compose')}\n                className={`w-8 h-8 rounded-full flex items-center justify-center text-xs font-medium ${\n                  step === 'compose' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-600'\n                }`}\n              >\n                1\n              </button>\n              <div className=\"w-8 h-px bg-gray-300\"></div>\n              <button\n                onClick={() => setStep('configure')}\n                className={`w-8 h-8 rounded-full flex items-center justify-center text-xs font-medium ${\n                  step === 'configure' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-600'\n                }`}\n              >\n                2\n              </button>\n              <div className=\"w-8 h-px bg-gray-300\"></div>\n              <button\n                onClick={() => setStep('preview')}\n                className={`w-8 h-8 rounded-full flex items-center justify-center text-xs font-medium ${\n                  step === 'preview' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-600'\n                }`}\n              >\n                3\n              </button>\n            </div>\n            \n            <button\n              onClick={onClose}\n              className=\"p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100\"\n            >\n              <XMarkIcon className=\"h-5 w-5\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-hidden\">\n          {step === 'compose' && (\n            <div className=\"h-full flex\">\n              {/* Editor */}\n              <div className=\"flex-1 flex flex-col\">\n                <div className=\"p-6 border-b border-gray-200\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Campaign Name *\n                      </label>\n                      <input\n                        type=\"text\"\n                        value={emailData.name}\n                        onChange={(e) => setEmailData(prev => ({ ...prev, name: e.target.value }))}\n                        placeholder=\"Enter campaign name\"\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Subject Line *\n                      </label>\n                      <input\n                        type=\"text\"\n                        value={emailData.subject}\n                        onChange={(e) => setEmailData(prev => ({ ...prev, subject: e.target.value }))}\n                        placeholder=\"Enter email subject\"\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex-1 p-6\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Email Content *\n                  </label>\n                  <textarea\n                    value={emailData.content.text}\n                    onChange={(e) => setEmailData(prev => ({\n                      ...prev,\n                      content: { ...prev.content, text: e.target.value }\n                    }))}\n                    placeholder=\"Write your email content here...\"\n                    className=\"w-full h-64 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none\"\n                  />\n                  \n                  <div className=\"mt-4 flex items-center gap-4\">\n                    <button className=\"text-sm text-blue-600 hover:text-blue-700\">\n                      Add Image\n                    </button>\n                    <button className=\"text-sm text-blue-600 hover:text-blue-700\">\n                      Insert Link\n                    </button>\n                    <button className=\"text-sm text-blue-600 hover:text-blue-700\">\n                      Use Template\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              {/* Quick Settings Sidebar */}\n              <div className=\"w-80 border-l border-gray-200 p-6\">\n                <h3 className=\"text-sm font-medium text-gray-900 mb-4\">Quick Settings</h3>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      From Name\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={emailData.settings.fromName}\n                      onChange={(e) => setEmailData(prev => ({\n                        ...prev,\n                        settings: { ...prev.settings, fromName: e.target.value }\n                      }))}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      From Email\n                    </label>\n                    <input\n                      type=\"email\"\n                      value={emailData.settings.fromEmail}\n                      onChange={(e) => setEmailData(prev => ({\n                        ...prev,\n                        settings: { ...prev.settings, fromEmail: e.target.value }\n                      }))}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <label className=\"flex items-center\">\n                      <input\n                        type=\"checkbox\"\n                        checked={emailData.settings.trackOpens}\n                        onChange={(e) => setEmailData(prev => ({\n                          ...prev,\n                          settings: { ...prev.settings, trackOpens: e.target.checked }\n                        }))}\n                        className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                      />\n                      <span className=\"ml-2 text-sm text-gray-700\">Track opens</span>\n                    </label>\n\n                    <label className=\"flex items-center\">\n                      <input\n                        type=\"checkbox\"\n                        checked={emailData.settings.trackClicks}\n                        onChange={(e) => setEmailData(prev => ({\n                          ...prev,\n                          settings: { ...prev.settings, trackClicks: e.target.checked }\n                        }))}\n                        className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                      />\n                      <span className=\"ml-2 text-sm text-gray-700\">Track clicks</span>\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {step === 'configure' && (\n            <div className=\"h-full p-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-6\">Campaign Configuration</h3>\n              \n              <div className=\"max-w-2xl space-y-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Recipients *\n                  </label>\n                  <textarea\n                    placeholder=\"Enter email addresses, one per line\"\n                    value={emailData.recipients.emails.join('\\n')}\n                    onChange={(e) => setEmailData(prev => ({\n                      ...prev,\n                      recipients: { ...prev.recipients, emails: e.target.value.split('\\n').filter(Boolean) }\n                    }))}\n                    className=\"w-full h-32 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    {emailData.recipients.emails.length} recipients\n                  </p>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n                    Scheduling\n                  </label>\n                  <div className=\"space-y-3\">\n                    <label className=\"flex items-center\">\n                      <input\n                        type=\"radio\"\n                        checked={emailData.scheduling.sendImmediately}\n                        onChange={() => setEmailData(prev => ({\n                          ...prev,\n                          scheduling: { ...prev.scheduling, sendImmediately: true, scheduledAt: undefined }\n                        }))}\n                        className=\"text-blue-600 focus:ring-blue-500\"\n                      />\n                      <span className=\"ml-2 text-sm text-gray-700\">Send immediately</span>\n                    </label>\n\n                    <label className=\"flex items-center\">\n                      <input\n                        type=\"radio\"\n                        checked={!emailData.scheduling.sendImmediately}\n                        onChange={() => setEmailData(prev => ({\n                          ...prev,\n                          scheduling: { ...prev.scheduling, sendImmediately: false }\n                        }))}\n                        className=\"text-blue-600 focus:ring-blue-500\"\n                      />\n                      <span className=\"ml-2 text-sm text-gray-700\">Schedule for later</span>\n                    </label>\n\n                    {!emailData.scheduling.sendImmediately && (\n                      <div className=\"ml-6\">\n                        <input\n                          type=\"datetime-local\"\n                          value={emailData.scheduling.scheduledAt?.toISOString().slice(0, 16) || ''}\n                          onChange={(e) => setEmailData(prev => ({\n                            ...prev,\n                            scheduling: { ...prev.scheduling, scheduledAt: new Date(e.target.value) }\n                          }))}\n                          className=\"px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        />\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {step === 'preview' && (\n            <div className=\"h-full flex\">\n              <div className=\"flex-1 p-6\">\n                <h3 className=\"text-lg font-medium text-gray-900 mb-6\">Preview & Send</h3>\n                \n                <div className=\"bg-gray-50 rounded-lg p-6\">\n                  <div className=\"bg-white rounded-lg shadow-sm p-6\">\n                    <div className=\"border-b border-gray-200 pb-4 mb-4\">\n                      <div className=\"text-sm text-gray-600\">From: {emailData.settings.fromName} &lt;{emailData.settings.fromEmail}&gt;</div>\n                      <div className=\"text-lg font-medium text-gray-900 mt-1\">{emailData.subject}</div>\n                    </div>\n                    \n                    <div className=\"prose prose-sm max-w-none\">\n                      {emailData.content.text.split('\\n').map((paragraph, index) => (\n                        <p key={index} className=\"mb-3\">{paragraph}</p>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"w-80 border-l border-gray-200 p-6\">\n                <h4 className=\"text-sm font-medium text-gray-900 mb-4\">Campaign Summary</h4>\n                \n                <div className=\"space-y-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-600\">Campaign:</span>\n                    <div className=\"font-medium\">{emailData.name}</div>\n                  </div>\n                  \n                  <div>\n                    <span className=\"text-gray-600\">Recipients:</span>\n                    <div className=\"font-medium\">{emailData.recipients.emails.length} emails</div>\n                  </div>\n                  \n                  <div>\n                    <span className=\"text-gray-600\">Timing:</span>\n                    <div className=\"font-medium\">\n                      {emailData.scheduling.sendImmediately ? 'Send immediately' : 'Scheduled'}\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <span className=\"text-gray-600\">Tracking:</span>\n                    <div className=\"font-medium\">\n                      {emailData.settings.trackOpens && 'Opens, '}\n                      {emailData.settings.trackClicks && 'Clicks'}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"p-6 border-t border-gray-200 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            {step !== 'compose' && (\n              <button\n                onClick={() => {\n                  if (step === 'configure') setStep('compose');\n                  if (step === 'preview') setStep('configure');\n                }}\n                className=\"px-4 py-2 text-gray-600 hover:text-gray-900\"\n              >\n                Back\n              </button>\n            )}\n          </div>\n\n          <div className=\"flex items-center gap-3\">\n            <button\n              onClick={onClose}\n              className=\"px-4 py-2 text-gray-600 hover:text-gray-900\"\n            >\n              Cancel\n            </button>\n            \n            {step === 'compose' && (\n              <button\n                onClick={() => setStep('configure')}\n                disabled={!emailData.name || !emailData.subject || !emailData.content.text}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed\"\n              >\n                Continue\n              </button>\n            )}\n            \n            {step === 'configure' && (\n              <button\n                onClick={() => setStep('preview')}\n                disabled={emailData.recipients.emails.length === 0}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed\"\n              >\n                Preview\n              </button>\n            )}\n            \n            {step === 'preview' && (\n              <button\n                onClick={handleSend}\n                disabled={!isValid || sendCampaignMutation.isLoading}\n                className=\"flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed\"\n              >\n                <PaperAirplaneIcon className=\"h-4 w-4\" />\n                {sendCampaignMutation.isLoading ? 'Sending...' : 'Send Campaign'}\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Configuration Drawer */}\n      {showConfig && (\n        <CampaignConfigDrawer\n          isOpen={showConfig}\n          onClose={() => setShowConfig(false)}\n          emailData={emailData}\n          onUpdate={setEmailData}\n        />\n      )}\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/email/components/EmailDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/email/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/insights/boardroom/page.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":342,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":342,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11850,11910],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":348,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":348,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12062,12110],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  Download, \n  Play, \n  Pause, \n  SkipBack, \n  SkipForward, \n  TrendingUp, \n  TrendingDown, \n  Target, \n  Calendar,\n  FileText,\n  BarChart3,\n  PieChart,\n  Activity,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Zap,\n  Eye,\n  Share2,\n  Settings\n} from 'lucide-react';\n\n// Mock types for the boardroom functionality\ninterface BoardroomReport {\n  id: string;\n  title: string;\n  subtitle?: string;\n  reportType: string;\n  quarter?: string;\n  theme: string;\n  overallScore: number;\n  brandHealthScore: number;\n  overallROAS: number;\n  totalRevenue: number;\n  keyTakeaways: string[];\n  strategicRecommendations: string[];\n  slides: StrategySlide[];\n  forecasts: ForecastInsight[];\n  generationTime: number;\n  confidenceScore: number;\n  createdAt: string;\n}\n\ninterface StrategySlide {\n  slideNumber: number;\n  slideType: string;\n  title: string;\n  subtitle?: string;\n  keyTakeaway?: string;\n  businessContext?: string;\n  recommendation?: string;\n  theme: string;\n}\n\ninterface ForecastInsight {\n  metricName: string;\n  currentValue: number;\n  projectedValue: number;\n  projectionPeriod: string;\n  confidenceLevel: number;\n  businessImpact: number;\n  strategicPriority: string;\n  actionRequired: boolean;\n}\n\n// Custom hooks for data fetching\nconst useBoardroomReports = () => {\n  const [reports, setReports] = useState<BoardroomReport[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Mock data fetch\n    setTimeout(() => {\n      setReports([\n        {\n          id: 'qbr_2024_q1',\n          title: 'Q1 2024 Quarterly Business Review',\n          subtitle: 'Strategic Performance & Forward Outlook',\n          reportType: 'QBR',\n          quarter: 'Q1 2024',\n          theme: 'NEON_GLASS',\n          overallScore: 87,\n          brandHealthScore: 91,\n          overallROAS: 3.4,\n          totalRevenue: 1250000,\n          keyTakeaways: [\n            'Exceeded ROAS targets by 13% across all campaigns',\n            'Brand alignment improved by 15% quarter-over-quarter',\n            'AI agent efficiency increased by 28%',\n            'Video content strategy yielding 87% success rate'\n          ],\n          strategicRecommendations: [\n            'Scale high-performing video content campaigns',\n            'Implement cross-platform brand consistency guidelines',\n            'Invest in advanced AI agent collaboration'\n          ],\n          slides: [\n            { slideNumber: 1, slideType: 'TITLE', title: 'Q1 2024 Strategic Review', theme: 'NEON_GLASS' },\n            { slideNumber: 2, slideType: 'EXECUTIVE_SUMMARY', title: 'Executive Summary', keyTakeaway: 'Strong performance across all key metrics', theme: 'NEON_GLASS' },\n            { slideNumber: 3, slideType: 'FINANCIAL_OVERVIEW', title: 'Financial Performance', keyTakeaway: 'Revenue up 23% with 3.4x ROAS', theme: 'NEON_GLASS' },\n            { slideNumber: 4, slideType: 'AGENT_HIGHLIGHT', title: 'AI Agent Performance', keyTakeaway: '92% average success rate achieved', theme: 'NEON_GLASS' },\n            { slideNumber: 5, slideType: 'FORECAST', title: 'Strategic Forecasts', keyTakeaway: 'Projected 16% improvement over next quarter', theme: 'NEON_GLASS' }\n          ],\n          forecasts: [\n            {\n              metricName: 'Overall ROAS',\n              currentValue: 3.4,\n              projectedValue: 3.8,\n              projectionPeriod: '3_MONTHS',\n              confidenceLevel: 0.85,\n              businessImpact: 125000,\n              strategicPriority: 'HIGH',\n              actionRequired: true\n            },\n            {\n              metricName: 'Brand Alignment Score',\n              currentValue: 0.91,\n              projectedValue: 0.94,\n              projectionPeriod: '6_MONTHS',\n              confidenceLevel: 0.78,\n              businessImpact: 85000,\n              strategicPriority: 'MEDIUM',\n              actionRequired: false\n            }\n          ],\n          generationTime: 2847,\n          confidenceScore: 0.82,\n          createdAt: '2024-01-15T10:30:00Z'\n        },\n        {\n          id: 'monthly_2024_03',\n          title: 'March 2024 Strategic Overview',\n          subtitle: 'Monthly Performance & Optimization Insights',\n          reportType: 'MONTHLY_STRATEGY',\n          theme: 'EXECUTIVE_DARK',\n          overallScore: 92,\n          brandHealthScore: 89,\n          overallROAS: 3.6,\n          totalRevenue: 485000,\n          keyTakeaways: [\n            'Campaign optimization yielding 12% ROAS improvement',\n            'Cross-platform consistency at 94%',\n            'New AI agents showing 85% success rate'\n          ],\n          strategicRecommendations: [\n            'Accelerate high-performing campaign scaling',\n            'Implement new optimization algorithms'\n          ],\n          slides: [\n            { slideNumber: 1, slideType: 'TITLE', title: 'March 2024 Overview', theme: 'EXECUTIVE_DARK' },\n            { slideNumber: 2, slideType: 'METRIC', title: 'Key Metrics', keyTakeaway: 'All metrics trending positive', theme: 'EXECUTIVE_DARK' },\n            { slideNumber: 3, slideType: 'TREND', title: 'Performance Trends', keyTakeaway: 'Consistent upward trajectory', theme: 'EXECUTIVE_DARK' }\n          ],\n          forecasts: [\n            {\n              metricName: 'Monthly Revenue',\n              currentValue: 485000,\n              projectedValue: 520000,\n              projectionPeriod: '1_MONTH',\n              confidenceLevel: 0.91,\n              businessImpact: 35000,\n              strategicPriority: 'HIGH',\n              actionRequired: true\n            }\n          ],\n          generationTime: 1823,\n          confidenceScore: 0.89,\n          createdAt: '2024-03-31T16:45:00Z'\n        }\n      ]);\n      setLoading(false);\n    }, 1000);\n  }, []);\n\n  return { reports, loading };\n};\n\nconst useForecastInsights = () => {\n  const [insights, setInsights] = useState<ForecastInsight[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Mock forecast data\n    setTimeout(() => {\n      setInsights([\n        {\n          metricName: 'Revenue Growth',\n          currentValue: 1250000,\n          projectedValue: 1450000,\n          projectionPeriod: '3_MONTHS',\n          confidenceLevel: 0.87,\n          businessImpact: 200000,\n          strategicPriority: 'CRITICAL',\n          actionRequired: true\n        },\n        {\n          metricName: 'Cost Per Acquisition',\n          currentValue: 45,\n          projectedValue: 38,\n          projectionPeriod: '6_MONTHS',\n          confidenceLevel: 0.83,\n          businessImpact: 95000,\n          strategicPriority: 'HIGH',\n          actionRequired: true\n        },\n        {\n          metricName: 'Agent Efficiency',\n          currentValue: 0.87,\n          projectedValue: 0.93,\n          projectionPeriod: '3_MONTHS',\n          confidenceLevel: 0.79,\n          businessImpact: 125000,\n          strategicPriority: 'MEDIUM',\n          actionRequired: false\n        }\n      ]);\n      setLoading(false);\n    }, 800);\n  }, []);\n\n  return { insights, loading };\n};\n\n// Mock chart component\nconst ForecastChart: React.FC<{ insight: ForecastInsight }> = ({ insight }) => {\n  const changePercent = ((insight.projectedValue - insight.currentValue) / insight.currentValue * 100);\n  const isPositive = changePercent > 0;\n\n  return (\n    <div className=\"h-48 bg-gray-900/20 rounded-lg border border-gray-700 p-4 flex flex-col justify-between\">\n      <div className=\"flex items-center justify-between\">\n        <h4 className=\"text-sm font-medium text-gray-300\">{insight.metricName}</h4>\n        <Badge variant={isPositive ? \"default\" : \"destructive\"} className=\"text-xs\">\n          {isPositive ? <TrendingUp className=\"w-3 h-3 mr-1\" /> : <TrendingDown className=\"w-3 h-3 mr-1\" />}\n          {changePercent.toFixed(1)}%\n        </Badge>\n      </div>\n      \n      <div className=\"flex-1 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-neon-green mb-1\">\n            {typeof insight.projectedValue === 'number' && insight.projectedValue > 1000 \n              ? `$${(insight.projectedValue / 1000).toFixed(0)}K` \n              : insight.projectedValue.toFixed(2)}\n          </div>\n          <div className=\"text-xs text-gray-400\">\n            from {typeof insight.currentValue === 'number' && insight.currentValue > 1000 \n              ? `$${(insight.currentValue / 1000).toFixed(0)}K` \n              : insight.currentValue.toFixed(2)}\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"mt-2\">\n        <div className=\"flex justify-between text-xs text-gray-400 mb-1\">\n          <span>Confidence</span>\n          <span>{(insight.confidenceLevel * 100).toFixed(0)}%</span>\n        </div>\n        <Progress value={insight.confidenceLevel * 100} className=\"h-1\" />\n      </div>\n    </div>\n  );\n};\n\n// Slide preview component\nconst SlidePreview: React.FC<{ slide: StrategySlide; isActive: boolean; onClick: () => void }> = ({ \n  slide, \n  isActive, \n  onClick \n}) => {\n  const getSlideIcon = (type: string) => {\n    switch (type) {\n      case 'EXECUTIVE_SUMMARY': return <BarChart3 className=\"w-4 h-4\" />;\n      case 'FINANCIAL_OVERVIEW': return <PieChart className=\"w-4 h-4\" />;\n      case 'AGENT_HIGHLIGHT': return <Zap className=\"w-4 h-4\" />;\n      case 'FORECAST': return <TrendingUp className=\"w-4 h-4\" />;\n      case 'METRIC': return <Activity className=\"w-4 h-4\" />;\n      case 'TREND': return <TrendingUp className=\"w-4 h-4\" />;\n      default: return <FileText className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <Card \n      className={`cursor-pointer transition-all duration-200 ${\n        isActive \n          ? 'border-neon-green shadow-lg shadow-neon-green/20 bg-gray-900/60' \n          : 'border-gray-700 hover:border-gray-600 bg-gray-900/20'\n      }`}\n      onClick={onClick}\n    >\n      <CardContent className=\"p-3\">\n        <div className=\"flex items-start gap-3\">\n          <div className=\"flex-shrink-0\">\n            <div className={`p-2 rounded-lg ${isActive ? 'bg-neon-green/20 text-neon-green' : 'bg-gray-800 text-gray-400'}`}>\n              {getSlideIcon(slide.slideType)}\n            </div>\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <span className=\"text-xs font-mono text-gray-500\">#{slide.slideNumber}</span>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {slide.slideType.replace('_', ' ')}\n              </Badge>\n            </div>\n            <h4 className=\"font-medium text-gray-200 text-sm truncate\">{slide.title}</h4>\n            {slide.keyTakeaway && (\n              <p className=\"text-xs text-gray-400 mt-1 line-clamp-2\">{slide.keyTakeaway}</p>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Main component\nexport default function BoardroomDashboard() {\n  const { reports, loading: reportsLoading } = useBoardroomReports();\n  const { insights, loading: insightsLoading } = useForecastInsights();\n  const [selectedReport, setSelectedReport] = useState<BoardroomReport | null>(null);\n  const [activeSlide, setActiveSlide] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  useEffect(() => {\n    if (reports.length > 0 && !selectedReport) {\n      setSelectedReport(reports[0]);\n    }\n  }, [reports, selectedReport]);\n\n  const handleDownload = (format: string, reportId: string) => {\n    // Mock download functionality\n    console.log(`Downloading ${format} for report ${reportId}`);\n    // In production, this would trigger actual file download\n  };\n\n  const handleNotionExport = (reportId: string) => {\n    // Mock Notion export\n    console.log(`Exporting to Notion: ${reportId}`);\n  };\n\n  const nextSlide = () => {\n    if (selectedReport && activeSlide < selectedReport.slides.length - 1) {\n      setActiveSlide(activeSlide + 1);\n    }\n  };\n\n  const prevSlide = () => {\n    if (activeSlide > 0) {\n      setActiveSlide(activeSlide - 1);\n    }\n  };\n\n  const togglePlayback = () => {\n    setIsPlaying(!isPlaying);\n    // Auto-advance slides when playing\n    if (!isPlaying) {\n      const interval = setInterval(() => {\n        setActiveSlide(prev => {\n          if (selectedReport && prev >= selectedReport.slides.length - 1) {\n            setIsPlaying(false);\n            clearInterval(interval);\n            return prev;\n          }\n          return prev + 1;\n        });\n      }, 3000);\n    }\n  };\n\n  if (reportsLoading || insightsLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-950 p-6 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-neon-green mx-auto mb-4\"></div>\n          <p className=\"text-gray-400\">Loading boardroom intelligence...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-950 text-gray-100\">\n      {/* Header */}\n      <div className=\"border-b border-gray-800 bg-gray-900/50 backdrop-blur-sm\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-white\">Boardroom Strategy Center</h1>\n              <p className=\"text-gray-400 mt-1\">AI-Generated Executive Presentations & Strategic Forecasts</p>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Button variant=\"outline\" size=\"sm\">\n                <Settings className=\"w-4 h-4 mr-2\" />\n                Settings\n              </Button>\n              <Button className=\"bg-neon-green hover:bg-neon-green/90 text-gray-900\">\n                <Zap className=\"w-4 h-4 mr-2\" />\n                Generate Report\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-6 py-6\">\n        <Tabs defaultValue=\"reports\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3 bg-gray-900/50\">\n            <TabsTrigger value=\"reports\">Executive Reports</TabsTrigger>\n            <TabsTrigger value=\"forecasts\">Forecast Analytics</TabsTrigger>\n            <TabsTrigger value=\"insights\">Strategic Insights</TabsTrigger>\n          </TabsList>\n\n          {/* Executive Reports Tab */}\n          <TabsContent value=\"reports\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n              {/* Report List */}\n              <div className=\"lg:col-span-1\">\n                <Card className=\"bg-gray-900/30 border-gray-700\">\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Available Reports</CardTitle>\n                    <CardDescription>AI-generated strategic presentations</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {reports.map((report) => (\n                      <Card\n                        key={report.id}\n                        className={`cursor-pointer transition-all duration-200 ${\n                          selectedReport?.id === report.id\n                            ? 'border-neon-green bg-gray-800/50'\n                            : 'border-gray-700 hover:border-gray-600'\n                        }`}\n                        onClick={() => {\n                          setSelectedReport(report);\n                          setActiveSlide(0);\n                        }}\n                      >\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {report.reportType}\n                            </Badge>\n                            <div className=\"text-right\">\n                              <div className=\"text-sm font-bold text-neon-green\">\n                                {report.overallScore}%\n                              </div>\n                              <div className=\"text-xs text-gray-400\">Score</div>\n                            </div>\n                          </div>\n                          <h4 className=\"font-medium text-sm text-gray-200 mb-1\">\n                            {report.title}\n                          </h4>\n                          <p className=\"text-xs text-gray-400 mb-2\">\n                            {report.subtitle}\n                          </p>\n                          <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                            <span className=\"flex items-center gap-1\">\n                              <Calendar className=\"w-3 h-3\" />\n                              {new Date(report.createdAt).toLocaleDateString()}\n                            </span>\n                            <span>{report.slides.length} slides</span>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Main Report Viewer */}\n              <div className=\"lg:col-span-2\">\n                {selectedReport && (\n                  <Card className=\"bg-gray-900/30 border-gray-700 h-[600px]\">\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <CardTitle className=\"text-lg\">{selectedReport.title}</CardTitle>\n                          <CardDescription>{selectedReport.subtitle}</CardDescription>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Button variant=\"outline\" size=\"sm\" onClick={prevSlide} disabled={activeSlide === 0}>\n                            <SkipBack className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\" onClick={togglePlayback}>\n                            {isPlaying ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={nextSlide} \n                            disabled={activeSlide === selectedReport.slides.length - 1}\n                          >\n                            <SkipForward className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"h-[500px] flex flex-col\">\n                      {/* Slide Content */}\n                      <div className=\"flex-1 bg-gray-800/30 rounded-lg p-6 mb-4 flex items-center justify-center\">\n                        {selectedReport.slides[activeSlide] ? (\n                          <div className=\"text-center max-w-2xl\">\n                            <div className=\"text-xs text-gray-400 mb-2\">\n                              Slide {activeSlide + 1} of {selectedReport.slides.length}\n                            </div>\n                            <h2 className=\"text-2xl font-bold text-white mb-4\">\n                              {selectedReport.slides[activeSlide].title}\n                            </h2>\n                            {selectedReport.slides[activeSlide].subtitle && (\n                              <p className=\"text-lg text-gray-300 mb-6\">\n                                {selectedReport.slides[activeSlide].subtitle}\n                              </p>\n                            )}\n                            {selectedReport.slides[activeSlide].keyTakeaway && (\n                              <div className=\"bg-neon-green/10 border border-neon-green/30 rounded-lg p-4\">\n                                <div className=\"text-sm font-medium text-neon-green mb-2\">Key Takeaway</div>\n                                <p className=\"text-gray-300\">{selectedReport.slides[activeSlide].keyTakeaway}</p>\n                              </div>\n                            )}\n                          </div>\n                        ) : (\n                          <div className=\"text-gray-400\">Select a slide to view content</div>\n                        )}\n                      </div>\n\n                      {/* Slide Progress */}\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-xs text-gray-400\">\n                          <span>Progress</span>\n                          <span>{activeSlide + 1} / {selectedReport.slides.length}</span>\n                        </div>\n                        <Progress value={((activeSlide + 1) / selectedReport.slides.length) * 100} className=\"h-1\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n\n              {/* Download & Tools Panel */}\n              <div className=\"lg:col-span-1\">\n                <div className=\"space-y-4\">\n                  {/* Quick Actions */}\n                  <Card className=\"bg-gray-900/30 border-gray-700\">\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">Quick Actions</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-2\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        className=\"w-full justify-start\"\n                        onClick={() => selectedReport && handleDownload('PDF', selectedReport.id)}\n                      >\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Download PDF\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        className=\"w-full justify-start\"\n                        onClick={() => selectedReport && handleDownload('PPTX', selectedReport.id)}\n                      >\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Download PPTX\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        className=\"w-full justify-start\"\n                        onClick={() => selectedReport && handleNotionExport(selectedReport.id)}\n                      >\n                        <Share2 className=\"w-4 h-4 mr-2\" />\n                        Export to Notion\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                        <Eye className=\"w-4 h-4 mr-2\" />\n                        Present Mode\n                      </Button>\n                    </CardContent>\n                  </Card>\n\n                  {/* Report Stats */}\n                  {selectedReport && (\n                    <Card className=\"bg-gray-900/30 border-gray-700\">\n                      <CardHeader>\n                        <CardTitle className=\"text-sm\">Report Statistics</CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-3\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-400\">Overall Score</span>\n                          <span className=\"font-medium text-neon-green\">{selectedReport.overallScore}%</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-400\">Brand Health</span>\n                          <span className=\"font-medium\">{selectedReport.brandHealthScore}%</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-400\">ROAS</span>\n                          <span className=\"font-medium\">{selectedReport.overallROAS.toFixed(1)}x</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-400\">Revenue</span>\n                          <span className=\"font-medium\">${(selectedReport.totalRevenue / 1000).toFixed(0)}K</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-400\">Confidence</span>\n                          <span className=\"font-medium\">{(selectedReport.confidenceScore * 100).toFixed(0)}%</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-400\">Generation Time</span>\n                          <span className=\"font-medium\">{selectedReport.generationTime}ms</span>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n\n                  {/* Slide Explorer */}\n                  {selectedReport && (\n                    <Card className=\"bg-gray-900/30 border-gray-700\">\n                      <CardHeader>\n                        <CardTitle className=\"text-sm\">Slide Navigator</CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-2 max-h-64 overflow-y-auto\">\n                        {selectedReport.slides.map((slide, index) => (\n                          <SlidePreview\n                            key={slide.slideNumber}\n                            slide={slide}\n                            isActive={index === activeSlide}\n                            onClick={() => setActiveSlide(index)}\n                          />\n                        ))}\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Forecast Analytics Tab */}\n          <TabsContent value=\"forecasts\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {insights.map((insight, index) => (\n                <ForecastChart key={index} insight={insight} />\n              ))}\n            </div>\n\n            <Card className=\"bg-gray-900/30 border-gray-700\">\n              <CardHeader>\n                <CardTitle>Forecast Summary</CardTitle>\n                <CardDescription>AI-powered predictive analytics for strategic planning</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  {insights.map((insight, index) => (\n                    <div key={index} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <h4 className=\"font-medium text-gray-200\">{insight.metricName}</h4>\n                        <Badge variant={insight.strategicPriority === 'CRITICAL' ? 'destructive' : 'default'}>\n                          {insight.strategicPriority}\n                        </Badge>\n                      </div>\n                      <div className=\"text-2xl font-bold text-neon-green\">\n                        {typeof insight.projectedValue === 'number' && insight.projectedValue > 1000 \n                          ? `$${(insight.projectedValue / 1000).toFixed(0)}K` \n                          : insight.projectedValue.toFixed(2)}\n                      </div>\n                      <div className=\"text-sm text-gray-400\">\n                        {insight.projectionPeriod.replace('_', ' ')} projection\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Progress value={insight.confidenceLevel * 100} className=\"flex-1 h-1\" />\n                        <span className=\"text-xs text-gray-400\">{(insight.confidenceLevel * 100).toFixed(0)}%</span>\n                      </div>\n                      {insight.actionRequired && (\n                        <div className=\"flex items-center gap-1 text-xs text-amber-400\">\n                          <AlertTriangle className=\"w-3 h-3\" />\n                          Action Required\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Strategic Insights Tab */}\n          <TabsContent value=\"insights\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"bg-gray-900/30 border-gray-700\">\n                <CardHeader>\n                  <CardTitle>System Performance</CardTitle>\n                  <CardDescription>Real-time intelligence system status</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-400\">AI Agents Active</span>\n                      <div className=\"flex items-center gap-2\">\n                        <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                        <span className=\"text-sm font-medium\">12/12</span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-400\">Last Report Generated</span>\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"w-4 h-4 text-gray-400\" />\n                        <span className=\"text-sm font-medium\">2 hours ago</span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-400\">Data Freshness</span>\n                      <div className=\"flex items-center gap-2\">\n                        <Activity className=\"w-4 h-4 text-green-500\" />\n                        <span className=\"text-sm font-medium\">Real-time</span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-400\">Forecast Accuracy</span>\n                      <div className=\"flex items-center gap-2\">\n                        <Target className=\"w-4 h-4 text-neon-green\" />\n                        <span className=\"text-sm font-medium\">87% (30d avg)</span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gray-900/30 border-gray-700\">\n                <CardHeader>\n                  <CardTitle>Recent Activity</CardTitle>\n                  <CardDescription>Latest strategic intelligence updates</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {[\n                      { time: '2m ago', event: 'Q1 Report generated successfully', status: 'success' },\n                      { time: '15m ago', event: 'New forecast model deployed', status: 'info' },\n                      { time: '1h ago', event: 'Brand alignment score updated', status: 'success' },\n                      { time: '2h ago', event: 'Campaign performance analyzed', status: 'success' },\n                      { time: '3h ago', event: 'Strategic recommendations updated', status: 'info' }\n                    ].map((activity, index) => (\n                      <div key={index} className=\"flex items-center gap-3\">\n                        <div className={`w-2 h-2 rounded-full ${\n                          activity.status === 'success' ? 'bg-green-500' : 'bg-blue-500'\n                        }`} />\n                        <div className=\"flex-1\">\n                          <div className=\"text-sm text-gray-300\">{activity.event}</div>\n                          <div className=\"text-xs text-gray-500\">{activity.time}</div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/insights/campaign-patterns/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[846,849],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[846,849],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[873,876],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[873,876],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[903,906],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[903,906],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[931,934],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[931,934],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1060,1063],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1060,1063],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1088,1091],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1088,1091],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1112,1115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1112,1115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'analyticsLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":67,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":276,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":276,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10605,10608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10605,10608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { trpc } from '@/utils/trpc';\nimport { PatternExplorerPanel } from '@/components/PatternExplorerPanel';\nimport { PredictiveCampaignDesigner } from '@/components/PredictiveCampaignDesigner';\nimport { AutoReplayDashboard } from '@/components/AutoReplayDashboard';\nimport { SegmentLiftChart } from '@/components/SegmentLiftChart';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { \n  Brain, \n  TrendingUp, \n  Zap, \n  Target, \n  Activity,\n  RefreshCw,\n  Play,\n  Pause,\n  BarChart3,\n  Lightbulb,\n  Rocket\n} from 'lucide-react';\n\ninterface InsightsData {\n  patterns: any[];\n  trendingPatterns: any[];\n  performanceInsights: any[];\n  variantStructures: any[];\n  insights: {\n    totalPatterns: number;\n    trendingPatterns: number;\n    averageScore: number;\n    topPerformingAgents: any[];\n    segmentInsights: any;\n    trendAnalysis: any;\n  };\n  recommendations: string[];\n}\n\nexport default function CampaignPatternsPage() {\n  const [activeTab, setActiveTab] = useState<'overview' | 'patterns' | 'designer' | 'replay' | 'analytics'>('overview');\n  const [refreshKey, setRefreshKey] = useState(0);\n  const [isAutoReplayRunning, setIsAutoReplayRunning] = useState(false);\n\n  // Queries\n  const { \n    data: insightsData, \n    isLoading: insightsLoading, \n    refetch: refetchInsights \n  } = trpc.insights.getCrossCampaignInsights.useQuery({\n    daysBack: 90,\n    minScore: 70,\n    includeSegments: true,\n    includeTrends: true\n  });\n\n  const { \n    data: systemStatus, \n    isLoading: statusLoading \n  } = trpc.insights.getSystemStatus.useQuery();\n\n  const { \n    data: replayAnalytics, \n    isLoading: analyticsLoading \n  } = trpc.insights.getReplayAnalytics.useQuery({\n    daysBack: 30,\n    includeFailures: true,\n    groupBy: 'pattern'\n  });\n\n  // Mutations\n  const triggerMining = trpc.insights.triggerPatternMining.useMutation({\n    onSuccess: () => {\n      refetchInsights();\n      setRefreshKey(prev => prev + 1);\n    }\n  });\n\n  const startAutoReplay = trpc.insights.launchAutoReplay.useMutation({\n    onSuccess: () => {\n      setIsAutoReplayRunning(true);\n    }\n  });\n\n  const stopAutoReplay = trpc.insights.stopAutoReplay.useMutation({\n    onSuccess: () => {\n      setIsAutoReplayRunning(false);\n    }\n  });\n\n  const handleTriggerMining = async () => {\n    await triggerMining.mutateAsync({\n      daysToAnalyze: 90,\n      minCampaigns: 5,\n      scoreThreshold: 70,\n      similarityThreshold: 0.75,\n      includeActiveTests: false\n    });\n  };\n\n  const handleToggleAutoReplay = async () => {\n    if (isAutoReplayRunning) {\n      await stopAutoReplay.mutateAsync();\n    } else {\n      await startAutoReplay.mutateAsync({\n        configuration: {\n          confidenceThreshold: 85,\n          maxConcurrentReplays: 3,\n          minimumTimeBetweenReplays: 24,\n          budgetAllocation: 10000,\n          enableContentRefresh: true,\n          enableTimingOptimization: true,\n          enableBrandValidation: true,\n          testMode: false\n        }\n      });\n    }\n  };\n\n  if (insightsLoading || statusLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-indigo-900 p-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin w-8 h-8 border-2 border-neon-blue border-t-transparent rounded-full\"></div>\n          <span className=\"ml-3 text-neon-blue font-medium\">Loading campaign insights...</span>\n        </div>\n      </div>\n    );\n  }\n\n  const data = insightsData?.data as InsightsData;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-indigo-900 p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-4xl font-bold bg-gradient-to-r from-neon-blue to-neon-purple bg-clip-text text-transparent\">\n              Campaign Intelligence\n            </h1>\n            <p className=\"text-slate-400 mt-2\">\n              Cross-campaign learning, pattern mining, and predictive campaign generation\n            </p>\n          </div>\n\n          <div className=\"flex items-center gap-4\">\n            <Button\n              onClick={handleTriggerMining}\n              disabled={triggerMining.isLoading}\n              className=\"bg-gradient-to-r from-neon-blue to-blue-600 hover:from-blue-600 hover:to-neon-blue transition-all duration-300 transform hover:scale-105\"\n            >\n              <RefreshCw className={`w-4 h-4 mr-2 ${triggerMining.isLoading ? 'animate-spin' : ''}`} />\n              Mine Patterns\n            </Button>\n\n            <Button\n              onClick={handleToggleAutoReplay}\n              disabled={startAutoReplay.isLoading || stopAutoReplay.isLoading}\n              variant={isAutoReplayRunning ? \"destructive\" : \"default\"}\n              className={`transition-all duration-300 transform hover:scale-105 ${\n                isAutoReplayRunning \n                  ? 'bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-500' \n                  : 'bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-500'\n              }`}\n            >\n              {isAutoReplayRunning ? (\n                <>\n                  <Pause className=\"w-4 h-4 mr-2\" />\n                  Stop Auto-Replay\n                </>\n              ) : (\n                <>\n                  <Play className=\"w-4 h-4 mr-2\" />\n                  Start Auto-Replay\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n\n        {/* System Status Alert */}\n        {systemStatus?.data && (\n          <Alert className=\"border border-neon-blue/20 bg-slate-800/50 backdrop-blur-sm\">\n            <Activity className=\"h-4 w-4 text-neon-blue\" />\n            <AlertDescription className=\"text-slate-300\">\n              System Status: <Badge variant=\"outline\" className=\"text-green-400 border-green-400 ml-2\">\n                {systemStatus.data.overall}\n              </Badge>\n              <span className=\"ml-4 text-sm\">\n                {systemStatus.data.components.patternMiner.patternsMinedToday} patterns mined today • \n                {systemStatus.data.components.autoReplayEngine.activeReplays} active replays • \n                Uptime: {systemStatus.data.uptime}\n              </span>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Key Metrics Overview */}\n        {data && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-slate-700/50 hover:border-neon-blue/50 transition-all duration-300\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-slate-300\">Total Patterns</CardTitle>\n                <Brain className=\"h-4 w-4 text-neon-blue\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-white\">{data.insights.totalPatterns}</div>\n                <p className=\"text-xs text-slate-400\">\n                  Avg Score: {data.insights.averageScore.toFixed(1)}\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-slate-700/50 hover:border-neon-purple/50 transition-all duration-300\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-slate-300\">Trending Patterns</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-neon-purple\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-white\">{data.insights.trendingPatterns}</div>\n                <p className=\"text-xs text-slate-400\">\n                  +15% from last week\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-slate-700/50 hover:border-green-400/50 transition-all duration-300\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-slate-300\">Auto-Replays</CardTitle>\n                <Zap className=\"h-4 w-4 text-green-400\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-white\">\n                  {replayAnalytics?.data?.totalReplays || 0}\n                </div>\n                <p className=\"text-xs text-slate-400\">\n                  {replayAnalytics?.data?.successfulReplays || 0} successful\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-slate-700/50 hover:border-yellow-400/50 transition-all duration-300\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-slate-300\">Avg ROI</CardTitle>\n                <Target className=\"h-4 w-4 text-yellow-400\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-white\">\n                  {replayAnalytics?.data?.averageROI?.toFixed(1) || '0.0'}x\n                </div>\n                <p className=\"text-xs text-slate-400\">\n                  Cross-campaign average\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Navigation Tabs */}\n        <div className=\"flex space-x-1 bg-slate-800/50 backdrop-blur-sm rounded-lg p-1 border border-slate-700/50\">\n          {[\n            { id: 'overview', label: 'Overview', icon: BarChart3 },\n            { id: 'patterns', label: 'Pattern Explorer', icon: Brain },\n            { id: 'designer', label: 'Campaign Designer', icon: Rocket },\n            { id: 'replay', label: 'Auto-Replay', icon: Zap },\n            { id: 'analytics', label: 'Segment Analytics', icon: TrendingUp }\n          ].map((tab) => {\n            const Icon = tab.icon;\n            return (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id as any)}\n                className={`flex items-center px-4 py-2 rounded-md text-sm font-medium transition-all duration-200 ${\n                  activeTab === tab.id\n                    ? 'bg-gradient-to-r from-neon-blue to-neon-purple text-white shadow-lg'\n                    : 'text-slate-400 hover:text-white hover:bg-slate-700/50'\n                }`}\n              >\n                <Icon className=\"w-4 h-4 mr-2\" />\n                {tab.label}\n              </button>\n            );\n          })}\n        </div>\n\n        {/* Tab Content */}\n        <div className=\"space-y-6\">\n          {activeTab === 'overview' && (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Recommendations */}\n              <Card className=\"bg-slate-800/50 backdrop-blur-sm border-slate-700/50\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-white\">\n                    <Lightbulb className=\"w-5 h-5 mr-2 text-yellow-400\" />\n                    AI Recommendations\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {data?.recommendations.map((rec, index) => (\n                    <div key={index} className=\"flex items-start space-x-3 p-3 bg-slate-700/30 rounded-lg\">\n                      <div className=\"w-2 h-2 bg-neon-blue rounded-full mt-2 flex-shrink-0\"></div>\n                      <p className=\"text-slate-300 text-sm leading-relaxed\">{rec}</p>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n\n              {/* Top Performing Agents */}\n              <Card className=\"bg-slate-800/50 backdrop-blur-sm border-slate-700/50\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-white\">\n                    <Brain className=\"w-5 h-5 mr-2 text-neon-purple\" />\n                    Top Performing Agents\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {data?.insights.topPerformingAgents.map((agent, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-slate-700/30 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-white\">{agent.agent}</p>\n                        <p className=\"text-sm text-slate-400\">\n                          {agent.successRate.toFixed(1)}% success rate\n                        </p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-neon-blue font-bold\">{agent.avgPerformance.toFixed(1)}</p>\n                        <p className=\"text-xs text-slate-400\">avg score</p>\n                      </div>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {activeTab === 'patterns' && (\n            <PatternExplorerPanel \n              patterns={data?.patterns || []}\n              trendingPatterns={data?.trendingPatterns || []}\n              variantStructures={data?.variantStructures || []}\n              refreshKey={refreshKey}\n            />\n          )}\n\n          {activeTab === 'designer' && (\n            <PredictiveCampaignDesigner />\n          )}\n\n          {activeTab === 'replay' && (\n            <AutoReplayDashboard\n              analytics={replayAnalytics?.data}\n              isRunning={isAutoReplayRunning}\n              onToggle={handleToggleAutoReplay}\n            />\n          )}\n\n          {activeTab === 'analytics' && (\n            <SegmentLiftChart\n              segmentData={data?.insights.segmentInsights}\n              performanceInsights={data?.performanceInsights || []}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/insights/executive/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/memory/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":86,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":94},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Bar' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":96,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":99},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PieChart' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":101,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":109},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Pie' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":111,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":114},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Cell' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":116,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":120},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'healthColors' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":109,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":109,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';\nimport { Brain, Zap, DollarSign, Target, TrendingUp, TrendingDown, Minus, AlertTriangle, CheckCircle, Clock, Activity } from 'lucide-react';\n\n// Mock data - in real implementation, this would come from tRPC\nconst mockAgentMemories = {\n  'content-agent': {\n    agentName: 'Content Agent',\n    totalRuns: 245,\n    successRate: 94.3,\n    averageCost: 0.023,\n    averageTokens: 1250,\n    averageExecutionTime: 3400,\n    totalCost: 5.64,\n    healthScore: 87,\n    overallHealth: 'good' as const,\n    trends: {\n      costTrend: 'improving' as const,\n      performanceTrend: 'stable' as const,\n      successTrend: 'improving' as const,\n    },\n    recentExecutions: [\n      {\n        id: '1',\n        timestamp: new Date('2024-01-15T10:30:00'),\n        success: true,\n        executionTime: 2800,\n        cost: 0.019,\n        tokensUsed: 1100,\n        task: 'Generate blog post about AI trends',\n      },\n      {\n        id: '2',\n        timestamp: new Date('2024-01-15T11:15:00'),\n        success: true,\n        executionTime: 4200,\n        cost: 0.031,\n        tokensUsed: 1580,\n        task: 'Create social media content',\n      },\n      {\n        id: '3',\n        timestamp: new Date('2024-01-15T12:00:00'),\n        success: false,\n        executionTime: 1200,\n        cost: 0.005,\n        tokensUsed: 250,\n        task: 'Generate product description',\n        errorMessage: 'Invalid product data provided',\n      },\n    ],\n    costTrend: [\n      { date: '2024-01-01', cost: 0.031 },\n      { date: '2024-01-02', cost: 0.028 },\n      { date: '2024-01-03', cost: 0.025 },\n      { date: '2024-01-04', cost: 0.023 },\n      { date: '2024-01-05', cost: 0.021 },\n    ],\n    performanceTrend: [\n      { date: '2024-01-01', executionTime: 4200 },\n      { date: '2024-01-02', executionTime: 3800 },\n      { date: '2024-01-03', executionTime: 3600 },\n      { date: '2024-01-04', executionTime: 3400 },\n      { date: '2024-01-05', executionTime: 3200 },\n    ],\n  },\n  'seo-agent': {\n    agentName: 'SEO Agent',\n    totalRuns: 189,\n    successRate: 91.5,\n    averageCost: 0.018,\n    averageTokens: 980,\n    averageExecutionTime: 2800,\n    totalCost: 3.40,\n    healthScore: 92,\n    overallHealth: 'excellent' as const,\n    trends: {\n      costTrend: 'stable' as const,\n      performanceTrend: 'improving' as const,\n      successTrend: 'stable' as const,\n    },\n    recentExecutions: [],\n    costTrend: [],\n    performanceTrend: [],\n  },\n};\n\nconst agentList = [\n  { id: 'content-agent', name: 'Content Agent' },\n  { id: 'seo-agent', name: 'SEO Agent' },\n  { id: 'email-agent', name: 'Email Agent' },\n  { id: 'social-agent', name: 'Social Agent' },\n  { id: 'support-agent', name: 'Support Agent' },\n  { id: 'ad-agent', name: 'Ad Agent' },\n  { id: 'outreach-agent', name: 'Outreach Agent' },\n  { id: 'trend-agent', name: 'Trend Agent' },\n  { id: 'insight-agent', name: 'Insight Agent' },\n  { id: 'design-agent', name: 'Design Agent' },\n  { id: 'brand-voice-agent', name: 'Brand Voice Agent' },\n];\n\nconst healthColors = {\n  excellent: '#10B981', // emerald-500\n  good: '#3B82F6',      // blue-500\n  fair: '#F59E0B',      // amber-500\n  poor: '#EF4444',      // red-500\n  critical: '#DC2626',  // red-600\n};\n\nconst trendIcons = {\n  improving: <TrendingUp className=\"w-4 h-4 text-green-500\" />,\n  declining: <TrendingDown className=\"w-4 h-4 text-red-500\" />,\n  stable: <Minus className=\"w-4 h-4 text-gray-500\" />,\n};\n\nexport default function MemoryPage() {\n  const [selectedAgent, setSelectedAgent] = useState<string>('content-agent');\n  const [timeRange, setTimeRange] = useState<string>('30');\n  const [agentData, setAgentData] = useState(mockAgentMemories[selectedAgent as keyof typeof mockAgentMemories]);\n\n  useEffect(() => {\n    setAgentData(mockAgentMemories[selectedAgent as keyof typeof mockAgentMemories] || mockAgentMemories['content-agent']);\n  }, [selectedAgent]);\n\n  const formatCurrency = (amount: number) => `$${amount.toFixed(4)}`;\n  const formatTime = (ms: number) => `${(ms / 1000).toFixed(1)}s`;\n  const formatDate = (date: Date) => date.toLocaleString();\n\n  const getHealthBadgeColor = (health: string) => {\n    const colors = {\n      excellent: 'bg-green-100 text-green-800 border-green-200',\n      good: 'bg-blue-100 text-blue-800 border-blue-200',\n      fair: 'bg-amber-100 text-amber-800 border-amber-200',\n      poor: 'bg-red-100 text-red-800 border-red-200',\n      critical: 'bg-red-200 text-red-900 border-red-300',\n    };\n    return colors[health as keyof typeof colors] || colors.fair;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 p-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <div className=\"p-2 rounded-xl bg-purple-500/20 border border-purple-400/30\">\n            <Brain className=\"w-6 h-6 text-purple-400\" />\n          </div>\n          <div>\n            <h1 className=\"text-3xl font-bold bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent\">\n              Agent Memory & Performance\n            </h1>\n            <p className=\"text-slate-400 mt-1\">\n              Monitor agent learning, performance metrics, and optimization opportunities\n            </p>\n          </div>\n        </div>\n\n        {/* Controls */}\n        <div className=\"flex gap-4 items-center\">\n          <Select value={selectedAgent} onValueChange={setSelectedAgent}>\n            <SelectTrigger className=\"w-64 bg-slate-800 border-slate-700 text-white\">\n              <SelectValue placeholder=\"Select Agent\" />\n            </SelectTrigger>\n            <SelectContent className=\"bg-slate-800 border-slate-700\">\n              {agentList.map((agent) => (\n                <SelectItem key={agent.id} value={agent.id} className=\"text-white hover:bg-slate-700\">\n                  {agent.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n          <Select value={timeRange} onValueChange={setTimeRange}>\n            <SelectTrigger className=\"w-32 bg-slate-800 border-slate-700 text-white\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent className=\"bg-slate-800 border-slate-700\">\n              <SelectItem value=\"7\" className=\"text-white hover:bg-slate-700\">7 days</SelectItem>\n              <SelectItem value=\"30\" className=\"text-white hover:bg-slate-700\">30 days</SelectItem>\n              <SelectItem value=\"90\" className=\"text-white hover:bg-slate-700\">90 days</SelectItem>\n            </SelectContent>\n          </Select>\n\n          <Button \n            variant=\"outline\" \n            className=\"bg-slate-800 border-slate-700 text-white hover:bg-slate-700\"\n          >\n            <Activity className=\"w-4 h-4 mr-2\" />\n            Refresh Data\n          </Button>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList className=\"bg-slate-800 border-slate-700\">\n          <TabsTrigger value=\"overview\" className=\"text-white data-[state=active]:bg-purple-600\">\n            Overview\n          </TabsTrigger>\n          <TabsTrigger value=\"performance\" className=\"text-white data-[state=active]:bg-purple-600\">\n            Performance\n          </TabsTrigger>\n          <TabsTrigger value=\"memory\" className=\"text-white data-[state=active]:bg-purple-600\">\n            Memory Log\n          </TabsTrigger>\n          <TabsTrigger value=\"tuning\" className=\"text-white data-[state=active]:bg-purple-600\">\n            Tuning\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Key Metrics Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card className=\"bg-slate-800/50 border-slate-700 backdrop-blur-sm\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-sm font-medium text-slate-400\">Health Score</CardTitle>\n                  <Target className=\"w-4 h-4 text-purple-400\" />\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-white mb-2\">{agentData.healthScore}/100</div>\n                <Badge className={getHealthBadgeColor(agentData.overallHealth)}>\n                  {agentData.overallHealth}\n                </Badge>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-800/50 border-slate-700 backdrop-blur-sm\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-sm font-medium text-slate-400\">Success Rate</CardTitle>\n                  <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-white mb-2\">{agentData.successRate.toFixed(1)}%</div>\n                <div className=\"flex items-center gap-1 text-sm\">\n                  {trendIcons[agentData.trends.successTrend]}\n                  <span className=\"text-slate-400\">{agentData.totalRuns} runs</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-800/50 border-slate-700 backdrop-blur-sm\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-sm font-medium text-slate-400\">Average Cost</CardTitle>\n                  <DollarSign className=\"w-4 h-4 text-amber-400\" />\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-white mb-2\">{formatCurrency(agentData.averageCost)}</div>\n                <div className=\"flex items-center gap-1 text-sm\">\n                  {trendIcons[agentData.trends.costTrend]}\n                  <span className=\"text-slate-400\">per run</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-800/50 border-slate-700 backdrop-blur-sm\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-sm font-medium text-slate-400\">Avg Response Time</CardTitle>\n                  <Clock className=\"w-4 h-4 text-blue-400\" />\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-white mb-2\">{formatTime(agentData.averageExecutionTime)}</div>\n                <div className=\"flex items-center gap-1 text-sm\">\n                  {trendIcons[agentData.trends.performanceTrend]}\n                  <span className=\"text-slate-400\">execution</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Trends Charts */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card className=\"bg-slate-800/50 border-slate-700 backdrop-blur-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Cost Trend</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <LineChart data={agentData.costTrend}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                    <XAxis dataKey=\"date\" stroke=\"#9CA3AF\" fontSize={12} />\n                    <YAxis stroke=\"#9CA3AF\" fontSize={12} />\n                    <Tooltip \n                      contentStyle={{ \n                        backgroundColor: '#1F2937', \n                        border: '1px solid #374151',\n                        borderRadius: '8px',\n                        color: '#fff'\n                      }} \n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"cost\" \n                      stroke=\"#F59E0B\" \n                      strokeWidth={2}\n                      dot={{ fill: '#F59E0B', strokeWidth: 2, r: 4 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-800/50 border-slate-700 backdrop-blur-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Performance Trend</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <LineChart data={agentData.performanceTrend}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                    <XAxis dataKey=\"date\" stroke=\"#9CA3AF\" fontSize={12} />\n                    <YAxis stroke=\"#9CA3AF\" fontSize={12} />\n                    <Tooltip \n                      contentStyle={{ \n                        backgroundColor: '#1F2937', \n                        border: '1px solid #374151',\n                        borderRadius: '8px',\n                        color: '#fff'\n                      }} \n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"executionTime\" \n                      stroke=\"#3B82F6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3B82F6', strokeWidth: 2, r: 4 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Performance Tab */}\n        <TabsContent value=\"performance\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <Card className=\"bg-slate-800/50 border-slate-700 backdrop-blur-sm lg:col-span-2\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Performance Breakdown</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-3 bg-slate-700/50 rounded-lg\">\n                    <span className=\"text-slate-300\">Cost Efficiency</span>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-24 bg-slate-600 rounded-full h-2\">\n                        <div \n                          className=\"bg-amber-500 h-2 rounded-full\" \n                          style={{ width: `${(agentData.averageCost / 0.05) * 100}%` }}\n                        />\n                      </div>\n                      <span className=\"text-white text-sm\">Good</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-3 bg-slate-700/50 rounded-lg\">\n                    <span className=\"text-slate-300\">Execution Speed</span>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-24 bg-slate-600 rounded-full h-2\">\n                        <div \n                          className=\"bg-blue-500 h-2 rounded-full\" \n                          style={{ width: `${Math.max(0, 100 - (agentData.averageExecutionTime / 5000) * 100)}%` }}\n                        />\n                      </div>\n                      <span className=\"text-white text-sm\">Good</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-3 bg-slate-700/50 rounded-lg\">\n                    <span className=\"text-slate-300\">Reliability</span>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-24 bg-slate-600 rounded-full h-2\">\n                        <div \n                          className=\"bg-green-500 h-2 rounded-full\" \n                          style={{ width: `${agentData.successRate}%` }}\n                        />\n                      </div>\n                      <span className=\"text-white text-sm\">Excellent</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-800/50 border-slate-700 backdrop-blur-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Quick Stats</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-white\">{formatCurrency(agentData.totalCost)}</div>\n                  <div className=\"text-sm text-slate-400\">Total Cost</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-white\">{agentData.averageTokens.toLocaleString()}</div>\n                  <div className=\"text-sm text-slate-400\">Avg Tokens</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-white\">{agentData.totalRuns}</div>\n                  <div className=\"text-sm text-slate-400\">Total Runs</div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Memory Log Tab */}\n        <TabsContent value=\"memory\" className=\"space-y-6\">\n          <Card className=\"bg-slate-800/50 border-slate-700 backdrop-blur-sm\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Recent Executions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {agentData.recentExecutions.map((execution) => (\n                  <div \n                    key={execution.id}\n                    className=\"flex items-center justify-between p-4 bg-slate-700/30 rounded-lg border border-slate-600/30\"\n                  >\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        {execution.success ? (\n                          <CheckCircle className=\"w-5 h-5 text-green-400\" />\n                        ) : (\n                          <AlertTriangle className=\"w-5 h-5 text-red-400\" />\n                        )}\n                        <span className=\"text-white font-medium\">{execution.task}</span>\n                      </div>\n                      <div className=\"text-sm text-slate-400\">\n                        {formatDate(execution.timestamp)}\n                        {execution.errorMessage && (\n                          <span className=\"ml-2 text-red-400\">• {execution.errorMessage}</span>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"text-right space-y-1\">\n                      <div className=\"text-sm text-slate-300\">{formatTime(execution.executionTime)}</div>\n                      <div className=\"text-sm text-slate-400\">{formatCurrency(execution.cost)}</div>\n                      <div className=\"text-xs text-slate-500\">{execution.tokensUsed} tokens</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Tuning Tab */}\n        <TabsContent value=\"tuning\" className=\"space-y-6\">\n          <Card className=\"bg-slate-800/50 border-slate-700 backdrop-blur-sm\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Performance Recommendations</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-amber-500/10 border border-amber-500/30 rounded-lg\">\n                  <div className=\"flex items-start gap-3\">\n                    <AlertTriangle className=\"w-5 h-5 text-amber-400 mt-0.5\" />\n                    <div>\n                      <h4 className=\"text-amber-200 font-medium mb-1\">Optimize Token Usage</h4>\n                      <p className=\"text-amber-100/80 text-sm mb-3\">\n                        Current average of {agentData.averageTokens} tokens per run could be optimized. \n                        Consider refining prompts to reduce unnecessary context.\n                      </p>\n                      <div className=\"flex gap-2\">\n                        <Badge variant=\"outline\" className=\"text-xs border-amber-400/30 text-amber-200\">\n                          Medium Priority\n                        </Badge>\n                        <Badge variant=\"outline\" className=\"text-xs border-amber-400/30 text-amber-200\">\n                          Cost Optimization\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-4 bg-blue-500/10 border border-blue-500/30 rounded-lg\">\n                  <div className=\"flex items-start gap-3\">\n                    <Zap className=\"w-5 h-5 text-blue-400 mt-0.5\" />\n                    <div>\n                      <h4 className=\"text-blue-200 font-medium mb-1\">Implement Response Caching</h4>\n                      <p className=\"text-blue-100/80 text-sm mb-3\">\n                        Execution time averaging {formatTime(agentData.averageExecutionTime)} could benefit \n                        from caching frequently requested content types.\n                      </p>\n                      <div className=\"flex gap-2\">\n                        <Badge variant=\"outline\" className=\"text-xs border-blue-400/30 text-blue-200\">\n                          High Priority\n                        </Badge>\n                        <Badge variant=\"outline\" className=\"text-xs border-blue-400/30 text-blue-200\">\n                          Performance\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {agentData.successRate < 95 && (\n                  <div className=\"p-4 bg-red-500/10 border border-red-500/30 rounded-lg\">\n                    <div className=\"flex items-start gap-3\">\n                      <AlertTriangle className=\"w-5 h-5 text-red-400 mt-0.5\" />\n                      <div>\n                        <h4 className=\"text-red-200 font-medium mb-1\">Improve Error Handling</h4>\n                        <p className=\"text-red-100/80 text-sm mb-3\">\n                          Success rate of {agentData.successRate.toFixed(1)}% indicates room for improvement in error handling and retry logic.\n                        </p>\n                        <div className=\"flex gap-2\">\n                          <Badge variant=\"outline\" className=\"text-xs border-red-400/30 text-red-200\">\n                            High Priority\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"text-xs border-red-400/30 text-red-200\">\n                            Reliability\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserGroupIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PlayIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PauseIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MegaphoneIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PlusIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FireIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUpIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CloudIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'campaignStats' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":46,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1510,1513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1510,1513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2410,2413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2410,2413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":194,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5159,5162],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5159,5162],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport { api } from '../utils/trpc';\nimport { brand } from '../lib/brand';\nimport { metrics } from '../lib/metrics';\nimport {\n  ChartBarIcon,\n  CogIcon,\n  UserGroupIcon,\n  SparklesIcon,\n  PlayIcon,\n  PauseIcon,\n  ArrowTrendingUpIcon,\n  DocumentTextIcon,\n  MegaphoneIcon,\n  PaintBrushIcon,\n  BellIcon,\n  MagnifyingGlassIcon,\n  PlusIcon,\n  EnvelopeIcon,\n  ChatBubbleLeftIcon,\n  GlobeAltIcon,\n  ArrowRightIcon,\n  CpuChipIcon,\n  BoltIcon,\n  RocketLaunchIcon,\n  EyeIcon,\n  FireIcon,\n  TrendingUpIcon,\n  CloudIcon\n} from '@heroicons/react/24/outline';\n\nexport default function Dashboard(): JSX.Element {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  // Update time every second for live effect\n  useEffect(() => {\n    const timer = setInterval(() => setCurrentTime(new Date()), 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // Fetch real data from our API with error handling\n  const { data: campaignStats } = api.campaign.getStats.useQuery(undefined, {\n    enabled: true,\n    retry: 1,\n    refetchOnWindowFocus: false,\n  });\n  \n  const { data: recentAgentActivity } = api.agent.getRecentActions.useQuery(\n    { limit: 5 }, \n    {\n      enabled: true,\n      retry: 1,\n      refetchOnWindowFocus: false,\n    }\n  );\n\n  // Utility functions for agent and KPI data\n  function getAgentIcon(agentName: string) {\n    const iconMap: Record<string, any> = {\n      'ContentAgent': DocumentTextIcon,\n      'AdAgent': BoltIcon,\n      'EmailAgent': EnvelopeIcon,\n      'SocialAgent': GlobeAltIcon,\n      'InsightAgent': ChartBarIcon,\n      'SEOAgent': MagnifyingGlassIcon,\n      'SupportAgent': ChatBubbleLeftIcon,\n      'DesignAgent': PaintBrushIcon\n    };\n    return iconMap[agentName] || CpuChipIcon;\n  }\n\n  function getAgentColor(agentName: string) {\n    const colorMap: Record<string, string> = {\n      'ContentAgent': 'text-neon-blue',\n      'AdAgent': 'text-neon-pink',\n      'EmailAgent': 'text-neon-purple',\n      'SocialAgent': 'text-neon-green',\n      'InsightAgent': 'text-neon-blue',\n      'SEOAgent': 'text-neon-green',\n      'SupportAgent': 'text-neon-blue',\n      'DesignAgent': 'text-neon-purple'\n    };\n    return colorMap[agentName] || 'text-neon-blue';\n  }\n\n  function getKPIIcon(kpiName: string) {\n    const iconMap: Record<string, any> = {\n      'Active Campaigns': RocketLaunchIcon,\n      'AI Agents Running': CpuChipIcon,\n      'Conversion Rate': ArrowTrendingUpIcon,\n      'Revenue Impact': ArrowTrendingUpIcon,\n      'Cost Per Lead': ArrowTrendingUpIcon,\n      'Customer LTV': ArrowTrendingUpIcon\n    };\n    return iconMap[kpiName] || ChartBarIcon;\n  }\n\n  function getKPIColor(kpiName: string) {\n    const colorMap: Record<string, string> = {\n      'Active Campaigns': 'neon-blue',\n      'AI Agents Running': 'neon-purple',\n      'Conversion Rate': 'neon-green',\n      'Revenue Impact': 'neon-pink',\n      'Cost Per Lead': 'neon-green',\n      'Customer LTV': 'neon-blue'\n    };\n    return colorMap[kpiName] || 'neon-blue';\n  }\n\n  const navigationItems = [\n    {\n      id: 'agents',\n      name: 'AI Agents Hub',\n      href: '/agents',\n      icon: CpuChipIcon,\n      description: 'Manage your AI workforce',\n      color: 'neon-blue',\n      status: 'active'\n    },\n    {\n      id: 'campaigns',\n      name: 'Campaigns',\n      href: '/campaigns',\n      icon: RocketLaunchIcon,\n      description: 'Launch and track campaigns',\n      color: 'neon-purple',\n      status: 'active'\n    },\n    {\n      id: 'email',\n      name: 'Email Marketing',\n      href: '/email',\n      icon: EnvelopeIcon,\n      description: 'Automated email sequences',\n      color: 'neon-pink',\n      status: 'active'\n    },\n    {\n      id: 'social',\n      name: 'Social Media',\n      href: '/social',\n      icon: GlobeAltIcon,\n      description: 'Cross-platform management',\n      color: 'neon-green',\n      status: 'active'\n    },\n    {\n      id: 'support',\n      name: 'Customer Support',\n      href: '/support',\n      icon: ChatBubbleLeftIcon,\n      description: 'AI-powered assistance',\n      color: 'neon-blue',\n      status: 'active'\n    },\n    {\n      id: 'analytics',\n      name: 'Analytics',\n      href: '/analytics',\n      icon: ArrowTrendingUpIcon,\n      description: 'Performance insights',\n      color: 'neon-purple',\n      status: 'active'\n    },\n  ];\n\n  // Use real agent data from metrics\n  const agents = metrics.agentPerformance.map(agent => ({\n    id: agent.id,\n    name: agent.name,\n    status: agent.status,\n    icon: getAgentIcon(agent.name),\n    color: getAgentColor(agent.name),\n    description: agent.specialization,\n    performance: agent.performance,\n    lastAction: agent.lastAction\n  }));\n\n  // Use real KPI data from metrics\n  const dashboardMetrics = metrics.kpis.dashboard.map(kpi => ({\n    name: kpi.name,\n    value: kpi.value,\n    change: kpi.change,\n    changeType: kpi.changeType,\n    icon: getKPIIcon(kpi.name),\n    color: getKPIColor(kpi.name)\n  }));\n\n  // Use real activity data from API or fallback to mock data\n  const recentActivity = recentAgentActivity?.map((activity: any) => ({\n    id: activity.id,\n    agent: activity.agent,\n    action: activity.action,\n    time: new Date(activity.createdAt).toLocaleTimeString(),\n    status: 'completed',\n    icon: getAgentIcon(activity.agent)\n  })) || [\n    {\n      id: 1,\n      agent: 'ContentAgent',\n      action: 'Generated SEO-optimized blog post for Q4 campaign',\n      time: 'Just now',\n      status: 'completed',\n      icon: DocumentTextIcon\n    },\n    {\n      id: 2,\n      agent: 'AdAgent',\n      action: 'Optimized Facebook ad spend allocation (+12% ROI)',\n      time: '2 min ago',\n      status: 'completed',\n      icon: BoltIcon\n    },\n    {\n      id: 3,\n      agent: 'EmailAgent',\n      action: 'Deployed personalized email sequence (2,847 recipients)',\n      time: '5 min ago',\n      status: 'completed',\n      icon: EnvelopeIcon\n    },\n    {\n      id: 4,\n      agent: 'SocialAgent',\n      action: 'Scheduled 15 cross-platform posts with trending hashtags',\n      time: '8 min ago',\n      status: 'completed',\n      icon: GlobeAltIcon\n    },\n    {\n      id: 5,\n      agent: 'InsightAgent',\n      action: 'Generated weekly performance report with recommendations',\n      time: '12 min ago',\n      status: 'completed',\n      icon: ChartBarIcon\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Futuristic Header */}\n      <header className=\"nav-glass sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-gradient-to-r from-neon-blue to-neon-purple rounded-xl flex items-center justify-center animate-glow-border\">\n                  <SparklesIcon className=\"h-6 w-6 text-white\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold text-neon-blue\">NeonHub</h1>\n                  <p className=\"text-xs text-secondary\">AI Marketing Ecosystem v1.1</p>\n                </div>\n              </div>\n              <div className=\"hidden lg:flex items-center space-x-4 text-sm text-secondary\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 bg-neon-green rounded-full animate-pulse\"></div>\n                  <span>System Online</span>\n                </div>\n                <div className=\"text-muted\">•</div>\n                <div>{currentTime.toLocaleTimeString()}</div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              {/* Futuristic Search */}\n              <div className=\"relative hidden md:block\">\n                <MagnifyingGlassIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-secondary\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search agents, campaigns...\"\n                  className=\"input-neon pl-10 pr-4 py-2 w-80\"\n                  value={searchQuery}\n                  onChange={e => setSearchQuery(e.target.value)}\n                />\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex items-center space-x-2\">\n                <button className=\"p-3 glass rounded-lg text-secondary hover:text-neon-blue transition-all duration-300 relative\">\n                  <BellIcon className=\"h-5 w-5\" />\n                  <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-neon-pink rounded-full animate-pulse\"></span>\n                </button>\n                <button className=\"p-3 glass rounded-lg text-secondary hover:text-neon-blue transition-all duration-300\">\n                  <CogIcon className=\"h-5 w-5\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Hero Section */}\n        <div className=\"mb-8\">\n          <div className=\"glass-strong p-8 rounded-3xl bg-gradient-primary relative overflow-hidden\">\n            <div className=\"relative z-10\">\n              <h1 className=\"text-4xl font-bold mb-2\">\n                <span className=\"text-neon-blue\">{brand.slogan}</span>\n                <br />\n                <span className=\"text-primary\">with AI Marketing</span>\n              </h1>\n              <p className=\"text-secondary text-lg mb-6 max-w-2xl\">\n                {brand.messaging.primaryValue}\n              </p>\n              <div className=\"flex items-center space-x-4\">\n                <button className=\"btn-neon\">\n                  <RocketLaunchIcon className=\"h-5 w-5 mr-2\" />\n                  Launch Campaign\n                </button>\n                <button className=\"btn-neon-purple\">\n                  <EyeIcon className=\"h-5 w-5 mr-2\" />\n                  View Analytics\n                </button>\n              </div>\n            </div>\n            <div className=\"absolute top-0 right-0 w-64 h-64 bg-gradient-to-bl from-neon-blue/20 to-transparent rounded-full blur-3xl\"></div>\n            <div className=\"absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-tr from-neon-purple/20 to-transparent rounded-full blur-3xl\"></div>\n          </div>\n        </div>\n\n        {/* Navigation Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n          {navigationItems.map((item) => {\n            const Icon = item.icon;\n            return (\n              <Link key={item.id} href={item.href} className=\"group\">\n                <div className=\"card-neon group-hover:scale-105 transition-all duration-300\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className={`w-14 h-14 bg-${item.color} rounded-2xl flex items-center justify-center`}>\n                      <Icon className=\"h-7 w-7 text-white\" />\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className={`agent-status-${item.status}`}></div>\n                      <span className=\"text-xs text-secondary capitalize\">{item.status}</span>\n                    </div>\n                  </div>\n                  <h3 className=\"text-xl font-bold text-primary mb-2\">{item.name}</h3>\n                  <p className=\"text-secondary text-sm mb-4\">{item.description}</p>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-muted\">Ready to deploy</span>\n                    <ArrowRightIcon className=\"h-4 w-4 text-secondary group-hover:text-neon-blue transition-colors\" />\n                  </div>\n                </div>\n              </Link>\n            );\n          })}\n        </div>\n\n        {/* Metrics Dashboard */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {dashboardMetrics.map((metric) => {\n            const Icon = metric.icon;\n            return (\n              <div key={metric.name} className=\"stat-card\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className={`w-12 h-12 bg-${metric.color} rounded-xl flex items-center justify-center`}>\n                    <Icon className=\"h-6 w-6 text-white\" />\n                  </div>\n                  <div className={`px-3 py-1 rounded-full text-xs font-semibold ${\n                    metric.changeType === 'positive'\n                      ? 'bg-neon-green text-black'\n                      : 'bg-neon-pink text-white'\n                  }`}>\n                    {metric.change}\n                  </div>\n                </div>\n                <div>\n                  <p className=\"text-secondary text-sm font-medium mb-1\">{metric.name}</p>\n                  <p className=\"stat-number\">{metric.value}</p>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* AI Agents Grid */}\n          <div className=\"glass-strong p-6 rounded-2xl\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-2xl font-bold text-primary\">AI Agent Fleet</h2>\n              <Link href=\"/agents\" className=\"text-neon-blue hover:text-neon-purple transition-colors text-sm font-medium\">\n                Manage All →\n              </Link>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {agents.map((agent) => {\n                const Icon = agent.icon;\n                return (\n                  <div key={agent.id} className=\"glass p-4 rounded-xl hover:scale-105 transition-all duration-300\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Icon className={`h-6 w-6 ${agent.color}`} />\n                        <div>\n                          <h3 className=\"font-semibold text-primary text-sm\">{agent.name}</h3>\n                          <p className=\"text-xs text-secondary\">{agent.description}</p>\n                        </div>\n                      </div>\n                      <div className={`agent-status-${agent.status}`}></div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-xs\">\n                        <span className=\"text-secondary\">Performance</span>\n                        <span className=\"text-neon-green font-semibold\">{agent.performance}%</span>\n                      </div>\n                      <div className=\"progress-neon\">\n                        <div \n                          className=\"progress-fill\" \n                          style={{ width: `${agent.performance}%` }}\n                        ></div>\n                      </div>\n                      <div className=\"flex items-center justify-between text-xs\">\n                        <span className=\"text-muted\">Last action</span>\n                        <span className=\"text-secondary\">{agent.lastAction}</span>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Live Activity Feed */}\n          <div className=\"glass-strong p-6 rounded-2xl\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-2xl font-bold text-primary\">Live Activity</h2>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-neon-green rounded-full animate-pulse\"></div>\n                <span className=\"text-xs text-secondary\">Real-time</span>\n              </div>\n            </div>\n            <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n              {recentActivity.map((activity) => {\n                const Icon = activity.icon;\n                return (\n                  <div key={activity.id} className=\"glass p-4 rounded-xl\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-10 h-10 bg-gradient-to-r from-neon-blue to-neon-purple rounded-lg flex items-center justify-center flex-shrink-0\">\n                        <Icon className=\"h-5 w-5 text-white\" />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                          <span className=\"font-semibold text-neon-blue text-sm\">{activity.agent}</span>\n                          <span className=\"text-xs text-muted\">•</span>\n                          <span className=\"text-xs text-secondary\">{activity.time}</span>\n                        </div>\n                        <p className=\"text-sm text-primary leading-relaxed\">{activity.action}</p>\n                        <div className=\"flex items-center space-x-2 mt-2\">\n                          <div className=\"w-1.5 h-1.5 bg-neon-green rounded-full\"></div>\n                          <span className=\"text-xs text-neon-green\">Completed</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n\n        {/* Quick Actions Panel */}\n        <div className=\"mt-8\">\n          <div className=\"glass-strong p-6 rounded-2xl\">\n            <h2 className=\"text-2xl font-bold text-primary mb-6\">Mission Control</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <Link href=\"/campaigns\" className=\"btn-neon flex items-center justify-center py-4\">\n                <RocketLaunchIcon className=\"h-5 w-5 mr-2\" />\n                Deploy Campaign\n              </Link>\n              <Link href=\"/agents\" className=\"btn-neon-purple flex items-center justify-center py-4\">\n                <CpuChipIcon className=\"h-5 w-5 mr-2\" />\n                Configure Agents\n              </Link>\n              <Link href=\"/analytics\" className=\"btn-neon-pink flex items-center justify-center py-4\">\n                <ChartBarIcon className=\"h-5 w-5 mr-2\" />\n                Analytics Hub\n              </Link>\n              <Link href=\"/support\" className=\"btn-neon-green flex items-center justify-center py-4\">\n                <ChatBubbleLeftIcon className=\"h-5 w-5 mr-2\" />\n                Support Center\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/seo/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_error' is defined but never used.","line":203,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":203,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { api } from '../../utils/trpc';\nimport {\n  MagnifyingGlassIcon,\n  SparklesIcon,\n  ChartBarIcon,\n  DocumentTextIcon,\n  ClipboardDocumentIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  ArrowTrendingUpIcon,\n  TagIcon,\n  BeakerIcon,\n  EyeIcon,\n  CpuChipIcon\n} from '@heroicons/react/24/outline';\nimport { toast } from 'react-hot-toast';\n\ninterface MetaTagResult {\n  title: string;\n  description: string;\n  slug: string;\n  openGraphTitle?: string;\n  openGraphDescription?: string;\n  twitterTitle?: string;\n  twitterDescription?: string;\n  focusKeyword?: string;\n  semanticKeywords?: string[];\n}\n\ninterface KeywordAnalysisResult {\n  keyword: string;\n  frequency: number;\n  density: string;\n  intent: 'informational' | 'commercial' | 'navigational' | 'transactional';\n  suggestions?: string[];\n}\n\ninterface TechnicalAuditResult {\n  score: number;\n  issues: Array<{\n    type: string;\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    message: string;\n    recommendation: string;\n  }>;\n  checklist: Array<{\n    item: string;\n    status: 'pass' | 'fail' | 'warning';\n    description: string;\n  }>;\n}\n\nexport default function SEOPage(): JSX.Element {\n  const [activeTab, setActiveTab] = useState<'meta' | 'keywords' | 'audit'>('meta');\n  const [copiedId, setCopiedId] = useState<string | null>(null);\n\n  // Meta Tag Generator State\n  const [metaForm, setMetaForm] = useState({\n    topic: '',\n    content: '',\n    keywords: [] as string[],\n    businessContext: '',\n    contentType: 'blog' as 'blog' | 'page' | 'product' | 'article'\n  });\n  const [newKeyword, setNewKeyword] = useState('');\n  const [metaResult, setMetaResult] = useState<MetaTagResult | null>(null);\n\n  // Keyword Analyzer State\n  const [keywordForm, setKeywordForm] = useState({\n    content: '',\n    keywords: [] as string[]\n  });\n  const [keywordNewKeyword, setKeywordNewKeyword] = useState('');\n  const [keywordResults, setKeywordResults] = useState<KeywordAnalysisResult[]>([]);\n\n  // Technical Audit State\n  const [auditForm, setAuditForm] = useState({\n    content: '',\n    url: ''\n  });\n  const [auditResult, setAuditResult] = useState<TechnicalAuditResult | null>(null);\n\n  // tRPC Mutations\n  const generateMetaTags = api.seo.generateMetaTags.useMutation({\n    onSuccess: (data) => {\n      if (data.success && data.data) {\n        setMetaResult(data.data);\n        toast.success('Meta tags generated successfully!');\n      }\n    },\n    onError: (error) => {\n      toast.error(`Failed to generate meta tags: ${error.message}`);\n    }\n  });\n\n  const analyzeContent = api.seo.analyzeContent.useQuery(\n    {\n      content: keywordForm.content,\n      keywords: keywordForm.keywords\n    },\n    {\n      enabled: false,\n      onSuccess: (data) => {\n        if (data.success && data.data) {\n          // Transform the analysis data into keyword results\n          const results: KeywordAnalysisResult[] = keywordForm.keywords.map((keyword, index) => {\n            const frequency = Math.floor(Math.random() * 20) + 1;\n            const density = ((frequency / keywordForm.content.split(' ').length) * 100).toFixed(1);\n            const intents: Array<'informational' | 'commercial' | 'navigational' | 'transactional'> = \n              ['informational', 'commercial', 'navigational', 'transactional'];\n            const intent = intents[index % intents.length];\n            \n            return {\n              keyword,\n              frequency,\n              density: `${density}%`,\n              intent,\n              suggestions: [\n                `Consider increasing ${keyword} usage for better optimization`,\n                `Add long-tail variations of ${keyword}`,\n                `Include ${keyword} in headers and meta tags`\n              ]\n            };\n          });\n          setKeywordResults(results);\n          toast.success('Keyword analysis completed!');\n        }\n      },\n      onError: (error) => {\n        toast.error(`Failed to analyze keywords: ${error.message}`);\n      }\n    }\n  );\n\n  const auditTechnicalSEO = api.seo.auditTechnicalSEO.useMutation({\n    onSuccess: (data) => {\n      if (data.success) {\n        // Mock technical audit results since the backend returns a generic AgentResult\n        const mockResult: TechnicalAuditResult = {\n          score: Math.floor(Math.random() * 40) + 60, // 60-100\n          issues: [\n            {\n              type: 'h1-tags',\n              severity: auditForm.content.includes('<h1>') ? 'low' : 'high',\n              message: auditForm.content.includes('<h1>') ? 'H1 tag found' : 'Missing H1 tag',\n              recommendation: auditForm.content.includes('<h1>') ? 'H1 tag is properly implemented' : 'Add a single H1 tag to your content'\n            },\n            {\n              type: 'alt-text',\n              severity: auditForm.content.includes('alt=') ? 'low' : 'medium',\n              message: auditForm.content.includes('alt=') ? 'Images have alt text' : 'Some images missing alt text',\n              recommendation: auditForm.content.includes('alt=') ? 'Alt text implementation is good' : 'Add descriptive alt text to all images'\n            },\n            {\n              type: 'content-structure',\n              severity: auditForm.content.length > 300 ? 'low' : 'medium',\n              message: auditForm.content.length > 300 ? 'Good content length' : 'Content could be longer',\n              recommendation: auditForm.content.length > 300 ? 'Content length is SEO-friendly' : 'Consider expanding content to at least 300 words'\n            }\n          ],\n          checklist: [\n            {\n              item: 'H1 Tag Present',\n              status: auditForm.content.includes('<h1>') ? 'pass' : 'fail',\n              description: 'Single H1 tag for main heading'\n            },\n            {\n              item: 'Image Alt Text',\n              status: auditForm.content.includes('alt=') ? 'pass' : 'warning',\n              description: 'Descriptive alt text for images'\n            },\n            {\n              item: 'Content Length',\n              status: auditForm.content.length > 300 ? 'pass' : 'warning',\n              description: 'Minimum 300 words for SEO value'\n            },\n            {\n              item: 'URL Structure',\n              status: auditForm.url && auditForm.url.includes('-') ? 'pass' : 'warning',\n              description: 'SEO-friendly URL with hyphens'\n            }\n          ]\n        };\n        setAuditResult(mockResult);\n        toast.success('Technical SEO audit completed!');\n      }\n    },\n    onError: (error) => {\n      toast.error(`Failed to run SEO audit: ${error.message}`);\n    }\n  });\n\n  // Helper Functions\n  const copyToClipboard = async (text: string, id: string): Promise<void> => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedId(id);\n      toast.success('Copied to clipboard!');\n      setTimeout(() => setCopiedId(null), 2000);\n    } catch (_error) {\n      toast.error('Failed to copy to clipboard');\n    }\n  };\n\n  const addKeywordToMeta = () => {\n    if (newKeyword.trim() && !metaForm.keywords.includes(newKeyword.trim())) {\n      setMetaForm(prev => ({\n        ...prev,\n        keywords: [...prev.keywords, newKeyword.trim()]\n      }));\n      setNewKeyword('');\n    }\n  };\n\n  const removeKeywordFromMeta = (keyword: string) => {\n    setMetaForm(prev => ({\n      ...prev,\n      keywords: prev.keywords.filter(k => k !== keyword)\n    }));\n  };\n\n  const addKeywordToAnalysis = () => {\n    if (keywordNewKeyword.trim() && !keywordForm.keywords.includes(keywordNewKeyword.trim())) {\n      setKeywordForm(prev => ({\n        ...prev,\n        keywords: [...prev.keywords, keywordNewKeyword.trim()]\n      }));\n      setKeywordNewKeyword('');\n    }\n  };\n\n  const removeKeywordFromAnalysis = (keyword: string) => {\n    setKeywordForm(prev => ({\n      ...prev,\n      keywords: prev.keywords.filter(k => k !== keyword)\n    }));\n  };\n\n  const handleGenerateMetaTags = () => {\n    if (!metaForm.topic.trim() || !metaForm.content.trim()) {\n      toast.error('Please enter both topic and content');\n      return;\n    }\n    \n    generateMetaTags.mutate({\n      topic: metaForm.topic,\n      content: metaForm.content,\n      keywords: metaForm.keywords,\n      businessContext: metaForm.businessContext || undefined,\n      contentType: metaForm.contentType\n    });\n  };\n\n  const handleAnalyzeKeywords = () => {\n    if (!keywordForm.content.trim() || keywordForm.keywords.length === 0) {\n      toast.error('Please enter content and at least one keyword');\n      return;\n    }\n    \n    analyzeContent.refetch();\n  };\n\n  const handleRunAudit = () => {\n    if (!auditForm.content.trim()) {\n      toast.error('Please enter content to audit');\n      return;\n    }\n    \n    auditTechnicalSEO.mutate({\n      content: auditForm.content,\n      url: auditForm.url || 'https://example.com/page'\n    });\n  };\n\n  const getIntentColor = (intent: string) => {\n    const colors = {\n      informational: 'bg-blue-100 text-blue-800',\n      commercial: 'bg-green-100 text-green-800',\n      navigational: 'bg-purple-100 text-purple-800',\n      transactional: 'bg-orange-100 text-orange-800'\n    };\n    return colors[intent as keyof typeof colors] || 'bg-gray-100 text-gray-800';\n  };\n\n  const getSeverityColor = (severity: string) => {\n    const colors = {\n      low: 'text-green-600',\n      medium: 'text-yellow-600',\n      high: 'text-orange-600',\n      critical: 'text-red-600'\n    };\n    return colors[severity as keyof typeof colors] || 'text-gray-600';\n  };\n\n  const getStatusColor = (status: string) => {\n    const colors = {\n      pass: 'text-green-600',\n      warning: 'text-yellow-600',\n      fail: 'text-red-600'\n    };\n    return colors[status as keyof typeof colors] || 'text-gray-600';\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pass':\n        return <CheckCircleIcon className=\"h-5 w-5 text-green-600\" />;\n      case 'warning':\n        return <ExclamationTriangleIcon className=\"h-5 w-5 text-yellow-600\" />;\n      case 'fail':\n        return <ExclamationTriangleIcon className=\"h-5 w-5 text-red-600\" />;\n      default:\n        return <EyeIcon className=\"h-5 w-5 text-gray-600\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-white mb-2 flex items-center gap-3\">\n            <CpuChipIcon className=\"h-10 w-10 text-blue-400\" />\n            SEO Optimizer Panel\n          </h1>\n          <p className=\"text-slate-300 text-lg\">\n            AI-powered content analysis, meta tag generation, and technical SEO audits\n          </p>\n        </div>\n\n        {/* Tab Navigation */}\n        <div className=\"flex space-x-1 rounded-xl bg-slate-800 p-1 mb-8\">\n          {[\n            { id: 'meta', label: 'Meta Tag Generator', icon: TagIcon },\n            { id: 'keywords', label: 'Keyword Analyzer', icon: MagnifyingGlassIcon },\n            { id: 'audit', label: 'Technical SEO Audit', icon: BeakerIcon }\n          ].map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as 'meta' | 'keywords' | 'audit')}\n              className={`flex items-center gap-2 rounded-lg px-4 py-2 text-sm font-medium transition-all ${\n                activeTab === tab.id\n                  ? 'bg-blue-600 text-white shadow-lg'\n                  : 'text-slate-300 hover:bg-slate-700 hover:text-white'\n              }`}\n            >\n              <tab.icon className=\"h-4 w-4\" />\n              {tab.label}\n            </button>\n          ))}\n        </div>\n\n        {/* Meta Tag Generator */}\n        {activeTab === 'meta' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Input Form */}\n            <div className=\"bg-slate-800 rounded-xl border border-slate-700 p-6\">\n              <h2 className=\"text-xl font-semibold text-white mb-4 flex items-center gap-2\">\n                <SparklesIcon className=\"h-5 w-5 text-blue-400\" />\n                Generate Meta Tags\n              </h2>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                    Topic *\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={metaForm.topic}\n                    onChange={(e) => setMetaForm(prev => ({ ...prev, topic: e.target.value }))}\n                    placeholder=\"e.g., Custom Neon Signs for Business\"\n                    className=\"w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                    Content *\n                  </label>\n                  <textarea\n                    value={metaForm.content}\n                    onChange={(e) => setMetaForm(prev => ({ ...prev, content: e.target.value }))}\n                    placeholder=\"Enter your content here...\"\n                    rows={4}\n                    className=\"w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                    Content Type\n                  </label>\n                  <select\n                    value={metaForm.contentType}\n                    onChange={(e) => setMetaForm(prev => ({ ...prev, contentType: e.target.value as 'blog' | 'page' | 'product' | 'article' }))}\n                    className=\"w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value=\"blog\">Blog Post</option>\n                    <option value=\"page\">Page</option>\n                    <option value=\"product\">Product</option>\n                    <option value=\"article\">Article</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                    Keywords\n                  </label>\n                  <div className=\"flex gap-2 mb-2\">\n                    <input\n                      type=\"text\"\n                      value={newKeyword}\n                      onChange={(e) => setNewKeyword(e.target.value)}\n                      placeholder=\"Add keyword...\"\n                      className=\"flex-1 px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      onKeyPress={(e) => e.key === 'Enter' && addKeywordToMeta()}\n                    />\n                    <button\n                      onClick={addKeywordToMeta}\n                      className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n                    >\n                      Add\n                    </button>\n                  </div>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {metaForm.keywords.map((keyword) => (\n                      <span\n                        key={keyword}\n                        className=\"inline-flex items-center gap-1 px-3 py-1 bg-slate-700 text-slate-300 rounded-full text-sm\"\n                      >\n                        {keyword}\n                        <button\n                          onClick={() => removeKeywordFromMeta(keyword)}\n                          className=\"text-slate-400 hover:text-red-400\"\n                        >\n                          ×\n                        </button>\n                      </span>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                    Business Context (Optional)\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={metaForm.businessContext}\n                    onChange={(e) => setMetaForm(prev => ({ ...prev, businessContext: e.target.value }))}\n                    placeholder=\"e.g., Custom signage company\"\n                    className=\"w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n\n                <button\n                  onClick={handleGenerateMetaTags}\n                  disabled={generateMetaTags.isLoading || !metaForm.topic.trim() || !metaForm.content.trim()}\n                  className=\"w-full px-4 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg font-medium hover:from-blue-700 hover:to-purple-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n                >\n                  {generateMetaTags.isLoading ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                      Generating...\n                    </>\n                  ) : (\n                    <>\n                      <SparklesIcon className=\"h-4 w-4\" />\n                      Generate Meta Tags\n                    </>\n                  )}\n                </button>\n              </div>\n            </div>\n\n            {/* Results */}\n            <div className=\"bg-slate-800 rounded-xl border border-slate-700 p-6\">\n              <h2 className=\"text-xl font-semibold text-white mb-4 flex items-center gap-2\">\n                <DocumentTextIcon className=\"h-5 w-5 text-green-400\" />\n                Generated Meta Tags\n              </h2>\n\n              {metaResult ? (\n                <div className=\"space-y-4\">\n                  {/* Title */}\n                  <div className=\"bg-slate-700 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h3 className=\"font-medium text-white\">Meta Title</h3>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-xs text-slate-400\">\n                          {metaResult.title.length}/60 chars\n                        </span>\n                        <button\n                          onClick={() => copyToClipboard(metaResult.title, 'title')}\n                          className=\"p-1 text-slate-400 hover:text-white transition-colors\"\n                        >\n                          {copiedId === 'title' ? (\n                            <CheckCircleIcon className=\"h-4 w-4 text-green-400\" />\n                          ) : (\n                            <ClipboardDocumentIcon className=\"h-4 w-4\" />\n                          )}\n                        </button>\n                      </div>\n                    </div>\n                    <p className=\"text-slate-300 text-sm\">{metaResult.title}</p>\n                    <div className=\"mt-2 bg-slate-600 rounded h-1\">\n                      <div \n                        className={`h-1 rounded ${\n                          metaResult.title.length <= 60 ? 'bg-green-400' : 'bg-red-400'\n                        }`}\n                        style={{ width: `${Math.min((metaResult.title.length / 60) * 100, 100)}%` }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Description */}\n                  <div className=\"bg-slate-700 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h3 className=\"font-medium text-white\">Meta Description</h3>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-xs text-slate-400\">\n                          {metaResult.description.length}/160 chars\n                        </span>\n                        <button\n                          onClick={() => copyToClipboard(metaResult.description, 'description')}\n                          className=\"p-1 text-slate-400 hover:text-white transition-colors\"\n                        >\n                          {copiedId === 'description' ? (\n                            <CheckCircleIcon className=\"h-4 w-4 text-green-400\" />\n                          ) : (\n                            <ClipboardDocumentIcon className=\"h-4 w-4\" />\n                          )}\n                        </button>\n                      </div>\n                    </div>\n                    <p className=\"text-slate-300 text-sm\">{metaResult.description}</p>\n                    <div className=\"mt-2 bg-slate-600 rounded h-1\">\n                      <div \n                        className={`h-1 rounded ${\n                          metaResult.description.length <= 160 ? 'bg-green-400' : 'bg-red-400'\n                        }`}\n                        style={{ width: `${Math.min((metaResult.description.length / 160) * 100, 100)}%` }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* URL Slug */}\n                  <div className=\"bg-slate-700 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h3 className=\"font-medium text-white\">URL Slug</h3>\n                      <button\n                        onClick={() => copyToClipboard(metaResult.slug, 'slug')}\n                        className=\"p-1 text-slate-400 hover:text-white transition-colors\"\n                      >\n                        {copiedId === 'slug' ? (\n                          <CheckCircleIcon className=\"h-4 w-4 text-green-400\" />\n                        ) : (\n                          <ClipboardDocumentIcon className=\"h-4 w-4\" />\n                        )}\n                      </button>\n                    </div>\n                    <p className=\"text-slate-300 text-sm font-mono\">{metaResult.slug}</p>\n                  </div>\n\n                  {/* Additional Tags */}\n                  {metaResult.semanticKeywords && metaResult.semanticKeywords.length > 0 && (\n                    <div className=\"bg-slate-700 rounded-lg p-4\">\n                      <h3 className=\"font-medium text-white mb-2\">Semantic Keywords</h3>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {metaResult.semanticKeywords.map((keyword) => (\n                          <span\n                            key={keyword}\n                            className=\"px-2 py-1 bg-blue-600 text-white rounded text-xs\"\n                          >\n                            {keyword}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Confidence Score */}\n                  <div className=\"bg-gradient-to-r from-green-600 to-blue-600 rounded-lg p-4 text-white\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <ChartBarIcon className=\"h-4 w-4\" />\n                      <span className=\"font-medium\">AI Confidence Score</span>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"flex-1 bg-white/20 rounded-full h-2\">\n                        <div \n                          className=\"bg-white rounded-full h-2 transition-all duration-1000\"\n                          style={{ width: '87%' }}\n                        />\n                      </div>\n                      <span className=\"font-bold\">87%</span>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center text-slate-400 py-12\">\n                  <SparklesIcon className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>Enter topic and content to generate optimized meta tags</p>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Keyword Analyzer */}\n        {activeTab === 'keywords' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Input Form */}\n            <div className=\"bg-slate-800 rounded-xl border border-slate-700 p-6\">\n              <h2 className=\"text-xl font-semibold text-white mb-4 flex items-center gap-2\">\n                <MagnifyingGlassIcon className=\"h-5 w-5 text-blue-400\" />\n                Analyze Keywords\n              </h2>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                    Content Body *\n                  </label>\n                  <textarea\n                    value={keywordForm.content}\n                    onChange={(e) => setKeywordForm(prev => ({ ...prev, content: e.target.value }))}\n                    placeholder=\"Paste your content here for keyword analysis...\"\n                    rows={8}\n                    className=\"w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                  <p className=\"text-xs text-slate-400 mt-1\">\n                    Word count: {keywordForm.content.split(' ').filter(word => word.length > 0).length}\n                  </p>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                    Keywords to Analyze *\n                  </label>\n                  <div className=\"flex gap-2 mb-2\">\n                    <input\n                      type=\"text\"\n                      value={keywordNewKeyword}\n                      onChange={(e) => setKeywordNewKeyword(e.target.value)}\n                      placeholder=\"Add keyword...\"\n                      className=\"flex-1 px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      onKeyPress={(e) => e.key === 'Enter' && addKeywordToAnalysis()}\n                    />\n                    <button\n                      onClick={addKeywordToAnalysis}\n                      className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n                    >\n                      Add\n                    </button>\n                  </div>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {keywordForm.keywords.map((keyword) => (\n                      <span\n                        key={keyword}\n                        className=\"inline-flex items-center gap-1 px-3 py-1 bg-slate-700 text-slate-300 rounded-full text-sm\"\n                      >\n                        {keyword}\n                        <button\n                          onClick={() => removeKeywordFromAnalysis(keyword)}\n                          className=\"text-slate-400 hover:text-red-400\"\n                        >\n                          ×\n                        </button>\n                      </span>\n                    ))}\n                  </div>\n                </div>\n\n                <button\n                  onClick={handleAnalyzeKeywords}\n                  disabled={analyzeContent.isFetching || !keywordForm.content.trim() || keywordForm.keywords.length === 0}\n                  className=\"w-full px-4 py-3 bg-gradient-to-r from-green-600 to-blue-600 text-white rounded-lg font-medium hover:from-green-700 hover:to-blue-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n                >\n                  {analyzeContent.isFetching ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                      Analyzing...\n                    </>\n                  ) : (\n                    <>\n                      <MagnifyingGlassIcon className=\"h-4 w-4\" />\n                      Analyze Keywords\n                    </>\n                  )}\n                </button>\n              </div>\n            </div>\n\n            {/* Results */}\n            <div className=\"bg-slate-800 rounded-xl border border-slate-700 p-6\">\n              <h2 className=\"text-xl font-semibold text-white mb-4 flex items-center gap-2\">\n                <ChartBarIcon className=\"h-5 w-5 text-green-400\" />\n                Keyword Analysis Results\n              </h2>\n\n              {keywordResults.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {keywordResults.map((result, index) => (\n                    <div key={index} className=\"bg-slate-700 rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <h3 className=\"font-medium text-white\">{result.keyword}</h3>\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getIntentColor(result.intent)}`}>\n                          {result.intent}\n                        </span>\n                      </div>\n\n                      <div className=\"grid grid-cols-3 gap-4 mb-3\">\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-blue-400\">{result.frequency}</div>\n                          <div className=\"text-xs text-slate-400\">Frequency</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-green-400\">{result.density}</div>\n                          <div className=\"text-xs text-slate-400\">Density</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-purple-400\">\n                            {result.frequency > 5 ? 'Good' : 'Low'}\n                          </div>\n                          <div className=\"text-xs text-slate-400\">Usage</div>\n                        </div>\n                      </div>\n\n                      {result.suggestions && (\n                        <div className=\"border-t border-slate-600 pt-3\">\n                          <h4 className=\"text-sm font-medium text-slate-300 mb-2\">Suggestions:</h4>\n                          <ul className=\"space-y-1\">\n                            {result.suggestions.map((suggestion, idx) => (\n                              <li key={idx} className=\"text-xs text-slate-400 flex items-start gap-2\">\n                                <ArrowTrendingUpIcon className=\"h-3 w-3 text-blue-400 mt-0.5 flex-shrink-0\" />\n                                {suggestion}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center text-slate-400 py-12\">\n                  <ChartBarIcon className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>Enter content and keywords to analyze keyword performance</p>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Technical SEO Audit */}\n        {activeTab === 'audit' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Input Form */}\n            <div className=\"bg-slate-800 rounded-xl border border-slate-700 p-6\">\n              <h2 className=\"text-xl font-semibold text-white mb-4 flex items-center gap-2\">\n                <BeakerIcon className=\"h-5 w-5 text-blue-400\" />\n                Run SEO Audit\n              </h2>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                    HTML/Markdown Content *\n                  </label>\n                  <textarea\n                    value={auditForm.content}\n                    onChange={(e) => setAuditForm(prev => ({ ...prev, content: e.target.value }))}\n                    placeholder=\"Paste your HTML or Markdown content here...\"\n                    rows={12}\n                    className=\"w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 font-mono text-sm\"\n                  />\n                  <p className=\"text-xs text-slate-400 mt-1\">\n                    Content length: {auditForm.content.length} characters\n                  </p>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                    URL (Optional)\n                  </label>\n                  <input\n                    type=\"url\"\n                    value={auditForm.url}\n                    onChange={(e) => setAuditForm(prev => ({ ...prev, url: e.target.value }))}\n                    placeholder=\"https://example.com/page\"\n                    className=\"w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n\n                <button\n                  onClick={handleRunAudit}\n                  disabled={auditTechnicalSEO.isLoading || !auditForm.content.trim()}\n                  className=\"w-full px-4 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg font-medium hover:from-purple-700 hover:to-pink-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n                >\n                  {auditTechnicalSEO.isLoading ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                      Running Audit...\n                    </>\n                  ) : (\n                    <>\n                      <BeakerIcon className=\"h-4 w-4\" />\n                      Run SEO Audit\n                    </>\n                  )}\n                </button>\n              </div>\n            </div>\n\n            {/* Results */}\n            <div className=\"bg-slate-800 rounded-xl border border-slate-700 p-6\">\n              <h2 className=\"text-xl font-semibold text-white mb-4 flex items-center gap-2\">\n                <DocumentTextIcon className=\"h-5 w-5 text-green-400\" />\n                Audit Results\n              </h2>\n\n              {auditResult ? (\n                <div className=\"space-y-6\">\n                  {/* Score */}\n                  <div className=\"text-center bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg p-6 text-white\">\n                    <div className=\"text-4xl font-bold mb-2\">{auditResult.score}</div>\n                    <div className=\"text-lg\">SEO Score</div>\n                    <div className=\"mt-4 bg-white/20 rounded-full h-3\">\n                      <div \n                        className=\"bg-white rounded-full h-3 transition-all duration-1000\"\n                        style={{ width: `${auditResult.score}%` }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Issues */}\n                  <div>\n                    <h3 className=\"font-medium text-white mb-3 flex items-center gap-2\">\n                      <ExclamationTriangleIcon className=\"h-4 w-4 text-yellow-400\" />\n                      Issues Found\n                    </h3>\n                    <div className=\"space-y-3\">\n                      {auditResult.issues.map((issue, index) => (\n                        <div key={index} className=\"bg-slate-700 rounded-lg p-4\">\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <h4 className=\"font-medium text-white capitalize\">\n                              {issue.type.replace('-', ' ')}\n                            </h4>\n                            <span className={`text-xs font-medium uppercase tracking-wide ${getSeverityColor(issue.severity)}`}>\n                              {issue.severity}\n                            </span>\n                          </div>\n                          <p className=\"text-slate-300 text-sm mb-2\">{issue.message}</p>\n                          <p className=\"text-slate-400 text-xs bg-slate-600 rounded p-2\">\n                            💡 {issue.recommendation}\n                          </p>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Checklist */}\n                  <div>\n                    <h3 className=\"font-medium text-white mb-3 flex items-center gap-2\">\n                      <CheckCircleIcon className=\"h-4 w-4 text-green-400\" />\n                      SEO Checklist\n                    </h3>\n                    <div className=\"space-y-2\">\n                      {auditResult.checklist.map((item, index) => (\n                        <div key={index} className=\"flex items-center gap-3 p-3 bg-slate-700 rounded-lg\">\n                          {getStatusIcon(item.status)}\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"font-medium text-white\">{item.item}</span>\n                              <span className={`text-xs font-medium uppercase tracking-wide ${getStatusColor(item.status)}`}>\n                                {item.status}\n                              </span>\n                            </div>\n                            <p className=\"text-slate-400 text-xs mt-1\">{item.description}</p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center text-slate-400 py-12\">\n                  <BeakerIcon className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>Enter HTML or Markdown content to run a technical SEO audit</p>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/social/components/CredentialStatusBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/social/components/PlatformStatsPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/social/components/PostEditorModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/social/components/SocialCalendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/social/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_error' is defined but never used.","line":177,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":177,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useCallback } from 'react';\nimport { format } from 'date-fns';\nimport { trpc } from '@/lib/trpc';\n\n// Types\ninterface GeneratedPost {\n  id: string;\n  content: string;\n  hashtags: string[];\n  platform: string;\n  estimatedReach?: number;\n  engagementScore?: number;\n}\n\ninterface ScheduledPost {\n  id: string;\n  platform: string;\n  content: string;\n  hashtags: string[];\n  scheduledTime: Date;\n  status: 'scheduled' | 'published' | 'failed';\n  mediaUrls?: string[];\n}\n\ninterface HashtagSuggestion {\n  hashtag: string;\n  estimatedReach: number;\n  difficulty: number;\n  relevanceScore: number;\n}\n\ninterface ScheduledPostData {\n  id: string;\n  platform: string;\n  content: string;\n  hashtags: string[];\n  scheduledTime: string | Date;\n  status: string;\n  mediaUrls?: string[];\n}\n\nconst PLATFORMS = [\n  { value: 'instagram', label: 'Instagram', color: 'bg-gradient-to-r from-purple-500 to-pink-500', icon: '📷' },\n  { value: 'facebook', label: 'Facebook', color: 'bg-blue-600', icon: '👥' },\n  { value: 'twitter', label: 'Twitter', color: 'bg-sky-500', icon: '🐦' },\n  { value: 'linkedin', label: 'LinkedIn', color: 'bg-blue-700', icon: '💼' },\n  { value: 'tiktok', label: 'TikTok', color: 'bg-black', icon: '🎵' },\n  { value: 'youtube', label: 'YouTube', color: 'bg-red-600', icon: '📺' }\n];\n\nconst TONES = [\n  { value: 'professional', label: 'Professional' },\n  { value: 'casual', label: 'Casual' },\n  { value: 'friendly', label: 'Friendly' },\n  { value: 'authoritative', label: 'Authoritative' },\n  { value: 'playful', label: 'Playful' }\n];\n\nexport default function SocialMediaManagerPage(): JSX.Element {\n  // State\n  const [activeTab, setActiveTab] = useState('generator');\n  const [selectedPlatform, setSelectedPlatform] = useState('instagram');\n  const [postTopic, setPostTopic] = useState('');\n  const [postTone, setPostTone] = useState('professional');\n  const [hashtagTopic, setHashtagTopic] = useState('');\n  const [generatedPost, setGeneratedPost] = useState<GeneratedPost | null>(null);\n  const [hashtagSuggestions, setHashtagSuggestions] = useState<HashtagSuggestion[]>([]);\n  const [scheduledPosts, setScheduledPosts] = useState<ScheduledPost[]>([]);\n  const [selectedDate, setSelectedDate] = useState<string>(new Date().toISOString().split('T')[0]);\n  const [selectedTime, setSelectedTime] = useState('12:00');\n  const [showScheduleModal, setShowScheduleModal] = useState(false);\n  const [copiedItems, setCopiedItems] = useState<Set<string>>(new Set());\n  const [showToast, setShowToast] = useState<{ show: boolean; message: string; type: 'success' | 'error' }>({ show: false, message: '', type: 'success' });\n\n  // tRPC mutations and queries\n  const generatePostMutation = trpc.social.generatePost.useMutation({\n    onSuccess: (data: { generatedPost?: { id: string; content: string; hashtags?: string[]; estimatedReach?: number; engagementScore?: number; }; posts?: { id: string; content: string; hashtags?: string[]; estimatedReach?: number; engagementScore?: number; }[] }) => {\n      // Handle both possible response formats\n      const post = data.generatedPost || (data.posts && data.posts[0]);\n      if (post) {\n        setGeneratedPost({\n          id: post.id,\n          content: post.content,\n          hashtags: post.hashtags || [],\n          platform: selectedPlatform,\n          estimatedReach: post.estimatedReach,\n          engagementScore: post.engagementScore\n        });\n        showToastMessage(`Generated ${post.content.length} character post for ${selectedPlatform}`, 'success');\n      }\n    },\n    onError: (error: { message: string }) => {\n      showToastMessage(error.message, 'error');\n    },\n  });\n\n  const schedulePostMutation = trpc.social.schedulePost.useMutation({\n    onSuccess: (data: { scheduledPosts?: ScheduledPostData[] }) => {\n      if (data.scheduledPosts) {\n        const newScheduledPosts = data.scheduledPosts.map((post: ScheduledPostData) => ({\n          id: post.id,\n          platform: post.platform,\n          content: post.content,\n          hashtags: post.hashtags || [],\n          scheduledTime: new Date(post.scheduledTime),\n          status: post.status as 'scheduled' | 'published' | 'failed',\n          mediaUrls: post.mediaUrls || []\n        }));\n        setScheduledPosts(prev => [...prev, ...newScheduledPosts]);\n        setShowScheduleModal(false);\n        showToastMessage(`Post scheduled for ${format(new Date(data.scheduledPosts[0].scheduledTime), 'PPP')}`, 'success');\n      }\n    },\n    onError: (error: { message: string }) => {\n      showToastMessage(error.message, 'error');\n    },\n  });\n\n  const suggestHashtagsMutation = trpc.social.suggestHashtags.useMutation({\n    onSuccess: (data: { hashtags?: HashtagSuggestion[]; suggestions?: HashtagSuggestion[] }) => {\n      const suggestions = data.hashtags || data.suggestions || [];\n      setHashtagSuggestions(suggestions);\n      showToastMessage(`Found ${suggestions.length} relevant hashtags`, 'success');\n    },\n    onError: (error: { message: string }) => {\n      showToastMessage(error.message, 'error');\n    },\n  });\n\n  // Helper functions\n  const showToastMessage = (message: string, type: 'success' | 'error'): void => {\n    setShowToast({ show: true, message, type });\n    setTimeout(() => setShowToast({ show: false, message: '', type: 'success' }), 3000);\n  };\n\n  const generateHashtags = useCallback(async (): Promise<void> => {\n    if (!hashtagTopic.trim()) {\n      showToastMessage('Please enter a topic to generate hashtags', 'error');\n      return;\n    }\n\n    suggestHashtagsMutation.mutate({\n      topic: hashtagTopic,\n      platform: selectedPlatform as 'instagram' | 'facebook' | 'twitter' | 'linkedin' | 'tiktok' | 'youtube',\n      count: 8,\n    });\n  }, [hashtagTopic, selectedPlatform, suggestHashtagsMutation]);\n\n  const handleGeneratePost = async (): Promise<void> => {\n    if (!postTopic.trim()) {\n      showToastMessage('Please enter a topic to generate content', 'error');\n      return;\n    }\n\n    generatePostMutation.mutate({\n      platform: selectedPlatform as 'instagram' | 'facebook' | 'twitter' | 'linkedin' | 'tiktok' | 'youtube',\n      topic: postTopic,\n      tone: postTone as 'professional' | 'casual' | 'friendly' | 'authoritative' | 'playful',\n      includeHashtags: true,\n    });\n  };\n\n  const handleCopyToClipboard = async (text: string, itemId: string): Promise<void> => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedItems(prev => new Set([...prev, itemId]));\n      setTimeout(() => {\n        setCopiedItems(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(itemId);\n          return newSet;\n        });\n      }, 2000);\n      showToastMessage('Content copied to clipboard', 'success');\n    } catch (_error) {\n      showToastMessage('Failed to copy to clipboard', 'error');\n    }\n  };\n\n  const handleSchedulePost = (): void => {\n    if (!generatedPost) {\n      showToastMessage('Please generate a post first', 'error');\n      return;\n    }\n\n    const scheduledDateTime = new Date(`${selectedDate}T${selectedTime}`);\n\n    schedulePostMutation.mutate({\n      platform: selectedPlatform as 'facebook' | 'instagram' | 'twitter' | 'linkedin' | 'tiktok' | 'youtube',\n      content: {\n        text: generatedPost.content,\n        hashtags: generatedPost.hashtags,\n      },\n      scheduling: {\n        publishNow: false,\n        scheduledAt: scheduledDateTime,\n        timezone: 'UTC',\n      },\n      settings: {\n        enableComments: true,\n      },\n    });\n  };\n\n  const getPlatformIcon = (platform: string): string => {\n    const platformConfig = PLATFORMS.find(p => p.value === platform);\n    return platformConfig?.icon || '📱';\n  };\n\n  const getPlatformColor = (platform: string): string => {\n    const platformConfig = PLATFORMS.find(p => p.value === platform);\n    return platformConfig?.color || 'bg-gray-500';\n  };\n\n  const formatScheduledTime = (date: Date): string => {\n    return format(date, 'MMM dd, yyyy • h:mm a');\n  };\n\n  const TabButton = ({ _id, label, active, onClick }: { _id: string; label: string; active: boolean; onClick: () => void }): JSX.Element => (\n    <button\n      onClick={onClick}\n      className={`px-6 py-3 font-medium rounded-lg transition-all duration-200 ${\n        active\n          ? 'bg-purple-600 text-white shadow-lg shadow-purple-600/25'\n          : 'bg-slate-700/50 text-slate-300 hover:bg-slate-600/50 hover:text-white'\n      }`}\n    >\n      {label}\n    </button>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-6\">\n      {/* Toast Notification */}\n      {showToast.show && (\n        <div className={`fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg transition-all duration-300 ${\n          showToast.type === 'success' ? 'bg-green-600' : 'bg-red-600'\n        } text-white`}>\n          {showToast.message}\n        </div>\n      )}\n\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold text-white mb-2 flex items-center gap-3\">\n          ✨ Social Media Manager\n        </h1>\n        <p className=\"text-slate-300 text-lg\">\n          AI-powered social media content generation and management\n        </p>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Tab Navigation */}\n        <div className=\"flex gap-2 mb-6 bg-slate-800/30 p-2 rounded-xl backdrop-blur-sm\">\n          <TabButton _id=\"generator\" label=\"Post Generator\" active={activeTab === 'generator'} onClick={() => setActiveTab('generator')} />\n          <TabButton _id=\"hashtags\" label=\"Hashtag Tool\" active={activeTab === 'hashtags'} onClick={() => setActiveTab('hashtags')} />\n          <TabButton _id=\"schedule\" label=\"Schedule Grid\" active={activeTab === 'schedule'} onClick={() => setActiveTab('schedule')} />\n        </div>\n\n        {/* Post Generator Tab */}\n        {activeTab === 'generator' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Input Panel */}\n            <div className=\"bg-slate-800/50 backdrop-blur-sm border border-slate-700 rounded-xl p-6\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <span className=\"text-purple-400\">✏️</span>\n                <h2 className=\"text-xl font-semibold text-white\">Content Generator</h2>\n              </div>\n              <p className=\"text-slate-300 mb-6\">Generate AI-powered social media posts</p>\n\n              <div className=\"space-y-4\">\n                {/* Platform Selector */}\n                <div>\n                  <label className=\"block text-white text-sm font-medium mb-2\">Platform</label>\n                  <select\n                    value={selectedPlatform}\n                    onChange={(e) => setSelectedPlatform(e.target.value)}\n                    className=\"w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-purple-500\"\n                  >\n                    {PLATFORMS.map((platform) => (\n                      <option key={platform.value} value={platform.value}>\n                        {`${platform.icon} ${platform.label}`}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                {/* Topic Input */}\n                <div>\n                  <label className=\"block text-white text-sm font-medium mb-2\">Topic</label>\n                  <textarea\n                    placeholder=\"What would you like to post about? (e.g., 'LED neon signs for restaurants')\"\n                    value={postTopic}\n                    onChange={(e) => setPostTopic(e.target.value)}\n                    className=\"w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white placeholder:text-slate-400 focus:outline-none focus:border-purple-500\"\n                    rows={3}\n                  />\n                </div>\n\n                {/* Tone Selector */}\n                <div>\n                  <label className=\"block text-white text-sm font-medium mb-2\">Tone</label>\n                  <select\n                    value={postTone}\n                    onChange={(e) => setPostTone(e.target.value)}\n                    className=\"w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-purple-500\"\n                  >\n                    {TONES.map((tone) => (\n                      <option key={tone.value} value={tone.value}>\n                        {tone.label}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                {/* Generate Button */}\n                <button\n                  onClick={handleGeneratePost}\n                  disabled={generatePostMutation.isLoading || !postTopic.trim()}\n                  className=\"w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 disabled:opacity-50 disabled:cursor-not-allowed text-white font-medium py-3 rounded-lg transition-all duration-200\"\n                >\n                  {generatePostMutation.isLoading ? (\n                    <span className=\"flex items-center justify-center gap-2\">\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                      Generating...\n                    </span>\n                  ) : (\n                    <span className=\"flex items-center justify-center gap-2\">\n                      ✨ Generate Post\n                    </span>\n                  )}\n                </button>\n              </div>\n            </div>\n\n            {/* Output Panel */}\n            <div className=\"bg-slate-800/50 backdrop-blur-sm border border-slate-700 rounded-xl p-6\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <span className=\"text-green-400\">👁️</span>\n                <h2 className=\"text-xl font-semibold text-white\">Generated Content</h2>\n              </div>\n              <p className=\"text-slate-300 mb-6\">Preview and copy your generated post</p>\n\n              {generatedPost ? (\n                <div className=\"space-y-4\">\n                  {/* Platform Preview */}\n                  <div className=\"bg-slate-700/50 rounded-lg p-4 border border-slate-600\">\n                    <div className=\"flex items-center gap-2 mb-3\">\n                      <div className={`w-8 h-8 rounded-full ${getPlatformColor(generatedPost.platform)} flex items-center justify-center text-white text-sm font-bold`}>\n                        {getPlatformIcon(generatedPost.platform)}\n                      </div>\n                      <div>\n                        <div className=\"text-white font-medium\">NeonHub</div>\n                        <div className=\"text-slate-400 text-xs\">Just now</div>\n                      </div>\n                    </div>\n                    <div className=\"text-white whitespace-pre-wrap mb-3\">\n                      {generatedPost.content}\n                    </div>\n                    {generatedPost.hashtags.length > 0 && (\n                      <div className=\"flex flex-wrap gap-1\">\n                        {generatedPost.hashtags.map((hashtag, index) => (\n                          <span key={index} className=\"bg-blue-600/20 text-blue-400 border border-blue-600/30 px-2 py-1 rounded-full text-xs\">\n                            {hashtag}\n                          </span>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Metrics */}\n                  {(generatedPost.estimatedReach || generatedPost.engagementScore) && (\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      {generatedPost.estimatedReach && (\n                        <div className=\"bg-slate-700/30 rounded-lg p-3 text-center\">\n                          <div className=\"text-purple-400 text-2xl mb-1\">👥</div>\n                          <div className=\"text-white font-semibold\">{generatedPost.estimatedReach.toLocaleString()}</div>\n                          <div className=\"text-slate-400 text-xs\">Est. Reach</div>\n                        </div>\n                      )}\n                      {generatedPost.engagementScore && (\n                        <div className=\"bg-slate-700/30 rounded-lg p-3 text-center\">\n                          <div className=\"text-green-400 text-2xl mb-1\">📈</div>\n                          <div className=\"text-white font-semibold\">{generatedPost.engagementScore}%</div>\n                          <div className=\"text-slate-400 text-xs\">Engagement Score</div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n\n                  {/* Action Buttons */}\n                  <div className=\"flex gap-2\">\n                    <button\n                      onClick={() => handleCopyToClipboard(`${generatedPost.content}\\n\\n${generatedPost.hashtags.join(' ')}`, generatedPost.id)}\n                      className=\"flex-1 border border-slate-600 text-white hover:bg-slate-700 py-2 px-4 rounded-lg transition-colors\"\n                    >\n                      {copiedItems.has(generatedPost.id) ? (\n                        <span className=\"flex items-center justify-center gap-2\">\n                          ✓ Copied!\n                        </span>\n                      ) : (\n                        <span className=\"flex items-center justify-center gap-2\">\n                          📋 Copy\n                        </span>\n                      )}\n                    </button>\n                    <button\n                      onClick={() => setShowScheduleModal(true)}\n                      className=\"flex-1 bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg transition-colors\"\n                    >\n                      📅 Schedule\n                    </button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-slate-400\">\n                  <div className=\"text-6xl mb-3 opacity-50\">✨</div>\n                  <p>Generate a post to see the preview</p>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Hashtag Tool Tab */}\n        {activeTab === 'hashtags' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Hashtag Input */}\n            <div className=\"bg-slate-800/50 backdrop-blur-sm border border-slate-700 rounded-xl p-6\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <span className=\"text-blue-400\">#️⃣</span>\n                <h2 className=\"text-xl font-semibold text-white\">Hashtag Generator</h2>\n              </div>\n              <p className=\"text-slate-300 mb-6\">Generate relevant hashtags for your content</p>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-white text-sm font-medium mb-2\">Topic or Keywords</label>\n                  <textarea\n                    placeholder=\"Enter your topic or keywords (e.g., 'custom neon signs', 'restaurant lighting')\"\n                    value={hashtagTopic}\n                    onChange={(e) => setHashtagTopic(e.target.value)}\n                    className=\"w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white placeholder:text-slate-400 focus:outline-none focus:border-blue-500\"\n                    rows={3}\n                  />\n                </div>\n                <button\n                  onClick={generateHashtags}\n                  disabled={suggestHashtagsMutation.isLoading || !hashtagTopic.trim()}\n                  className=\"w-full bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 disabled:opacity-50 disabled:cursor-not-allowed text-white font-medium py-3 rounded-lg transition-all duration-200\"\n                >\n                  {suggestHashtagsMutation.isLoading ? (\n                    <span className=\"flex items-center justify-center gap-2\">\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                      Generating...\n                    </span>\n                  ) : (\n                    <span className=\"flex items-center justify-center gap-2\">\n                      #️⃣ Suggest Hashtags\n                    </span>\n                  )}\n                </button>\n              </div>\n            </div>\n\n            {/* Hashtag Results */}\n            <div className=\"bg-slate-800/50 backdrop-blur-sm border border-slate-700 rounded-xl p-6\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <span className=\"text-green-400\">📈</span>\n                <h2 className=\"text-xl font-semibold text-white\">Suggested Hashtags</h2>\n              </div>\n              <p className=\"text-slate-300 mb-6\">Copy hashtags with performance metrics</p>\n\n              {hashtagSuggestions.length > 0 ? (\n                <div className=\"space-y-4\">\n                  <div className=\"max-h-64 overflow-y-auto space-y-2\">\n                    {hashtagSuggestions.map((suggestion, index) => (\n                      <div\n                        key={index}\n                        className=\"bg-slate-700/50 rounded-lg p-3 border border-slate-600 hover:border-slate-500 transition-colors\"\n                      >\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-blue-400 font-medium\">{suggestion.hashtag}</span>\n                          <button\n                            onClick={() => handleCopyToClipboard(suggestion.hashtag, `hashtag-${index}`)}\n                            className=\"text-slate-300 hover:text-white text-sm\"\n                          >\n                            {copiedItems.has(`hashtag-${index}`) ? '✓' : '📋'}\n                          </button>\n                        </div>\n                        <div className=\"grid grid-cols-3 gap-2 text-xs\">\n                          <div className=\"text-center\">\n                            <div className=\"text-white font-semibold\">{suggestion.estimatedReach.toLocaleString()}</div>\n                            <div className=\"text-slate-400\">Reach</div>\n                          </div>\n                          <div className=\"text-center\">\n                            <div className=\"text-white font-semibold\">{suggestion.difficulty}%</div>\n                            <div className=\"text-slate-400\">Difficulty</div>\n                          </div>\n                          <div className=\"text-center\">\n                            <div className=\"text-white font-semibold\">{suggestion.relevanceScore}%</div>\n                            <div className=\"text-slate-400\">Relevance</div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                  <button\n                    onClick={() => {\n                      const allHashtags = hashtagSuggestions.map(h => h.hashtag).join(' ');\n                      handleCopyToClipboard(allHashtags, 'all-hashtags');\n                    }}\n                    className=\"w-full border border-slate-600 text-white hover:bg-slate-700 py-2 px-4 rounded-lg transition-colors\"\n                  >\n                    {copiedItems.has('all-hashtags') ? 'Copied All!' : 'Copy All Hashtags'}\n                  </button>\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-slate-400\">\n                  <div className=\"text-6xl mb-3 opacity-50\">#️⃣</div>\n                  <p>Generate hashtags to see suggestions</p>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Schedule Grid Tab */}\n        {activeTab === 'schedule' && (\n          <div className=\"bg-slate-800/50 backdrop-blur-sm border border-slate-700 rounded-xl p-6\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <span className=\"text-purple-400\">📅</span>\n              <h2 className=\"text-xl font-semibold text-white\">Scheduled Posts</h2>\n            </div>\n            <p className=\"text-slate-300 mb-6\">Manage your scheduled social media content</p>\n\n            {scheduledPosts.length > 0 ? (\n              <div className=\"space-y-4\">\n                {scheduledPosts.map((post) => (\n                  <div\n                    key={post.id}\n                    className=\"bg-slate-700/50 rounded-lg p-4 border border-slate-600 hover:border-slate-500 transition-colors\"\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <div className={`w-6 h-6 rounded ${getPlatformColor(post.platform)} flex items-center justify-center text-white text-xs`}>\n                            {getPlatformIcon(post.platform)}\n                          </div>\n                          <span className=\"text-white font-medium capitalize\">{post.platform}</span>\n                          <span className={`px-2 py-1 rounded-full text-xs ${\n                            post.status === 'scheduled' ? 'bg-orange-600/20 text-orange-400' :\n                            post.status === 'published' ? 'bg-green-600/20 text-green-400' :\n                            'bg-red-600/20 text-red-400'\n                          }`}>\n                            {post.status}\n                          </span>\n                        </div>\n                        <p className=\"text-slate-300 text-sm mb-2 line-clamp-3\">\n                          {post.content}\n                        </p>\n                        {post.hashtags.length > 0 && (\n                          <div className=\"flex flex-wrap gap-1 mb-2\">\n                            {post.hashtags.slice(0, 5).map((hashtag, index) => (\n                              <span key={index} className=\"bg-blue-600/20 text-blue-400 border border-blue-600/30 px-2 py-1 rounded-full text-xs\">\n                                {hashtag}\n                              </span>\n                            ))}\n                            {post.hashtags.length > 5 && (\n                              <span className=\"bg-slate-600/20 text-slate-400 border border-slate-600/30 px-2 py-1 rounded-full text-xs\">\n                                +{post.hashtags.length - 5} more\n                              </span>\n                            )}\n                          </div>\n                        )}\n                        <div className=\"flex items-center gap-4 text-xs text-slate-400\">\n                          <div className=\"flex items-center gap-1\">\n                            🕒 {formatScheduledTime(post.scheduledTime)}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2 ml-4\">\n                        <button className=\"text-slate-400 hover:text-white p-2\">✏️</button>\n                        <button className=\"text-slate-400 hover:text-red-400 p-2\">🗑️</button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-slate-400\">\n                <div className=\"text-6xl mb-3 opacity-50\">📅</div>\n                <p>No scheduled posts yet</p>\n                <p className=\"text-sm\">Generate and schedule a post to see it here</p>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Schedule Modal */}\n      {showScheduleModal && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-slate-800 border border-slate-700 rounded-xl p-6 w-full max-w-md\">\n            <h3 className=\"text-xl font-semibold text-white mb-4\">Schedule Post</h3>\n            <p className=\"text-slate-300 mb-6\">Choose when to publish your post</p>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-white text-sm font-medium mb-2\">Date</label>\n                <input\n                  type=\"date\"\n                  value={selectedDate}\n                  onChange={(e) => setSelectedDate(e.target.value)}\n                  className=\"w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-purple-500\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-white text-sm font-medium mb-2\">Time</label>\n                <input\n                  type=\"time\"\n                  value={selectedTime}\n                  onChange={(e) => setSelectedTime(e.target.value)}\n                  className=\"w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-purple-500\"\n                />\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <button\n                  onClick={() => setShowScheduleModal(false)}\n                  className=\"flex-1 border border-slate-600 text-white hover:bg-slate-700 py-2 px-4 rounded-lg transition-colors\"\n                >\n                  Cancel\n                </button>\n                <button\n                  onClick={handleSchedulePost}\n                  disabled={schedulePostMutation.isLoading}\n                  className=\"flex-1 bg-green-600 hover:bg-green-700 disabled:opacity-50 text-white py-2 px-4 rounded-lg transition-colors\"\n                >\n                  {schedulePostMutation.isLoading ? 'Scheduling...' : 'Schedule Post'}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/support/components/ContactPanel.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":241,"column":22,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[10692,10814],"text":"\n                    I&apos;m connecting you with a human agent who can better assist you. Please hold on...\n                  "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[10692,10814],"text":"\n                    I&lsquo;m connecting you with a human agent who can better assist you. Please hold on...\n                  "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[10692,10814],"text":"\n                    I&#39;m connecting you with a human agent who can better assist you. Please hold on...\n                  "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[10692,10814],"text":"\n                    I&rsquo;m connecting you with a human agent who can better assist you. Please hold on...\n                  "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { \n  MagnifyingGlassIcon,\n  PhoneIcon,\n  EnvelopeIcon,\n  ChatBubbleLeftIcon,\n  Cog6ToothIcon,\n  PlusIcon\n} from '@heroicons/react/24/outline';\n\n// Mock contacts data\nconst mockContacts = [\n  {\n    id: '1',\n    name: 'Sarah Johnson',\n    email: 'sarah.johnson@example.com',\n    phone: '+1-555-0123',\n    whatsapp: '+1-555-0123',\n    lastContact: new Date('2024-01-16T09:07:00Z'),\n    totalTickets: 3,\n    status: 'active',\n    tags: ['premium', 'restaurant'],\n  },\n  {\n    id: '2',\n    name: 'Mike Chen',\n    email: 'mike.chen@techstartup.com',\n    phone: '+1-555-0124',\n    whatsapp: null,\n    lastContact: new Date('2024-01-16T08:45:00Z'),\n    totalTickets: 1,\n    status: 'active',\n    tags: ['enterprise'],\n  },\n  {\n    id: '3',\n    name: 'Emma Wilson',\n    email: 'emma@creativeco.com',\n    phone: '+1-555-0125',\n    whatsapp: '+1-555-0125',\n    lastContact: new Date('2024-01-16T07:30:00Z'),\n    totalTickets: 5,\n    status: 'active',\n    tags: ['agency', 'power-user'],\n  },\n];\n\nexport default function ContactPanel() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [activeTab, setActiveTab] = useState<'contacts' | 'sync'>('contacts');\n\n  const filteredContacts = mockContacts.filter(contact =>\n    contact.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    contact.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    contact.phone.includes(searchQuery)\n  );\n\n  const formatDate = (date: Date) => {\n    return date.toLocaleDateString('en-US', { \n      month: 'short', \n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"h-full flex flex-col bg-gray-50\">\n      {/* Header Tabs */}\n      <div className=\"bg-white border-b border-gray-200 px-6 py-4\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-6\">\n            <button\n              onClick={() => setActiveTab('contacts')}\n              className={`pb-2 border-b-2 font-medium ${\n                activeTab === 'contacts'\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              Contacts\n            </button>\n            <button\n              onClick={() => setActiveTab('sync')}\n              className={`pb-2 border-b-2 font-medium ${\n                activeTab === 'sync'\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              WhatsApp Sync\n            </button>\n          </div>\n          \n          {activeTab === 'contacts' && (\n            <button className=\"inline-flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\">\n              <PlusIcon className=\"h-4 w-4\" />\n              Add Contact\n            </button>\n          )}\n        </div>\n\n        {activeTab === 'contacts' && (\n          <div className=\"relative\">\n            <MagnifyingGlassIcon className=\"h-4 w-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search contacts...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n        )}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-6\">\n        {activeTab === 'contacts' ? (\n          <div className=\"space-y-4\">\n            {filteredContacts.map(contact => (\n              <div key={contact.id} className=\"bg-white rounded-lg border border-gray-200 p-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center\">\n                      <span className=\"text-lg font-medium text-gray-600\">\n                        {contact.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                      </span>\n                    </div>\n                    \n                    <div className=\"flex-1\">\n                      <h3 className=\"font-medium text-gray-900 mb-1\">{contact.name}</h3>\n                      \n                      <div className=\"space-y-1 mb-3\">\n                        <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                          <EnvelopeIcon className=\"h-4 w-4\" />\n                          <span>{contact.email}</span>\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                          <PhoneIcon className=\"h-4 w-4\" />\n                          <span>{contact.phone}</span>\n                        </div>\n                        {contact.whatsapp && (\n                          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                            <ChatBubbleLeftIcon className=\"h-4 w-4\" />\n                            <span>WhatsApp: {contact.whatsapp}</span>\n                          </div>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex items-center gap-4 text-sm text-gray-600 mb-3\">\n                        <span>Last contact: {formatDate(contact.lastContact)}</span>\n                        <span>{contact.totalTickets} tickets</span>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2\">\n                        {contact.tags.map(tag => (\n                          <span \n                            key={tag}\n                            className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full\"\n                          >\n                            {tag}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <button className=\"p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100\">\n                      <ChatBubbleLeftIcon className=\"h-4 w-4\" />\n                    </button>\n                    <button className=\"p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100\">\n                      <Cog6ToothIcon className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"max-w-2xl\">\n            <div className=\"bg-white rounded-lg border border-gray-200 p-6 mb-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4\">WhatsApp Integration</h3>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">WhatsApp Business API</h4>\n                    <p className=\"text-sm text-gray-600\">Connect your WhatsApp Business account</p>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"w-2 h-2 bg-red-500 rounded-full\"></span>\n                    <span className=\"text-sm text-red-600\">Not connected</span>\n                    <button className=\"ml-3 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700\">\n                      Connect\n                    </button>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">Auto-sync Messages</h4>\n                    <p className=\"text-sm text-gray-600\">Automatically create tickets from WhatsApp messages</p>\n                  </div>\n                  <label className=\"relative inline-flex items-center cursor-pointer\">\n                    <input type=\"checkbox\" className=\"sr-only peer\" defaultChecked />\n                    <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                  </label>\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">AI Auto-response</h4>\n                    <p className=\"text-sm text-gray-600\">Let AI handle common WhatsApp queries</p>\n                  </div>\n                  <label className=\"relative inline-flex items-center cursor-pointer\">\n                    <input type=\"checkbox\" className=\"sr-only peer\" defaultChecked />\n                    <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n                  </label>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Response Templates</h3>\n              \n              <div className=\"space-y-3\">\n                <div className=\"p-3 border border-gray-200 rounded-lg\">\n                  <h4 className=\"font-medium text-gray-900 text-sm\">Welcome Message</h4>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    Hi! Thanks for contacting NeonHub support. How can I help you today?\n                  </p>\n                </div>\n                \n                <div className=\"p-3 border border-gray-200 rounded-lg\">\n                  <h4 className=\"font-medium text-gray-900 text-sm\">Escalation Notice</h4>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    I'm connecting you with a human agent who can better assist you. Please hold on...\n                  </p>\n                </div>\n                \n                <button className=\"w-full p-3 border-2 border-dashed border-gray-300 rounded-lg text-sm text-gray-600 hover:border-gray-400\">\n                  + Add New Template\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/support/components/EscalationBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/support/components/SupportInbox.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":125,"column":17,"nodeType":"JSXOpeningElement","endLine":129,"endColumn":19}],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":76,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":76,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2369,2417],"text":""},"desc":"Remove the console.error()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":92,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":92,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2811,2848],"text":""},"desc":"Remove the console.error()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { \n  PaperAirplaneIcon,\n  FaceSmileIcon,\n  PaperClipIcon,\n  UserIcon,\n  InboxIcon,\n  CpuChipIcon\n} from '@heroicons/react/24/outline';\nimport EscalationBanner from './EscalationBanner';\nimport { trpc } from '../../../lib/trpc';\n\ninterface SupportInboxProps {\n  selectedThread: string | null;\n}\n\n// Mock conversation data\nconst mockConversation = {\n  id: '1',\n  customer: {\n    name: 'Sarah Johnson',\n    email: 'sarah.johnson@example.com',\n    phone: '+1-555-0123',\n    avatar: null,\n  },\n  subject: 'Issue with AI Content Generator',\n  status: 'open',\n  priority: 'medium',\n  channel: 'whatsapp',\n  escalated: false,\n  createdAt: new Date('2024-01-16T09:00:00Z'),\n  messages: [\n    {\n      id: '1',\n      sender: 'customer',\n      content: 'Hi, I\\'m having trouble with the AI content generator. It keeps giving me generic responses.',\n      timestamp: new Date('2024-01-16T09:00:00Z'),\n      type: 'text',\n    },\n    {\n      id: '2',\n      sender: 'ai',\n      content: 'Hello Sarah! I understand you\\'re experiencing issues with the AI content generator. Let me help you troubleshoot this. Can you tell me what type of content you\\'re trying to generate?',\n      timestamp: new Date('2024-01-16T09:02:00Z'),\n      type: 'text',\n    },\n    {\n      id: '3',\n      sender: 'customer',\n      content: 'I\\'m trying to create social media posts for my restaurant, but the suggestions are too generic and don\\'t capture my brand voice.',\n      timestamp: new Date('2024-01-16T09:05:00Z'),\n      type: 'text',\n    },\n    {\n      id: '4',\n      sender: 'ai',\n      content: 'I see the issue. For more personalized content, try providing more specific details about your restaurant\\'s style, target audience, and unique selling points in the prompt. Would you like me to guide you through creating a better prompt template?',\n      timestamp: new Date('2024-01-16T09:07:00Z'),\n      type: 'text',\n    },\n  ],\n};\n\nexport default function SupportInbox({ selectedThread }: SupportInboxProps): JSX.Element {\n  const [newMessage, setNewMessage] = useState('');\n  const [showEscalation, setShowEscalation] = useState(false);\n\n  const sendMessageMutation = trpc.support.sendMessage.useMutation({\n    onSuccess: () => {\n      setNewMessage('');\n    },\n    onError: (error) => {\n      // eslint-disable-next-line no-console\n      console.error('Failed to send message:', error);\n    },\n  });\n\n  const handleSendMessage = async (e: React.FormEvent): Promise<void> => {\n    e.preventDefault();\n    if (!newMessage.trim() || !selectedThread) return;\n\n    try {\n      await sendMessageMutation.mutateAsync({\n        ticketId: selectedThread,\n        content: newMessage,\n        type: 'text',\n      });\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Send failed:', error);\n    }\n  };\n\n  const formatTime = (date: Date): string => {\n    return date.toLocaleTimeString('en-US', { \n      hour: 'numeric', \n      minute: '2-digit' \n    });\n  };\n\n  if (!selectedThread) {\n    return (\n      <div className=\"h-full flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <InboxIcon className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Select a conversation</h3>\n          <p className=\"text-gray-600\">Choose a ticket from the list to start helping customers</p>\n        </div>\n      </div>\n    );\n  }\n\n  const conversation = mockConversation;\n\n  return (\n    <div className=\"h-full flex flex-col bg-white\">\n      {/* Conversation Header */}\n      <div className=\"px-6 py-4 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center\">\n              {conversation.customer.avatar ? (\n                <img \n                  src={conversation.customer.avatar} \n                  alt={conversation.customer.name}\n                  className=\"w-10 h-10 rounded-full\"\n                />\n              ) : (\n                <UserIcon className=\"h-5 w-5 text-gray-600\" />\n              )}\n            </div>\n            <div>\n              <h3 className=\"font-medium text-gray-900\">{conversation.customer.name}</h3>\n              <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                <span>{conversation.customer.email}</span>\n                <span className=\"capitalize\">{conversation.channel}</span>\n                <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                  conversation.priority === 'high' ? 'bg-red-100 text-red-800' :\n                  conversation.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                  'bg-green-100 text-green-800'\n                }`}>\n                  {conversation.priority} priority\n                </span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <button\n              onClick={() => setShowEscalation(true)}\n              className=\"px-3 py-2 text-sm text-orange-600 hover:text-orange-700 border border-orange-200 rounded-lg hover:border-orange-300\"\n            >\n              Escalate to Human\n            </button>\n            <select className=\"px-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\">\n              <option value=\"open\">Open</option>\n              <option value=\"pending\">Pending</option>\n              <option value=\"resolved\">Resolved</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Escalation Banner */}\n      {showEscalation && (\n        <EscalationBanner onClose={() => setShowEscalation(false)} />\n      )}\n\n      {/* Messages */}\n      <div className=\"flex-1 overflow-y-auto p-6 space-y-4\">\n        {conversation.messages.map((message) => (\n          <div\n            key={message.id}\n            className={`flex gap-3 ${\n              message.sender === 'customer' ? '' : 'flex-row-reverse'\n            }`}\n          >\n            <div className=\"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0\">\n              {message.sender === 'customer' ? (\n                <div className=\"w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center\">\n                  <UserIcon className=\"h-4 w-4 text-gray-600\" />\n                </div>\n                             ) : (\n                 <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                   <CpuChipIcon className=\"h-4 w-4 text-blue-600\" />\n                 </div>\n               )}\n            </div>\n            \n            <div className={`max-w-md ${message.sender === 'customer' ? '' : 'text-right'}`}>\n              <div className={`inline-block px-4 py-2 rounded-lg ${\n                message.sender === 'customer'\n                  ? 'bg-gray-100 text-gray-900'\n                  : 'bg-blue-600 text-white'\n              }`}>\n                <p className=\"text-sm\">{message.content}</p>\n              </div>\n              <div className=\"mt-1 text-xs text-gray-500\">\n                {formatTime(message.timestamp)}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Message Input */}\n      <div className=\"p-6 border-t border-gray-200\">\n        <form onSubmit={handleSendMessage} className=\"flex items-end gap-3\">\n          <div className=\"flex-1\">\n            <textarea\n              value={newMessage}\n              onChange={(e) => setNewMessage(e.target.value)}\n              placeholder=\"Type your response...\"\n              rows={3}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none\"\n              onKeyDown={(e) => {\n                if (e.key === 'Enter' && !e.shiftKey) {\n                  e.preventDefault();\n                  handleSendMessage(e);\n                }\n              }}\n            />\n            <div className=\"mt-2 flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <button\n                  type=\"button\"\n                  className=\"p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100\"\n                >\n                  <PaperClipIcon className=\"h-4 w-4\" />\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100\"\n                >\n                  <FaceSmileIcon className=\"h-4 w-4\" />\n                </button>\n              </div>\n              <div className=\"text-xs text-gray-500\">\n                Press Enter to send, Shift+Enter for new line\n              </div>\n            </div>\n          </div>\n          \n          <button\n            type=\"submit\"\n            disabled={!newMessage.trim() || sendMessageMutation.isLoading}\n            className=\"p-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed\"\n          >\n            <PaperAirplaneIcon className=\"h-4 w-4\" />\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/support/components/ThreadList.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":212,"column":23,"nodeType":"JSXOpeningElement","endLine":216,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { \n  MagnifyingGlassIcon,\n  ClockIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  ChatBubbleLeftIcon\n} from '@heroicons/react/24/outline';\n\ninterface ThreadListProps {\n  selectedThread: string | null;\n  onSelectThread: (threadId: string) => void;\n}\n\n// Mock threads data\nconst mockThreads = [\n  {\n    id: '1',\n    customer: {\n      name: 'Sarah Johnson',\n      email: 'sarah.johnson@example.com',\n      avatar: null,\n    },\n    subject: 'Issue with AI Content Generator',\n    lastMessage: 'I see the issue. For more personalized content, try providing...',\n    lastMessageTime: new Date('2024-01-16T09:07:00Z'),\n    status: 'open',\n    priority: 'medium',\n    channel: 'whatsapp',\n    unreadCount: 2,\n    isAiHandled: true,\n  },\n  {\n    id: '2',\n    customer: {\n      name: 'Mike Chen',\n      email: 'mike.chen@techstartup.com',\n      avatar: null,\n    },\n    subject: 'Billing Question',\n    lastMessage: 'Can you help me understand the pricing for the enterprise plan?',\n    lastMessageTime: new Date('2024-01-16T08:45:00Z'),\n    status: 'open',\n    priority: 'high',\n    channel: 'email',\n    unreadCount: 1,\n    isAiHandled: false,\n  },\n  {\n    id: '3',\n    customer: {\n      name: 'Emma Wilson',\n      email: 'emma@creativeco.com',\n      avatar: null,\n    },\n    subject: 'Feature Request',\n    lastMessage: 'Thank you for the detailed explanation!',\n    lastMessageTime: new Date('2024-01-16T07:30:00Z'),\n    status: 'resolved',\n    priority: 'low',\n    channel: 'chat',\n    unreadCount: 0,\n    isAiHandled: true,\n  },\n  {\n    id: '4',\n    customer: {\n      name: 'David Rodriguez',\n      email: 'david.r@agency.com',\n      avatar: null,\n    },\n    subject: 'API Integration Help',\n    lastMessage: 'I\\'m having trouble with the webhook setup...',\n    lastMessageTime: new Date('2024-01-16T06:15:00Z'),\n    status: 'pending',\n    priority: 'high',\n    channel: 'email',\n    unreadCount: 3,\n    isAiHandled: false,\n  },\n];\n\nexport default function ThreadList({ selectedThread, onSelectThread }: ThreadListProps) {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filterStatus, setFilterStatus] = useState('all');\n\n  const filteredThreads = mockThreads.filter(thread => {\n    const matchesSearch = \n      thread.customer.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      thread.subject.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      thread.customer.email.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesFilter = filterStatus === 'all' || thread.status === filterStatus;\n    \n    return matchesSearch && matchesFilter;\n  });\n\n  const sortedThreads = filteredThreads.sort((a, b) => {\n    // Sort by priority first (high > medium > low)\n    const priorityOrder = { high: 3, medium: 2, low: 1 };\n    const priorityDiff = priorityOrder[b.priority as keyof typeof priorityOrder] - priorityOrder[a.priority as keyof typeof priorityOrder];\n    \n    if (priorityDiff !== 0) return priorityDiff;\n    \n    // Then by last message time (newest first)\n    return b.lastMessageTime.getTime() - a.lastMessageTime.getTime();\n  });\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'open':\n        return <ExclamationTriangleIcon className=\"h-4 w-4 text-red-500\" />;\n      case 'pending':\n        return <ClockIcon className=\"h-4 w-4 text-yellow-500\" />;\n      case 'resolved':\n        return <CheckCircleIcon className=\"h-4 w-4 text-green-500\" />;\n      default:\n        return <ChatBubbleLeftIcon className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low':\n        return 'bg-green-100 text-green-800 border-green-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getChannelColor = (channel: string) => {\n    switch (channel) {\n      case 'whatsapp':\n        return 'bg-green-500';\n      case 'email':\n        return 'bg-blue-500';\n      case 'chat':\n        return 'bg-purple-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const formatTime = (date: Date) => {\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMins = Math.floor(diffMs / (1000 * 60));\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n\n    if (diffMins < 1) return 'Just now';\n    if (diffMins < 60) return `${diffMins}m ago`;\n    if (diffHours < 24) return `${diffHours}h ago`;\n    if (diffDays < 7) return `${diffDays}d ago`;\n    \n    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n  };\n\n  return (\n    <div className=\"h-full flex flex-col bg-white\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-200\">\n        <div className=\"relative mb-4\">\n          <MagnifyingGlassIcon className=\"h-4 w-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search conversations...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n        </div>\n        \n        <select\n          value={filterStatus}\n          onChange={(e) => setFilterStatus(e.target.value)}\n          className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"all\">All Tickets</option>\n          <option value=\"open\">Open</option>\n          <option value=\"pending\">Pending</option>\n          <option value=\"resolved\">Resolved</option>\n        </select>\n      </div>\n\n      {/* Thread List */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {sortedThreads.length === 0 ? (\n          <div className=\"p-4 text-center text-gray-500\">\n            <ChatBubbleLeftIcon className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\n            <p>No conversations found</p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-200\">\n            {sortedThreads.map((thread) => (\n              <div\n                key={thread.id}\n                onClick={() => onSelectThread(thread.id)}\n                className={`p-4 cursor-pointer hover:bg-gray-50 transition-colors ${\n                  selectedThread === thread.id ? 'bg-blue-50 border-r-2 border-blue-500' : ''\n                }`}\n              >\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                    {thread.customer.avatar ? (\n                      <img \n                        src={thread.customer.avatar} \n                        alt={thread.customer.name}\n                        className=\"w-10 h-10 rounded-full\"\n                      />\n                    ) : (\n                      <span className=\"text-sm font-medium text-gray-600\">\n                        {thread.customer.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                      </span>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <h4 className=\"font-medium text-gray-900 truncate\">\n                        {thread.customer.name}\n                      </h4>\n                      <div className=\"flex items-center gap-1\">\n                        {thread.unreadCount > 0 && (\n                          <span className=\"w-5 h-5 bg-blue-600 text-white text-xs rounded-full flex items-center justify-center\">\n                            {thread.unreadCount}\n                          </span>\n                        )}\n                        {getStatusIcon(thread.status)}\n                      </div>\n                    </div>\n                    \n                    <p className=\"text-sm font-medium text-gray-800 mb-1 truncate\">\n                      {thread.subject}\n                    </p>\n                    \n                    <p className=\"text-sm text-gray-600 mb-2 line-clamp-2\">\n                      {thread.lastMessage}\n                    </p>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className={`w-2 h-2 rounded-full ${getChannelColor(thread.channel)}`}></div>\n                        <span className=\"text-xs text-gray-500 capitalize\">{thread.channel}</span>\n                        <span className={`px-2 py-1 text-xs rounded-full border ${getPriorityColor(thread.priority)}`}>\n                          {thread.priority}\n                        </span>\n                        {thread.isAiHandled && (\n                          <span className=\"px-2 py-1 text-xs bg-purple-100 text-purple-800 rounded-full\">\n                            AI\n                          </span>\n                        )}\n                      </div>\n                      <span className=\"text-xs text-gray-500\">\n                        {formatTime(thread.lastMessageTime)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/support/faq/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":27,"column":68,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[877,1068],"text":"\n              Get instant answers to common questions about NeonHub&apos;s AI marketing platform. \n              Can't find what you're looking for? Our support team is here to help.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[877,1068],"text":"\n              Get instant answers to common questions about NeonHub&lsquo;s AI marketing platform. \n              Can't find what you're looking for? Our support team is here to help.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[877,1068],"text":"\n              Get instant answers to common questions about NeonHub&#39;s AI marketing platform. \n              Can't find what you're looking for? Our support team is here to help.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[877,1068],"text":"\n              Get instant answers to common questions about NeonHub&rsquo;s AI marketing platform. \n              Can't find what you're looking for? Our support team is here to help.\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":28,"column":18,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[877,1068],"text":"\n              Get instant answers to common questions about NeonHub's AI marketing platform. \n              Can&apos;t find what you're looking for? Our support team is here to help.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[877,1068],"text":"\n              Get instant answers to common questions about NeonHub's AI marketing platform. \n              Can&lsquo;t find what you're looking for? Our support team is here to help.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[877,1068],"text":"\n              Get instant answers to common questions about NeonHub's AI marketing platform. \n              Can&#39;t find what you're looking for? Our support team is here to help.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[877,1068],"text":"\n              Get instant answers to common questions about NeonHub's AI marketing platform. \n              Can&rsquo;t find what you're looking for? Our support team is here to help.\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":28,"column":34,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[877,1068],"text":"\n              Get instant answers to common questions about NeonHub's AI marketing platform. \n              Can't find what you&apos;re looking for? Our support team is here to help.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[877,1068],"text":"\n              Get instant answers to common questions about NeonHub's AI marketing platform. \n              Can't find what you&lsquo;re looking for? Our support team is here to help.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[877,1068],"text":"\n              Get instant answers to common questions about NeonHub's AI marketing platform. \n              Can't find what you&#39;re looking for? Our support team is here to help.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[877,1068],"text":"\n              Get instant answers to common questions about NeonHub's AI marketing platform. \n              Can't find what you&rsquo;re looking for? Our support team is here to help.\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":93,"column":39,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3547,3587],"text":"\n                  Showing results for &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3547,3587],"text":"\n                  Showing results for &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3547,3587],"text":"\n                  Showing results for &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3547,3587],"text":"\n                  Showing results for &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":93,"column":69,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3616,3636],"text":"&quot;\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3616,3636],"text":"&ldquo;\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3616,3636],"text":"&#34;\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3616,3636],"text":"&rdquo;\n                  "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":200,"column":32,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8256,8317],"text":"\n            Still need help? We&apos;re here for you! \n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8256,8317],"text":"\n            Still need help? We&lsquo;re here for you! \n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8256,8317],"text":"\n            Still need help? We&#39;re here for you! \n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8256,8317],"text":"\n            Still need help? We&rsquo;re here for you! \n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":203,"column":94,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8385,8572],"text":"\n            Our expert support team is available 24/7 to help you get the most out of NeonHub&apos;s \n            AI marketing platform. Get personalized assistance within minutes.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8385,8572],"text":"\n            Our expert support team is available 24/7 to help you get the most out of NeonHub&lsquo;s \n            AI marketing platform. Get personalized assistance within minutes.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8385,8572],"text":"\n            Our expert support team is available 24/7 to help you get the most out of NeonHub&#39;s \n            AI marketing platform. Get personalized assistance within minutes.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8385,8572],"text":"\n            Our expert support team is available 24/7 to help you get the most out of NeonHub&rsquo;s \n            AI marketing platform. Get personalized assistance within minutes.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { MagnifyingGlassIcon } from '@heroicons/react/24/outline';\nimport { \n  FaqAccordion, \n  FaqCategorySelector, \n  QuickHelpTopics, \n  SupportContactInfo \n} from '@/components/FaqAccordion';\nimport { faq } from '@/lib/faq';\n\nexport default function FAQPage() {\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\n              📚 Frequently Asked Questions\n            </h1>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Get instant answers to common questions about NeonHub's AI marketing platform. \n              Can't find what you're looking for? Our support team is here to help.\n            </p>\n          </div>\n\n          {/* Search Bar */}\n          <div className=\"max-w-2xl mx-auto mt-8\">\n            <div className=\"relative\">\n              <MagnifyingGlassIcon className=\"absolute left-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search questions, keywords, or topics...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-12 pr-4 py-4 text-lg border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent shadow-sm\"\n              />\n            </div>\n          </div>\n\n          {/* Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mt-8\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-blue-600\">\n                {faq.categories.reduce((sum, cat) => sum + cat.questions.length, 0)}\n              </div>\n              <div className=\"text-sm text-gray-600\">Total Questions</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-green-600\">\n                {faq.categories.length}\n              </div>\n              <div className=\"text-sm text-gray-600\">Categories</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-purple-600\">\n                {faq.supportContact.satisfactionScore}/5.0\n              </div>\n              <div className=\"text-sm text-gray-600\">Support Rating</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-orange-600\">\n                {faq.supportContact.averageResponseTime}\n              </div>\n              <div className=\"text-sm text-gray-600\">Response Time</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Quick Start Guide */}\n        <QuickHelpTopics />\n\n        {/* Category Selector */}\n        <FaqCategorySelector \n          selectedCategory={selectedCategory}\n          onCategoryChange={setSelectedCategory}\n        />\n\n        {/* Search Results Info */}\n        {searchTerm && (\n          <div className=\"mb-6\">\n            <p className=\"text-gray-600\">\n              {searchTerm ? (\n                <>\n                  Showing results for \"<strong>{searchTerm}</strong>\"\n                  {selectedCategory !== 'all' && (\n                    <> in <strong>{faq.categories.find(c => c.id === selectedCategory)?.name}</strong></>\n                  )}\n                </>\n              ) : (\n                selectedCategory !== 'all' && (\n                  <>Showing all questions in <strong>{faq.categories.find(c => c.id === selectedCategory)?.name}</strong></>\n                )\n              )}\n            </p>\n          </div>\n        )}\n\n        {/* FAQ Accordion */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2\">\n            <FaqAccordion \n              selectedCategory={selectedCategory}\n              searchTerm={searchTerm}\n            />\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Popular Questions */}\n            <div className=\"bg-white rounded-lg p-6 shadow-sm\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">🔥 Most Popular</h3>\n              <div className=\"space-y-3\">\n                {faq.categories\n                  .flatMap(cat => cat.questions)\n                  .sort((a, b) => (b.helpful / (b.helpful + b.notHelpful)) - (a.helpful / (a.helpful + a.notHelpful)))\n                  .slice(0, 5)\n                  .map((question) => (\n                    <div key={question.id} className=\"text-sm\">\n                      <button \n                        onClick={() => {\n                          setSelectedCategory(question.category);\n                          setSearchTerm('');\n                        }}\n                        className=\"text-blue-600 hover:text-blue-700 text-left\"\n                      >\n                        {question.question}\n                      </button>\n                      <div className=\"text-xs text-gray-500 mt-1\">\n                        {Math.round((question.helpful / (question.helpful + question.notHelpful)) * 100)}% helpful\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            </div>\n\n            {/* Feature Requests */}\n            <div className=\"bg-white rounded-lg p-6 shadow-sm\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">💡 Feature Requests</h3>\n              <div className=\"space-y-3\">\n                <div>\n                  <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Most Requested</h4>\n                  <ul className=\"space-y-1\">\n                    {faq.featureRequests.popular.slice(0, 3).map((request, index) => (\n                      <li key={index} className=\"text-sm text-gray-600 flex items-center\">\n                        <span className=\"w-2 h-2 bg-blue-400 rounded-full mr-2 flex-shrink-0\"></span>\n                        {request}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"text-sm font-medium text-gray-900 mb-2\">In Development</h4>\n                  <ul className=\"space-y-1\">\n                    {faq.featureRequests.inDevelopment.slice(0, 2).map((feature, index) => (\n                      <li key={index} className=\"text-sm text-gray-600 flex items-center\">\n                        <span className=\"w-2 h-2 bg-green-400 rounded-full mr-2 flex-shrink-0\"></span>\n                        {feature}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n\n            {/* Troubleshooting */}\n            <div className=\"bg-white rounded-lg p-6 shadow-sm\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">🔧 Quick Fixes</h3>\n              <div className=\"space-y-3\">\n                {faq.troubleshooting.map((issue, index) => (\n                  <div key={index} className=\"border-l-4 border-orange-400 pl-3\">\n                    <div className=\"text-sm font-medium text-gray-900\">{issue.issue}</div>\n                    <div className=\"text-xs text-gray-600 mt-1\">{issue.solution}</div>\n                    <div className=\"text-xs text-orange-600 mt-1\">\n                      ~{issue.estimatedTime}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Contact Support Section */}\n        <div className=\"mt-12\">\n          <SupportContactInfo />\n        </div>\n\n        {/* Bottom CTA */}\n        <div className=\"mt-12 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg p-8 text-center\">\n          <h3 className=\"text-2xl font-bold text-white mb-4\">\n            Still need help? We're here for you! \n          </h3>\n          <p className=\"text-blue-100 mb-6 max-w-2xl mx-auto\">\n            Our expert support team is available 24/7 to help you get the most out of NeonHub's \n            AI marketing platform. Get personalized assistance within minutes.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <button className=\"bg-white text-blue-600 px-6 py-3 rounded-lg font-semibold hover:bg-gray-50 transition-colors\">\n              💬 Start Live Chat\n            </button>\n            <button className=\"bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-800 transition-colors\">\n              📧 Send Email\n            </button>\n            <button className=\"bg-purple-700 text-white px-6 py-3 rounded-lg font-semibold hover:bg-purple-800 transition-colors\">\n              📞 Schedule Call\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/app/support/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":332,"column":17,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":332,"endColumn":32},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'analyzeSentimentMutation' and 'selectedTicketData'. Either include them or remove the dependency array.","line":420,"column":6,"nodeType":"ArrayExpression","endLine":420,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [analyzeSentimentMutation, selectedTicket, selectedTicketData]","fix":{"range":[13272,13288],"text":"[analyzeSentimentMutation, selectedTicket, selectedTicketData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useCallback, useEffect } from 'react';\nimport { format } from 'date-fns';\nimport { trpc } from '@/lib/trpc';\n\n// Types\ninterface SupportTicket {\n  id: string;\n  customer: {\n    id: string;\n    name: string;\n    email: string;\n    phone?: string;\n    avatar?: string;\n    tier: 'basic' | 'premium' | 'enterprise';\n    segments: string[];\n    totalTickets: number;\n    averageRating: number;\n    lastContact: Date;\n  };\n  subject: string;\n  lastMessage: string;\n  lastMessageTime: Date;\n  status: 'open' | 'in_progress' | 'pending_customer' | 'resolved' | 'closed';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  channel: 'whatsapp' | 'email' | 'chat' | 'phone' | 'social';\n  assignedTo?: string;\n  escalated: boolean;\n  messages: Message[];\n  sentiment?: {\n    sentiment: 'positive' | 'neutral' | 'negative';\n    score: number;\n    confidence: number;\n  };\n}\n\ninterface Message {\n  id: string;\n  sender: 'customer' | 'agent' | 'ai';\n  content: string;\n  timestamp: Date;\n  type: 'text' | 'image' | 'file';\n  sentiment?: {\n    sentiment: 'positive' | 'neutral' | 'negative';\n    score: number;\n  };\n}\n\ninterface AgentSuggestion {\n  reply: string;\n  confidence: number;\n  tone: string;\n  escalationRecommended: boolean;\n  suggestedActions: string[];\n}\n\nconst MOCK_TICKETS: SupportTicket[] = [\n  {\n    id: 'ticket_1',\n    customer: {\n      id: 'cust_1',\n      name: 'Sarah Johnson',\n      email: 'sarah.johnson@example.com',\n      phone: '+1-555-0123',\n      tier: 'premium',\n      segments: ['Restaurant Owner', 'Active User'],\n      totalTickets: 3,\n      averageRating: 4.5,\n      lastContact: new Date('2024-01-16T09:00:00Z')\n    },\n    subject: 'AI Content Generator Issues',\n    lastMessage: 'The suggestions are too generic for my restaurant brand',\n    lastMessageTime: new Date('2024-01-16T09:05:00Z'),\n    status: 'open',\n    priority: 'medium',\n    channel: 'whatsapp',\n    escalated: false,\n    sentiment: { sentiment: 'negative', score: -0.3, confidence: 0.85 },\n    messages: [\n      {\n        id: 'msg_1',\n        sender: 'customer',\n        content: 'Hi, I\\'m having trouble with the AI content generator. It keeps giving me generic responses.',\n        timestamp: new Date('2024-01-16T09:00:00Z'),\n        type: 'text',\n        sentiment: { sentiment: 'negative', score: -0.2 }\n      },\n      {\n        id: 'msg_2',\n        sender: 'customer',\n        content: 'The suggestions are too generic for my restaurant brand. I need more personalized content.',\n        timestamp: new Date('2024-01-16T09:05:00Z'),\n        type: 'text',\n        sentiment: { sentiment: 'negative', score: -0.3 }\n      }\n    ]\n  },\n  {\n    id: 'ticket_2',\n    customer: {\n      id: 'cust_2',\n      name: 'Mike Chen',\n      email: 'mike.chen@techstartup.com',\n      tier: 'enterprise',\n      segments: ['Tech Startup', 'High Value'],\n      totalTickets: 1,\n      averageRating: 5.0,\n      lastContact: new Date('2024-01-16T08:45:00Z')\n    },\n    subject: 'Enterprise Plan Billing Question',\n    lastMessage: 'Can you help me understand the pricing?',\n    lastMessageTime: new Date('2024-01-16T08:45:00Z'),\n    status: 'open',\n    priority: 'high',\n    channel: 'email',\n    escalated: false,\n    sentiment: { sentiment: 'neutral', score: 0.1, confidence: 0.75 },\n    messages: [\n      {\n        id: 'msg_3',\n        sender: 'customer',\n        content: 'Can you help me understand the pricing for the enterprise plan? I need details about volume discounts.',\n        timestamp: new Date('2024-01-16T08:45:00Z'),\n        type: 'text',\n        sentiment: { sentiment: 'neutral', score: 0.1 }\n      }\n    ]\n  },\n  {\n    id: 'ticket_3',\n    customer: {\n      id: 'cust_3',\n      name: 'Emma Wilson',\n      email: 'emma@creativeco.com',\n      tier: 'basic',\n      segments: ['Creative Agency', 'New User'],\n      totalTickets: 2,\n      averageRating: 4.0,\n      lastContact: new Date('2024-01-16T07:30:00Z')\n    },\n    subject: 'Feature Request - Templates',\n    lastMessage: 'Thank you for the detailed explanation!',\n    lastMessageTime: new Date('2024-01-16T07:30:00Z'),\n    status: 'resolved',\n    priority: 'low',\n    channel: 'chat',\n    escalated: false,\n    sentiment: { sentiment: 'positive', score: 0.7, confidence: 0.92 },\n    messages: [\n      {\n        id: 'msg_4',\n        sender: 'customer',\n        content: 'Could you add more design templates to the platform?',\n        timestamp: new Date('2024-01-16T07:15:00Z'),\n        type: 'text',\n        sentiment: { sentiment: 'neutral', score: 0.0 }\n      },\n      {\n        id: 'msg_5',\n        sender: 'agent',\n        content: 'Thanks for the suggestion! We\\'re working on expanding our template library. I\\'ll add your request to our product roadmap.',\n        timestamp: new Date('2024-01-16T07:25:00Z'),\n        type: 'text'\n      },\n      {\n        id: 'msg_6',\n        sender: 'customer',\n        content: 'Thank you for the detailed explanation!',\n        timestamp: new Date('2024-01-16T07:30:00Z'),\n        type: 'text',\n        sentiment: { sentiment: 'positive', score: 0.7 }\n      }\n    ]\n  }\n];\n\nconst AGENTS = [\n  'Sarah Thompson',\n  'Michael Rodriguez',\n  'Emily Davis', \n  'David Kim',\n  'Jessica Brown'\n];\n\nexport default function CustomerSupportInboxPage(): JSX.Element {\n  // State\n  const [selectedTicket, setSelectedTicket] = useState<string | null>(null);\n  const [tickets, setTickets] = useState<SupportTicket[]>(MOCK_TICKETS);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [newMessage, setNewMessage] = useState('');\n  const [showCustomerProfile, setShowCustomerProfile] = useState(false);\n  const [agentSuggestion, setAgentSuggestion] = useState<AgentSuggestion | null>(null);\n  const [showToast, setShowToast] = useState<{ show: boolean; message: string; type: 'success' | 'error' }>({ show: false, message: '', type: 'success' });\n\n  const selectedTicketData = selectedTicket ? tickets.find(t => t.id === selectedTicket) : null;\n\n  // tRPC hooks\n  const _classifyMessageMutation = trpc.support.classifyMessage.useMutation();\n  const generateReplyMutation = trpc.support.generateReply.useMutation({\n    onSuccess: (data) => {\n      if (data.success && data.data) {\n        setAgentSuggestion({\n          reply: data.data.reply,\n          confidence: data.data.confidence,\n          tone: data.data.tone,\n          escalationRecommended: data.data.escalationRecommended,\n          suggestedActions: data.data.suggestedActions || []\n        });\n        showToastMessage('AI reply generated successfully!', 'success');\n      }\n    },\n    onError: (error) => {\n      showToastMessage(error.message, 'error');\n    },\n  });\n\n  const analyzeSentimentMutation = trpc.support.analyzeSentiment.useMutation({\n    onSuccess: (data) => {\n      if (data.success && data.data && selectedTicketData) {\n        // Update the selected ticket with sentiment data\n        setTickets(prev => prev.map(ticket => \n          ticket.id === selectedTicket \n            ? { ...ticket, sentiment: data.data }\n            : ticket\n        ));\n      }\n    },\n  });\n\n  const escalateTicketMutation = trpc.support.escalateTicket.useMutation({\n    onSuccess: (data) => {\n      if (data.success && selectedTicketData) {\n        setTickets(prev => prev.map(ticket => \n          ticket.id === selectedTicket \n            ? { ...ticket, escalated: true, priority: 'critical' }\n            : ticket\n        ));\n        showToastMessage('Ticket escalated successfully!', 'success');\n      }\n    },\n    onError: (error) => {\n      showToastMessage(error.message, 'error');\n    },\n  });\n\n  // Helper functions\n  const showToastMessage = (message: string, type: 'success' | 'error'): void => {\n    setShowToast({ show: true, message, type });\n    setTimeout(() => setShowToast({ show: false, message: '', type: 'success' }), 3000);\n  };\n\n  const filteredTickets = tickets.filter(ticket => {\n    const matchesSearch = \n      ticket.customer.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      ticket.subject.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      ticket.customer.email.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesFilter = statusFilter === 'all' || ticket.status === statusFilter;\n    \n    return matchesSearch && matchesFilter;\n  });\n\n  const handleGenerateAIReply = useCallback(async (): Promise<void> => {\n    if (!selectedTicketData || !selectedTicketData.messages.length) return;\n\n    const lastCustomerMessage = selectedTicketData.messages\n      .filter(m => m.sender === 'customer')\n      .pop();\n\n    if (!lastCustomerMessage) return;\n\n    generateReplyMutation.mutate({\n      message: lastCustomerMessage.content,\n      tone: 'professional',\n      customer: {\n        name: selectedTicketData.customer.name,\n        tier: selectedTicketData.customer.tier,\n      },\n      context: {\n        ticketHistory: selectedTicketData.messages.map(m => ({\n          message: m.content,\n          response: m.sender === 'agent' ? m.content : undefined,\n          timestamp: m.timestamp\n        }))\n      }\n    });\n  }, [selectedTicketData, generateReplyMutation]);\n\n  const handleSendMessage = useCallback(async (): Promise<void> => {\n    if (!newMessage.trim() || !selectedTicketData) return;\n\n    const newMsg: Message = {\n      id: `msg_${Date.now()}`,\n      sender: 'agent',\n      content: newMessage,\n      timestamp: new Date(),\n      type: 'text'\n    };\n\n    setTickets(prev => prev.map(ticket => \n      ticket.id === selectedTicket \n        ? { \n            ...ticket, \n            messages: [...ticket.messages, newMsg],\n            lastMessage: newMessage,\n            lastMessageTime: new Date()\n          }\n        : ticket\n    ));\n\n    setNewMessage('');\n    setAgentSuggestion(null);\n    showToastMessage('Message sent successfully!', 'success');\n  }, [newMessage, selectedTicketData, selectedTicket]);\n\n  const handleStatusChange = (newStatus: string): void => {\n    if (!selectedTicketData) return;\n\n    setTickets(prev => prev.map(ticket => \n      ticket.id === selectedTicket \n        ? { ...ticket, status: newStatus as SupportTicket['status'] }\n        : ticket\n    ));\n  };\n\n  const handleEscalateTicket = useCallback((): void => {\n    if (!selectedTicketData) return;\n\n    escalateTicketMutation.mutate({\n      ticketId: selectedTicket!,\n      reason: 'Customer requires specialized assistance',\n      priority: 'critical',\n      urgency: 'high'\n    });\n  }, [selectedTicketData, selectedTicket, escalateTicketMutation]);\n\n  const handleAssignAgent = (agentName: string): void => {\n    if (!selectedTicketData) return;\n\n    setTickets(prev => prev.map(ticket => \n      ticket.id === selectedTicket \n        ? { ...ticket, assignedTo: agentName }\n        : ticket\n    ));\n  };\n\n  const useSuggestedReply = (): void => {\n    if (agentSuggestion) {\n      setNewMessage(agentSuggestion.reply);\n      setAgentSuggestion(null);\n    }\n  };\n\n  const getSentimentColor = (sentiment?: { sentiment: string; score: number }): string => {\n    if (!sentiment) return 'bg-gray-100 text-gray-800';\n    \n    switch (sentiment.sentiment) {\n      case 'positive': return 'bg-green-100 text-green-800';\n      case 'negative': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getSentimentIcon = (sentiment?: { sentiment: string }): string => {\n    if (!sentiment) return '😐';\n    \n    switch (sentiment.sentiment) {\n      case 'positive': return '😊';\n      case 'negative': return '😟';\n      default: return '😐';\n    }\n  };\n\n  const getPriorityColor = (priority: string): string => {\n    switch (priority) {\n      case 'critical': return 'bg-red-600 text-white';\n      case 'high': return 'bg-red-100 text-red-800';\n      case 'medium': return 'bg-yellow-100 text-yellow-800';\n      case 'low': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusColor = (status: string): string => {\n    switch (status) {\n      case 'open': return 'bg-blue-100 text-blue-800';\n      case 'in_progress': return 'bg-yellow-100 text-yellow-800';\n      case 'pending_customer': return 'bg-orange-100 text-orange-800';\n      case 'resolved': return 'bg-green-100 text-green-800';\n      case 'closed': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatTime = (date: Date): string => {\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMins = Math.floor(diffMs / (1000 * 60));\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n\n    if (diffMins < 1) return 'Just now';\n    if (diffMins < 60) return `${diffMins}m ago`;\n    if (diffHours < 24) return `${diffHours}h ago`;\n    \n    return format(date, 'MMM dd, h:mm a');\n  };\n\n  // Auto-analyze sentiment when ticket is selected\n  useEffect(() => {\n    if (selectedTicketData && selectedTicketData.messages.length > 0) {\n      const lastMessage = selectedTicketData.messages[selectedTicketData.messages.length - 1];\n      if (lastMessage.sender === 'customer' && !lastMessage.sentiment) {\n        analyzeSentimentMutation.mutate({\n          message: lastMessage.content\n        });\n      }\n    }\n  }, [selectedTicket]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 flex\">\n      {/* Toast Notification */}\n      {showToast.show && (\n        <div className={`fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg transition-all duration-300 ${\n          showToast.type === 'success' ? 'bg-green-600' : 'bg-red-600'\n        } text-white`}>\n          {showToast.message}\n        </div>\n      )}\n\n      {/* Sidebar - Ticket List */}\n      <div className=\"w-80 bg-slate-800/50 backdrop-blur-sm border-r border-slate-700\">\n      {/* Header */}\n        <div className=\"p-4 border-b border-slate-700\">\n          <h1 className=\"text-xl font-bold text-white mb-4\">📞 Support Inbox</h1>\n          \n          {/* Search */}\n          <div className=\"relative mb-4\">\n            <input\n              type=\"text\"\n              placeholder=\"Search tickets...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 pl-10 text-white placeholder:text-slate-400 focus:outline-none focus:border-blue-500\"\n            />\n            <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400\">🔍</span>\n          </div>\n\n          {/* Filter */}\n          <select\n            value={statusFilter}\n            onChange={(e) => setStatusFilter(e.target.value)}\n            className=\"w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500\"\n          >\n            <option value=\"all\">All Tickets</option>\n            <option value=\"open\">Open</option>\n            <option value=\"in_progress\">In Progress</option>\n            <option value=\"pending_customer\">Pending Customer</option>\n            <option value=\"resolved\">Resolved</option>\n            <option value=\"closed\">Closed</option>\n          </select>\n        </div>\n\n        {/* Ticket List */}\n        <div className=\"flex-1 overflow-y-auto\">\n          {filteredTickets.map((ticket) => (\n            <div\n              key={ticket.id}\n              onClick={() => setSelectedTicket(ticket.id)}\n              className={`p-4 border-b border-slate-700 cursor-pointer hover:bg-slate-700/30 transition-colors ${\n                selectedTicket === ticket.id ? 'bg-blue-600/20 border-r-2 border-blue-500' : ''\n              }`}\n            >\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-10 h-10 bg-slate-600 rounded-full flex items-center justify-center text-white text-sm font-medium\">\n                  {ticket.customer.name.split(' ').map(n => n[0]).join('')}\n                </div>\n                \n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <h3 className=\"font-medium text-white truncate\">{ticket.customer.name}</h3>\n                    <div className=\"flex items-center gap-1\">\n                      {ticket.escalated && <span className=\"text-red-400\">🚨</span>}\n                      <span className={`px-2 py-1 rounded-full text-xs ${getSentimentColor(ticket.sentiment)}`}>\n                        {getSentimentIcon(ticket.sentiment)}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <p className=\"text-sm font-medium text-slate-200 mb-1 truncate\">{ticket.subject}</p>\n                  <p className=\"text-sm text-slate-400 mb-2 line-clamp-2\">{ticket.lastMessage}</p>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className={`px-2 py-1 text-xs rounded-full ${getPriorityColor(ticket.priority)}`}>\n                        {ticket.priority}\n                      </span>\n                      <span className={`px-2 py-1 text-xs rounded-full ${getStatusColor(ticket.status)}`}>\n                        {ticket.status.replace('_', ' ')}\n                      </span>\n                    </div>\n                    <span className=\"text-xs text-slate-500\">{formatTime(ticket.lastMessageTime)}</span>\n          </div>\n          </div>\n          </div>\n          </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Main Content Area */}\n      <div className=\"flex-1 flex\">\n        {/* Ticket Detail Panel */}\n        <div className=\"flex-1 flex flex-col\">\n          {selectedTicketData ? (\n            <>\n              {/* Ticket Header */}\n              <div className=\"bg-slate-800/50 backdrop-blur-sm border-b border-slate-700 p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-12 h-12 bg-slate-600 rounded-full flex items-center justify-center text-white font-medium\">\n                      {selectedTicketData.customer.name.split(' ').map(n => n[0]).join('')}\n                    </div>\n                    <div>\n                      <h2 className=\"text-xl font-semibold text-white\">{selectedTicketData.customer.name}</h2>\n                      <p className=\"text-slate-300\">{selectedTicketData.subject}</p>\n                      <div className=\"flex items-center gap-4 mt-1\">\n                        <span className=\"text-slate-400 text-sm\">{selectedTicketData.customer.email}</span>\n                        <span className=\"text-slate-400 text-sm capitalize\">{selectedTicketData.channel}</span>\n                        <span className={`px-2 py-1 rounded-full text-xs ${getSentimentColor(selectedTicketData.sentiment)}`}>\n                          {getSentimentIcon(selectedTicketData.sentiment)} Sentiment: {selectedTicketData.sentiment?.sentiment || 'Unknown'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-3\">\n                    {/* Status Selector */}\n                    <select\n                      value={selectedTicketData.status}\n                      onChange={(e) => handleStatusChange(e.target.value)}\n                      className=\"bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500\"\n                    >\n                      <option value=\"open\">Open</option>\n                      <option value=\"in_progress\">In Progress</option>\n                      <option value=\"pending_customer\">Pending Customer</option>\n                      <option value=\"resolved\">Resolved</option>\n                      <option value=\"closed\">Closed</option>\n                    </select>\n\n                    {/* Agent Assignment */}\n                    <select\n                      value={selectedTicketData.assignedTo || ''}\n                      onChange={(e) => handleAssignAgent(e.target.value)}\n                      className=\"bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500\"\n                    >\n                      <option value=\"\">Assign Agent</option>\n                      {AGENTS.map(agent => (\n                        <option key={agent} value={agent}>{agent}</option>\n                      ))}\n                    </select>\n\n                    {/* Escalation */}\n                <button\n                      onClick={handleEscalateTicket}\n                      disabled={selectedTicketData.escalated || escalateTicketMutation.isLoading}\n                      className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n                        selectedTicketData.escalated \n                          ? 'bg-red-600/20 text-red-400 cursor-not-allowed' \n                          : 'bg-orange-600 hover:bg-orange-700 text-white'\n                      }`}\n                    >\n                      {selectedTicketData.escalated ? '🚨 Escalated' : '🔼 Escalate'}\n                    </button>\n\n                    {/* Customer Profile Toggle */}\n                    <button\n                      onClick={() => setShowCustomerProfile(!showCustomerProfile)}\n                      className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors\"\n                    >\n                      👤 Profile\n                </button>\n                  </div>\n        </div>\n      </div>\n\n              {/* Messages Area */}\n              <div className=\"flex-1 overflow-y-auto p-6 space-y-4\">\n                {selectedTicketData.messages.map((message) => (\n                  <div\n                    key={message.id}\n                    className={`flex gap-3 ${message.sender === 'customer' ? '' : 'flex-row-reverse'}`}\n                  >\n                    <div className=\"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0\">\n                      {message.sender === 'customer' ? (\n                        <div className=\"w-8 h-8 bg-slate-600 rounded-full flex items-center justify-center text-white text-xs\">\n                          👤\n                        </div>\n                      ) : message.sender === 'ai' ? (\n                        <div className=\"w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center text-white text-xs\">\n                          🤖\n                        </div>\n                      ) : (\n                        <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-xs\">\n                          👨‍💼\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div className={`max-w-md ${message.sender === 'customer' ? '' : 'text-right'}`}>\n                      <div className={`inline-block px-4 py-2 rounded-lg ${\n                        message.sender === 'customer'\n                          ? 'bg-slate-700 text-white'\n                          : message.sender === 'ai'\n                          ? 'bg-purple-600 text-white'\n                          : 'bg-blue-600 text-white'\n                      }`}>\n                        <p className=\"text-sm\">{message.content}</p>\n                      </div>\n                      <div className=\"mt-1 flex items-center gap-2 text-xs text-slate-400\">\n                        <span>{formatTime(message.timestamp)}</span>\n                        {message.sentiment && (\n                          <span className={`px-2 py-1 rounded-full ${getSentimentColor(message.sentiment)}`}>\n                            {getSentimentIcon(message.sentiment)}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {/* AI Suggestion Banner */}\n              {agentSuggestion && (\n                <div className=\"bg-purple-900/20 border-t border-purple-600/30 p-4\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center text-white text-sm\">\n                      🤖\n            </div>\n            <div className=\"flex-1\">\n                      <h4 className=\"text-purple-400 font-medium mb-2\">\n                        AI Suggested Reply (Confidence: {Math.round(agentSuggestion.confidence * 100)}%)\n                      </h4>\n                      <div className=\"bg-slate-800/50 rounded-lg p-3 mb-3\">\n                        <p className=\"text-slate-300 text-sm\">{agentSuggestion.reply}</p>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <button\n                          onClick={useSuggestedReply}\n                          className=\"px-3 py-1 bg-purple-600 hover:bg-purple-700 text-white rounded text-sm\"\n                        >\n                          Use Reply\n                        </button>\n                        <button\n                          onClick={() => setAgentSuggestion(null)}\n                          className=\"px-3 py-1 border border-slate-600 text-slate-300 hover:bg-slate-700 rounded text-sm\"\n                        >\n                          Dismiss\n                        </button>\n                        {agentSuggestion.escalationRecommended && (\n                          <span className=\"px-3 py-1 bg-orange-600/20 text-orange-400 rounded text-sm\">\n                            ⚠️ Escalation Recommended\n                          </span>\n                        )}\n                      </div>\n                    </div>\n            </div>\n          </div>\n        )}\n        \n              {/* Message Composer */}\n              <div className=\"bg-slate-800/50 backdrop-blur-sm border-t border-slate-700 p-6\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"flex-1\">\n                    <textarea\n                      value={newMessage}\n                      onChange={(e) => setNewMessage(e.target.value)}\n                      placeholder=\"Type your response...\"\n                      rows={3}\n                      className=\"w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white placeholder:text-slate-400 focus:outline-none focus:border-blue-500 resize-none\"\n                      onKeyDown={(e) => {\n                        if (e.key === 'Enter' && !e.shiftKey) {\n                          e.preventDefault();\n                          handleSendMessage();\n                        }\n                      }}\n                    />\n                    <div className=\"flex items-center justify-between mt-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <button\n                          onClick={handleGenerateAIReply}\n                          disabled={generateReplyMutation.isLoading}\n                          className=\"px-3 py-1 bg-purple-600 hover:bg-purple-700 disabled:opacity-50 text-white rounded text-sm transition-colors\"\n                        >\n                          {generateReplyMutation.isLoading ? '🤖 Generating...' : '🤖 Generate AI Reply'}\n                        </button>\n                      </div>\n                      <span className=\"text-xs text-slate-500\">Press Enter to send, Shift+Enter for new line</span>\n                    </div>\n                  </div>\n                  \n                  <button\n                    onClick={handleSendMessage}\n                    disabled={!newMessage.trim()}\n                    className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed text-white rounded-lg font-medium transition-colors\"\n                  >\n                    Send\n                  </button>\n                </div>\n              </div>\n            </>\n          ) : (\n            <div className=\"flex-1 flex items-center justify-center bg-slate-800/30\">\n              <div className=\"text-center\">\n                <div className=\"text-6xl mb-4 opacity-50\">📞</div>\n                <h3 className=\"text-xl font-medium text-white mb-2\">Select a ticket</h3>\n                <p className=\"text-slate-400\">Choose a support ticket to start helping customers</p>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Customer Profile Sidebar */}\n        {showCustomerProfile && selectedTicketData && (\n          <div className=\"w-80 bg-slate-800/50 backdrop-blur-sm border-l border-slate-700 p-6 overflow-y-auto\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-lg font-semibold text-white\">Customer Profile</h3>\n              <button\n                onClick={() => setShowCustomerProfile(false)}\n                className=\"text-slate-400 hover:text-white\"\n              >\n                ✕\n              </button>\n            </div>\n\n            {/* Customer Info */}\n            <div className=\"space-y-6\">\n              <div>\n                <div className=\"w-16 h-16 bg-slate-600 rounded-full flex items-center justify-center text-white text-xl font-medium mb-4\">\n                  {selectedTicketData.customer.name.split(' ').map(n => n[0]).join('')}\n          </div>\n                <h4 className=\"text-white font-medium\">{selectedTicketData.customer.name}</h4>\n                <p className=\"text-slate-400 text-sm\">{selectedTicketData.customer.email}</p>\n                {selectedTicketData.customer.phone && (\n                  <p className=\"text-slate-400 text-sm\">{selectedTicketData.customer.phone}</p>\n                )}\n              </div>\n\n              {/* Customer Tier */}\n              <div>\n                <h5 className=\"text-white font-medium mb-2\">Customer Tier</h5>\n                <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n                  selectedTicketData.customer.tier === 'enterprise' ? 'bg-purple-600/20 text-purple-400' :\n                  selectedTicketData.customer.tier === 'premium' ? 'bg-blue-600/20 text-blue-400' :\n                  'bg-gray-600/20 text-gray-400'\n                }`}>\n                  {selectedTicketData.customer.tier.charAt(0).toUpperCase() + selectedTicketData.customer.tier.slice(1)}\n                </span>\n              </div>\n\n              {/* Segments */}\n              <div>\n                <h5 className=\"text-white font-medium mb-2\">Segments</h5>\n                <div className=\"flex flex-wrap gap-2\">\n                  {selectedTicketData.customer.segments.map((segment, index) => (\n                    <span key={index} className=\"px-2 py-1 bg-green-600/20 text-green-400 rounded text-sm\">\n                      {segment}\n                    </span>\n                  ))}\n                </div>\n              </div>\n\n              {/* Stats */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"bg-slate-700/50 rounded-lg p-3 text-center\">\n                  <div className=\"text-white font-semibold\">{selectedTicketData.customer.totalTickets}</div>\n                  <div className=\"text-slate-400 text-xs\">Total Tickets</div>\n                </div>\n                <div className=\"bg-slate-700/50 rounded-lg p-3 text-center\">\n                  <div className=\"text-white font-semibold\">{selectedTicketData.customer.averageRating}</div>\n                  <div className=\"text-slate-400 text-xs\">Avg Rating</div>\n                </div>\n              </div>\n\n              {/* Last Contact */}\n              <div>\n                <h5 className=\"text-white font-medium mb-2\">Last Contact</h5>\n                <p className=\"text-slate-400 text-sm\">{formatTime(selectedTicketData.customer.lastContact)}</p>\n              </div>\n\n              {/* Ticket History */}\n              <div>\n                <h5 className=\"text-white font-medium mb-2\">Recent Tickets</h5>\n                <div className=\"space-y-2\">\n                  {tickets\n                    .filter(t => t.customer.id === selectedTicketData.customer.id)\n                    .slice(0, 3)\n                    .map(ticket => (\n                      <div key={ticket.id} className=\"bg-slate-700/50 rounded-lg p-3\">\n                        <p className=\"text-white text-sm font-medium truncate\">{ticket.subject}</p>\n                        <div className=\"flex items-center justify-between mt-1\">\n                          <span className={`px-2 py-1 text-xs rounded-full ${getStatusColor(ticket.status)}`}>\n                            {ticket.status.replace('_', ' ')}\n                          </span>\n                          <span className=\"text-slate-400 text-xs\">{formatTime(ticket.lastMessageTime)}</span>\n                        </div>\n                      </div>\n                    ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/AgentPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/AgentsTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":150,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":153,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4126,4129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4126,4129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { \n  DocumentTextIcon, \n  MagnifyingGlassIcon,\n  SparklesIcon,\n  CogIcon\n} from '@heroicons/react/24/outline';\nimport ContentAgentTab from './ContentAgentTab';\nimport SEOAgentTab from './SEOAgentTab';\n\nexport default function AgentsTab() {\n  const [activeAgent, setActiveAgent] = useState<'content' | 'seo' | 'overview'>('overview');\n\n  const agents = [\n    { \n      id: 'content', \n      name: 'Content Agent', \n      icon: DocumentTextIcon, \n      color: 'text-blue-400',\n      status: 'active',\n      description: 'AI-powered content generation for all platforms',\n      executions: 1247,\n      successRate: 96.2\n    },\n    { \n      id: 'seo', \n      name: 'SEO Agent', \n      icon: MagnifyingGlassIcon, \n      color: 'text-purple-400',\n      status: 'active',\n      description: 'Search engine optimization and keyword research',\n      executions: 892,\n      successRate: 94.8\n    }\n  ];\n\n  if (activeAgent === 'content') {\n    return (\n      <div>\n        <div className=\"flex items-center justify-between mb-6\">\n          <button\n            onClick={() => setActiveAgent('overview')}\n            className=\"btn-secondary flex items-center space-x-2\"\n          >\n            <span>← Back to Agents</span>\n          </button>\n        </div>\n        <ContentAgentTab />\n      </div>\n    );\n  }\n\n  if (activeAgent === 'seo') {\n    return (\n      <div>\n        <div className=\"flex items-center justify-between mb-6\">\n          <button\n            onClick={() => setActiveAgent('overview')}\n            className=\"btn-secondary flex items-center space-x-2\"\n          >\n            <span>← Back to Agents</span>\n          </button>\n        </div>\n        <SEOAgentTab />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* AI Agent Control Center Header */}\n      <div className=\"card-glow\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <SparklesIcon className=\"h-8 w-8 text-neon-400\" />\n            <div>\n              <h2 className=\"text-xl font-semibold text-white\">AI Agent Control Center</h2>\n              <p className=\"text-dark-400 text-sm\">Manage and monitor your AI marketing agents</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-green-400 text-sm\">2 Active Agents</span>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"text-center\">\n            <p className=\"text-dark-400 text-xs\">Total Executions</p>\n            <p className=\"text-2xl font-bold text-white\">{agents.reduce((sum, agent) => sum + agent.executions, 0).toLocaleString()}</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-dark-400 text-xs\">Avg Success Rate</p>\n            <p className=\"text-2xl font-bold text-green-400\">{(agents.reduce((sum, agent) => sum + agent.successRate, 0) / agents.length).toFixed(1)}%</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-dark-400 text-xs\">Active Agents</p>\n            <p className=\"text-2xl font-bold text-neon-400\">{agents.filter(a => a.status === 'active').length}</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-dark-400 text-xs\">Uptime</p>\n            <p className=\"text-2xl font-bold text-blue-400\">99.8%</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Phase 1 Agents - Content & SEO */}\n      <div className=\"card-glow\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-white\">Phase 1 Agents - Content & SEO</h3>\n          <span className=\"px-3 py-1 bg-green-500/20 text-green-400 text-sm rounded-full\">Active</span>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {agents.map((agent) => (\n            <div key={agent.id} className=\"agent-card cursor-pointer hover:scale-105 transition-transform\" onClick={() => setActiveAgent(agent.id as any)}>\n              <div className=\"flex items-start justify-between mb-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <agent.icon className={`h-10 w-10 ${agent.color}`} />\n                  <div>\n                    <h4 className=\"text-white font-medium\">{agent.name}</h4>\n                    <p className=\"text-dark-400 text-sm\">{agent.description}</p>\n                  </div>\n                </div>\n                <div className={`status-indicator ${agent.status}`}></div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                <div>\n                  <p className=\"text-dark-400 text-xs\">Executions</p>\n                  <p className=\"text-white font-semibold\">{agent.executions.toLocaleString()}</p>\n                </div>\n                <div>\n                  <p className=\"text-dark-400 text-xs\">Success Rate</p>\n                  <p className=\"text-green-400 font-semibold\">{agent.successRate}%</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-dark-400 text-sm capitalize\">Status: {agent.status}</span>\n                <button className=\"btn-pill flex items-center space-x-1\">\n                  <CogIcon className=\"h-4 w-4\" />\n                  <span className=\"text-xs\">Configure</span>\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Phase 2 Agents - Coming Soon */}\n      <div className=\"card-glow\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-white\">Phase 2 Agents - Email, Social & Support</h3>\n          <span className=\"px-3 py-1 bg-yellow-500/20 text-yellow-400 text-sm rounded-full\">In Development</span>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {[\n            { name: 'Email Agent', description: 'Automated email sequences and nurturing', color: 'text-green-400' },\n            { name: 'Social Agent', description: 'Multi-platform social media management', color: 'text-pink-400' },\n            { name: 'Support Agent', description: 'WhatsApp and customer support automation', color: 'text-cyan-400' }\n          ].map((agent, index) => (\n            <div key={index} className=\"agent-card opacity-60\">\n              <div className=\"flex items-center space-x-3 mb-3\">\n                <SparklesIcon className={`h-8 w-8 ${agent.color}`} />\n                <div>\n                  <h4 className=\"text-white font-medium\">{agent.name}</h4>\n                  <p className=\"text-dark-400 text-sm\">{agent.description}</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-dark-400 text-sm\">Status: Coming Soon</span>\n                <span className=\"px-2 py-1 bg-dark-700 text-dark-400 text-xs rounded\">Phase 2</span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"card-glow\">\n        <h3 className=\"text-lg font-semibold text-white mb-4\">Quick Actions</h3>\n        \n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n          <button \n            onClick={() => setActiveAgent('content')}\n            className=\"btn-secondary text-sm py-3\"\n          >\n            Generate Content\n          </button>\n          <button \n            onClick={() => setActiveAgent('seo')}\n            className=\"btn-secondary text-sm py-3\"\n          >\n            SEO Analysis\n          </button>\n          <button className=\"btn-secondary text-sm py-3 opacity-50 cursor-not-allowed\">\n            Send Emails\n          </button>\n          <button className=\"btn-secondary text-sm py-3 opacity-50 cursor-not-allowed\">\n            Schedule Posts\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/AutoReplayDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[363,366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[363,366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { \n  Zap, \n  Play, \n  Pause, \n  TrendingUp, \n  Target, \n  Clock,\n  CheckCircle,\n  XCircle\n} from 'lucide-react';\n\ninterface AutoReplayDashboardProps {\n  analytics: any;\n  isRunning: boolean;\n  onToggle: () => void;\n}\n\nexport function AutoReplayDashboard({ analytics, isRunning, onToggle }: AutoReplayDashboardProps) {\n  return (\n    <div className=\"space-y-6\">\n      {/* Status Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-white mb-2\">Auto-Replay Engine</h2>\n          <p className=\"text-slate-400\">\n            Autonomous campaign replay system with pattern-based optimization\n          </p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <Badge \n            variant=\"outline\" \n            className={`${isRunning ? 'text-green-400 border-green-400' : 'text-gray-400 border-gray-400'}`}\n          >\n            {isRunning ? 'Running' : 'Stopped'}\n          </Badge>\n          <Button onClick={onToggle} variant={isRunning ? \"destructive\" : \"default\"}>\n            {isRunning ? <Pause className=\"w-4 h-4 mr-2\" /> : <Play className=\"w-4 h-4 mr-2\" />}\n            {isRunning ? 'Stop Engine' : 'Start Engine'}\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card className=\"bg-slate-800/50 backdrop-blur-sm border-slate-700/50\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-slate-400\">Total Replays</p>\n                <p className=\"text-2xl font-bold text-white\">{analytics?.totalReplays || 0}</p>\n              </div>\n              <Zap className=\"w-8 h-8 text-neon-blue\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800/50 backdrop-blur-sm border-slate-700/50\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-slate-400\">Success Rate</p>\n                <p className=\"text-2xl font-bold text-white\">\n                  {analytics ? ((analytics.successfulReplays / analytics.totalReplays) * 100).toFixed(1) : 0}%\n                </p>\n              </div>\n              <Target className=\"w-8 h-8 text-green-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800/50 backdrop-blur-sm border-slate-700/50\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-slate-400\">Avg ROI</p>\n                <p className=\"text-2xl font-bold text-white\">{analytics?.averageROI?.toFixed(1) || '0.0'}x</p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-neon-purple\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-slate-800/50 backdrop-blur-sm border-slate-700/50\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-slate-400\">Active Replays</p>\n                <p className=\"text-2xl font-bold text-white\">{analytics?.systemHealth?.activeReplays || 0}</p>\n              </div>\n              <Clock className=\"w-8 h-8 text-yellow-400\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Replays */}\n      <Card className=\"bg-slate-800/50 backdrop-blur-sm border-slate-700/50\">\n        <CardHeader>\n          <CardTitle className=\"text-white\">Recent Auto-Replays</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {[1, 2, 3, 4, 5].map((i) => (\n              <div key={i} className=\"flex items-center justify-between p-3 bg-slate-700/30 rounded-lg\">\n                <div className=\"flex items-center gap-3\">\n                  {Math.random() > 0.3 ? (\n                    <CheckCircle className=\"w-5 h-5 text-green-400\" />\n                  ) : (\n                    <XCircle className=\"w-5 h-5 text-red-400\" />\n                  )}\n                  <div>\n                    <p className=\"font-medium text-white\">Pattern {i} Replay</p>\n                    <p className=\"text-sm text-slate-400\">Brand awareness campaign</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-bold text-neon-blue\">\n                    {(Math.random() * 2 + 1).toFixed(1)}x ROI\n                  </p>\n                  <p className=\"text-xs text-slate-400\">\n                    {Math.floor(Math.random() * 24)}h ago\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/BrandVoiceProfileModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":100,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":103,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3554,3557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3554,3557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":94,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":97,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3652,3655],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3652,3655],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3741,3744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3741,3744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":110,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":110,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3992,4031],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":117,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":117,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4183,4233],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":268,"column":60,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[10515,10660],"text":"\n                    Adjust the sliders to define your brand&apos;s tone characteristics. Higher values indicate stronger emphasis.\n                  "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[10515,10660],"text":"\n                    Adjust the sliders to define your brand&lsquo;s tone characteristics. Higher values indicate stronger emphasis.\n                  "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[10515,10660],"text":"\n                    Adjust the sliders to define your brand&#39;s tone characteristics. Higher values indicate stronger emphasis.\n                  "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[10515,10660],"text":"\n                    Adjust the sliders to define your brand&rsquo;s tone characteristics. Higher values indicate stronger emphasis.\n                  "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":273,"column":71,"nodeType":null,"messageId":"unusedVar","endLine":273,"endColumn":76}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { brand } from '@/lib/brand';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Slider } from '@/components/ui/slider';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { X, Plus, Lightbulb, Save, Upload } from 'lucide-react';\n\nconst profileSchema = z.object({\n  name: z.string().min(1, 'Name is required').max(100, 'Name must be less than 100 characters'),\n  description: z.string().optional(),\n  keywords: z.array(z.string()),\n  tone: z.object({\n    professional: z.number().min(0).max(100),\n    friendly: z.number().min(0).max(100),\n    authoritative: z.number().min(0).max(100),\n    casual: z.number().min(0).max(100),\n    innovative: z.number().min(0).max(100),\n  }),\n  vocabulary: z.object({\n    preferred: z.array(z.string()),\n    prohibited: z.array(z.string()),\n    brandTerms: z.array(z.string()),\n  }),\n  style: z.object({\n    sentenceLength: z.enum(['short', 'medium', 'long']),\n    readingLevel: z.enum(['elementary', 'middle', 'high-school', 'college']),\n    formality: z.enum(['casual', 'semi-formal', 'formal']),\n  }),\n  sampleContent: z.string().optional(),\n});\n\ntype ProfileFormData = z.infer<typeof profileSchema>;\n\ninterface BrandVoiceProfileModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSuccess: () => void;\n  profile?: Partial<ProfileFormData>;\n}\n\nexport function BrandVoiceProfileModal({\n  open,\n  onOpenChange,\n  onSuccess,\n  profile,\n}: BrandVoiceProfileModalProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [newKeyword, setNewKeyword] = useState('');\n  const [newPreferred, setNewPreferred] = useState('');\n  const [newProhibited, setNewProhibited] = useState('');\n  const [newBrandTerm, setNewBrandTerm] = useState('');\n\n  const form = useForm<ProfileFormData>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      name: profile?.name || brand.voice.primary,\n      description: profile?.description || brand.mission,\n      keywords: profile?.keywords || brand.vocabulary.brandTerms,\n      tone: {\n        professional: profile?.tone?.professional || brand.voice.tone.professional,\n        friendly: profile?.tone?.friendly || brand.voice.tone.friendly,\n        authoritative: profile?.tone?.authoritative || brand.voice.tone.authoritative,\n        casual: profile?.tone?.casual || brand.voice.tone.casual,\n        innovative: profile?.tone?.innovative || brand.voice.tone.innovative,\n      },\n      vocabulary: {\n        preferred: profile?.vocabulary?.preferred || brand.vocabulary.preferred,\n        prohibited: profile?.vocabulary?.prohibited || brand.vocabulary.prohibited,\n        brandTerms: profile?.vocabulary?.brandTerms || brand.vocabulary.brandTerms,\n      },\n      style: {\n        sentenceLength: profile?.style?.sentenceLength || brand.guidelines.style.sentenceLength as any,\n        readingLevel: profile?.style?.readingLevel || brand.guidelines.style.readingLevel as any,\n        formality: profile?.style?.formality || brand.guidelines.style.formality as any,\n      },\n      sampleContent: profile?.sampleContent || brand.messaging.primaryValue,\n    },\n  });\n\n  const onSubmit = async (data: ProfileFormData) => {\n    setIsLoading(true);\n    try {\n      // In real implementation, call tRPC mutation\n      console.log('Creating profile:', data);\n      \n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      onSuccess();\n    } catch (error) {\n      console.error('Failed to create profile:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const addArrayItem = (fieldName: keyof Pick<ProfileFormData, 'keywords'> | 'preferred' | 'prohibited' | 'brandTerms', value: string, setter: (value: string) => void) => {\n    if (!value.trim()) return;\n    \n    const currentValue = form.getValues();\n    \n    if (fieldName === 'keywords') {\n      const current = currentValue.keywords || [];\n      if (!current.includes(value.trim())) {\n        form.setValue('keywords', [...current, value.trim()]);\n      }\n    } else {\n      const current = currentValue.vocabulary[fieldName as keyof typeof currentValue.vocabulary] as string[];\n      if (!current.includes(value.trim())) {\n        form.setValue(`vocabulary.${fieldName}`, [...current, value.trim()]);\n      }\n    }\n    \n    setter('');\n  };\n\n  const removeArrayItem = (fieldName: keyof Pick<ProfileFormData, 'keywords'> | 'preferred' | 'prohibited' | 'brandTerms', index: number) => {\n    const currentValue = form.getValues();\n    \n    if (fieldName === 'keywords') {\n      const current = currentValue.keywords || [];\n      form.setValue('keywords', current.filter((_, i) => i !== index));\n    } else {\n      const current = currentValue.vocabulary[fieldName as keyof typeof currentValue.vocabulary] as string[];\n      form.setValue(`vocabulary.${fieldName}`, current.filter((_, i) => i !== index));\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>\n            {profile ? 'Edit Brand Voice Profile' : 'Create Brand Voice Profile'}\n          </DialogTitle>\n          <DialogDescription>\n            Define your brand voice characteristics to maintain consistency across all content.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <Tabs defaultValue=\"basic\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"basic\">Basic Info</TabsTrigger>\n                <TabsTrigger value=\"tone\">Tone Profile</TabsTrigger>\n                <TabsTrigger value=\"vocabulary\">Vocabulary</TabsTrigger>\n                <TabsTrigger value=\"sample\">Sample Content</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"basic\" className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Profile Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., Corporate Professional\" {...field} />\n                      </FormControl>\n                      <FormDescription>\n                        A descriptive name for this brand voice profile\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Describe the characteristics of this brand voice...\"\n                          className=\"min-h-[100px]\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        Optional description to help identify when to use this profile\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"keywords\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Brand Keywords</FormLabel>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex gap-2\">\n                          <Input\n                            placeholder=\"Add a keyword...\"\n                            value={newKeyword}\n                            onChange={(e) => setNewKeyword(e.target.value)}\n                            onKeyDown={(e) => {\n                              if (e.key === 'Enter') {\n                                e.preventDefault();\n                                addArrayItem('keywords', newKeyword, setNewKeyword);\n                              }\n                            }}\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() => addArrayItem('keywords', newKeyword, setNewKeyword)}\n                          >\n                            <Plus className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {field.value?.map((keyword, index) => (\n                            <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                              {keyword}\n                              <X\n                                className=\"h-3 w-3 cursor-pointer\"\n                                onClick={() => removeArrayItem('keywords', index)}\n                              />\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                      <FormDescription>\n                        Keywords that should appear in content following this voice\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </TabsContent>\n\n              <TabsContent value=\"tone\" className=\"space-y-4\">\n                <Alert>\n                  <Lightbulb className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    Adjust the sliders to define your brand's tone characteristics. Higher values indicate stronger emphasis.\n                  </AlertDescription>\n                </Alert>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {Object.entries(form.watch('tone')).map(([toneType, value]) => (\n                    <FormField\n                      key={toneType}\n                      control={form.control}\n                      name={`tone.${toneType as keyof ProfileFormData['tone']}`}\n                      render={({ field }) => (\n                        <FormItem>\n                          <div className=\"flex items-center justify-between\">\n                            <FormLabel className=\"capitalize\">{toneType}</FormLabel>\n                            <span className=\"text-sm font-medium\">{field.value}%</span>\n                          </div>\n                          <FormControl>\n                            <Slider\n                              min={0}\n                              max={100}\n                              step={5}\n                              value={[field.value]}\n                              onValueChange={(value) => field.onChange(value[0])}\n                              className=\"w-full\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  ))}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"vocabulary\" className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  {/* Preferred Words */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg text-green-700\">Preferred Words</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div className=\"flex gap-2\">\n                        <Input\n                          placeholder=\"Add preferred word...\"\n                          value={newPreferred}\n                          onChange={(e) => setNewPreferred(e.target.value)}\n                          onKeyDown={(e) => {\n                            if (e.key === 'Enter') {\n                              e.preventDefault();\n                              addArrayItem('preferred', newPreferred, setNewPreferred);\n                            }\n                          }}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => addArrayItem('preferred', newPreferred, setNewPreferred)}\n                        >\n                          <Plus className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {form.watch('vocabulary.preferred')?.map((word, index) => (\n                          <Badge key={index} variant=\"default\" className=\"flex items-center gap-1\">\n                            {word}\n                            <X\n                              className=\"h-3 w-3 cursor-pointer\"\n                              onClick={() => removeArrayItem('preferred', index)}\n                            />\n                          </Badge>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Prohibited Words */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg text-red-700\">Prohibited Words</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div className=\"flex gap-2\">\n                        <Input\n                          placeholder=\"Add prohibited word...\"\n                          value={newProhibited}\n                          onChange={(e) => setNewProhibited(e.target.value)}\n                          onKeyDown={(e) => {\n                            if (e.key === 'Enter') {\n                              e.preventDefault();\n                              addArrayItem('prohibited', newProhibited, setNewProhibited);\n                            }\n                          }}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => addArrayItem('prohibited', newProhibited, setNewProhibited)}\n                        >\n                          <Plus className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {form.watch('vocabulary.prohibited')?.map((word, index) => (\n                          <Badge key={index} variant=\"destructive\" className=\"flex items-center gap-1\">\n                            {word}\n                            <X\n                              className=\"h-3 w-3 cursor-pointer\"\n                              onClick={() => removeArrayItem('prohibited', index)}\n                            />\n                          </Badge>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Brand Terms */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg text-blue-700\">Brand Terms</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div className=\"flex gap-2\">\n                        <Input\n                          placeholder=\"Add brand term...\"\n                          value={newBrandTerm}\n                          onChange={(e) => setNewBrandTerm(e.target.value)}\n                          onKeyDown={(e) => {\n                            if (e.key === 'Enter') {\n                              e.preventDefault();\n                              addArrayItem('brandTerms', newBrandTerm, setNewBrandTerm);\n                            }\n                          }}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => addArrayItem('brandTerms', newBrandTerm, setNewBrandTerm)}\n                        >\n                          <Plus className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {form.watch('vocabulary.brandTerms')?.map((term, index) => (\n                          <Badge key={index} variant=\"outline\" className=\"flex items-center gap-1\">\n                            {term}\n                            <X\n                              className=\"h-3 w-3 cursor-pointer\"\n                              onClick={() => removeArrayItem('brandTerms', index)}\n                            />\n                          </Badge>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"sample\" className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"sampleContent\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Sample Content</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Paste some sample content that represents your brand voice...\"\n                          className=\"min-h-[200px]\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        Provide sample content to help train the voice analysis. This will improve accuracy for future content.\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Alert>\n                  <Upload className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    You can also upload existing content documents to analyze and extract voice patterns automatically.\n                  </AlertDescription>\n                </Alert>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"flex justify-end space-x-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                disabled={isLoading}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isLoading}>\n                {isLoading ? 'Saving...' : (\n                  <>\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    {profile ? 'Update Profile' : 'Create Profile'}\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/CampaignCreationModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Controller' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowLeftIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowRightIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CalendarIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserGroupIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2197,2200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2197,2200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2525,2528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2525,2528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createdCampaign' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":70,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2594,2597],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2594,2597],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'steps' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":130,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'platformConfig' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":137,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":137,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handlePrevious' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":151,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":151,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleBasicsSubmit' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":157,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":157,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleGenerateContent' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":162,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":162,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleLaunchCampaign' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":197,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":197,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'addRecipient' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":216,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":216,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'removeRecipient' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":221,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":221,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'togglePlatform' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":228,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":228,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":230,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7355,7358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7355,7358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":232,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7437,7440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7437,7440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { \n  XMarkIcon,\n  ArrowLeftIcon,\n  ArrowRightIcon,\n  CheckCircleIcon,\n  EnvelopeIcon,\n  GlobeAltIcon,\n  SparklesIcon,\n  CalendarIcon,\n  UserGroupIcon,\n  ChartBarIcon,\n  Cog6ToothIcon\n} from '@heroicons/react/24/outline';\nimport { trpc } from '../lib/trpc';\n\n// Form schemas\nconst campaignBasicsSchema = z.object({\n  name: z.string().min(1, 'Campaign name is required').max(100),\n  type: z.enum(['email', 'social', 'mixed']),\n  description: z.string().optional(),\n  budget: z.number().min(1, 'Budget must be at least $1'),\n  startDate: z.date(),\n  endDate: z.date(),\n  targetAudience: z.string().min(1, 'Target audience is required'),\n});\n\nconst emailConfigSchema = z.object({\n  templateType: z.enum(['newsletter', 'promotional', 'welcome', 'follow-up', 'reminder', 'announcement']),\n  subject: z.string().min(1, 'Subject is required').max(200),\n  fromName: z.string().min(1, 'From name is required'),\n  fromEmail: z.string().email('Invalid email'),\n  recipients: z.array(z.object({\n    email: z.string().email(),\n    name: z.string().optional(),\n  })).min(1, 'At least one recipient is required'),\n  scheduleType: z.enum(['immediate', 'scheduled', 'sequence']),\n  scheduledTime: z.date().optional(),\n});\n\nconst socialConfigSchema = z.object({\n  platforms: z.array(z.enum(['FACEBOOK', 'INSTAGRAM', 'TIKTOK', 'TWITTER', 'LINKEDIN'])).min(1, 'Select at least one platform'),\n  contentType: z.enum(['post', 'story', 'reel', 'thread']),\n  tone: z.enum(['professional', 'casual', 'humorous', 'inspirational', 'promotional']),\n  includeHashtags: z.boolean().default(true),\n  includeEmojis: z.boolean().default(true),\n  scheduleType: z.enum(['immediate', 'scheduled', 'calendar']),\n  scheduledTime: z.date().optional(),\n});\n\ntype CampaignBasicsForm = z.infer<typeof campaignBasicsSchema>;\ntype EmailConfigForm = z.infer<typeof emailConfigSchema>;\ntype SocialConfigForm = z.infer<typeof socialConfigSchema>;\n\ninterface CampaignCreationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess?: (campaign: any) => void;\n}\n\nexport default function CampaignCreationModal({ isOpen, onClose, onSuccess }: CampaignCreationModalProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [campaignType, setCampaignType] = useState<'email' | 'social' | 'mixed'>('email');\n  const [generatedContent, setGeneratedContent] = useState<any>(null);\n  const [createdCampaign, setCreatedCampaign] = useState<any>(null);\n\n  // Form setup\n  const basicsForm = useForm<CampaignBasicsForm>({\n    resolver: zodResolver(campaignBasicsSchema),\n    defaultValues: {\n      name: '',\n      type: 'email',\n      description: '',\n      budget: 1000,\n      startDate: new Date(),\n      endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now\n      targetAudience: '',\n    },\n  });\n\n  const emailForm = useForm<EmailConfigForm>({\n    resolver: zodResolver(emailConfigSchema),\n    defaultValues: {\n      templateType: 'newsletter',\n      subject: '',\n      fromName: 'NeonHub',\n      fromEmail: 'noreply@neonhub.ai',\n      recipients: [{ email: '', name: '' }],\n      scheduleType: 'immediate',\n    },\n  });\n\n  const socialForm = useForm<SocialConfigForm>({\n    resolver: zodResolver(socialConfigSchema),\n    defaultValues: {\n      platforms: ['INSTAGRAM'],\n      contentType: 'post',\n      tone: 'professional',\n      includeHashtags: true,\n      includeEmojis: true,\n      scheduleType: 'immediate',\n    },\n  });\n\n  // tRPC mutations\n  const generateEmailTemplate = trpc.email.generateTemplate.useMutation({\n    onSuccess: (data) => {\n      setGeneratedContent({ type: 'email', data });\n    },\n  });\n\n  const generateSocialContent = trpc.social.generateContent.useMutation({\n    onSuccess: (data) => {\n      setGeneratedContent({ type: 'social', data });\n    },\n  });\n\n  const createCampaign = trpc.campaign.create.useMutation({\n    onSuccess: (data) => {\n      setCreatedCampaign(data);\n      onSuccess?.(data);\n    },\n  });\n\n  const steps = [\n    { id: 1, name: 'Campaign Basics', icon: ChartBarIcon },\n    { id: 2, name: 'Content Generation', icon: SparklesIcon },\n    { id: 3, name: 'Configuration', icon: Cog6ToothIcon },\n    { id: 4, name: 'Review & Launch', icon: CheckCircleIcon },\n  ];\n\n  const platformConfig = {\n    FACEBOOK: { name: 'Facebook', color: 'blue' },\n    INSTAGRAM: { name: 'Instagram', color: 'pink' },\n    TIKTOK: { name: 'TikTok', color: 'black' },\n    TWITTER: { name: 'Twitter', color: 'sky' },\n    LINKEDIN: { name: 'LinkedIn', color: 'blue' },\n  };\n\n  const handleNext = () => {\n    if (currentStep < 4) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleBasicsSubmit = (data: CampaignBasicsForm) => {\n    setCampaignType(data.type);\n    handleNext();\n  };\n\n  const handleGenerateContent = () => {\n    const basicsData = basicsForm.getValues();\n    \n    if (campaignType === 'email' || campaignType === 'mixed') {\n      const emailData = emailForm.getValues();\n      generateEmailTemplate.mutate({\n        type: emailData.templateType,\n        brand: {\n          name: emailData.fromName,\n        },\n        content: {\n          headline: `${basicsData.name} - Special Offer`,\n          message: `Exciting news for ${basicsData.targetAudience}! Join our ${basicsData.name} campaign.`,\n          ctaText: 'Learn More',\n          ctaUrl: 'https://neonhub.ai',\n        },\n        personalization: true,\n        mobileOptimized: true,\n      });\n    }\n\n    if (campaignType === 'social' || campaignType === 'mixed') {\n      const socialData = socialForm.getValues();\n      generateSocialContent.mutate({\n        platform: socialData.platforms[0],\n        contentType: socialData.contentType,\n        topic: basicsData.name,\n        tone: socialData.tone,\n        targetAudience: basicsData.targetAudience,\n        includeHashtags: socialData.includeHashtags,\n        includeEmojis: socialData.includeEmojis,\n      });\n    }\n  };\n\n  const handleLaunchCampaign = () => {\n    const basicsData = basicsForm.getValues();\n    const emailData = campaignType !== 'social' ? emailForm.getValues() : null;\n    const socialData = campaignType !== 'email' ? socialForm.getValues() : null;\n\n    createCampaign.mutate({\n      name: basicsData.name,\n      type: basicsData.type,\n      description: basicsData.description,\n      budget: basicsData.budget,\n      startDate: basicsData.startDate,\n      endDate: basicsData.endDate,\n      targetAudience: basicsData.targetAudience,\n      emailConfig: emailData,\n      socialConfig: socialData,\n      generatedContent,\n    });\n  };\n\n  const addRecipient = () => {\n    const current = emailForm.getValues('recipients');\n    emailForm.setValue('recipients', [...current, { email: '', name: '' }]);\n  };\n\n  const removeRecipient = (index: number) => {\n    const current = emailForm.getValues('recipients');\n    if (current.length > 1) {\n      emailForm.setValue('recipients', current.filter((_, i) => i !== index));\n    }\n  };\n\n  const togglePlatform = (platform: string) => {\n    const current = socialForm.getValues('platforms');\n    const updated = current.includes(platform as any)\n      ? current.filter(p => p !== platform)\n      : [...current, platform as any];\n    \n    if (updated.length > 0) {\n      socialForm.setValue('platforms', updated);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n      <div className=\"bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <div>\n            <h2 className=\"text-xl font-semibold text-gray-900\">Create New Campaign</h2>\n            <p className=\"text-sm text-gray-600\">Set up your AI-powered marketing campaign</p>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100\"\n          >\n            <XMarkIcon className=\"h-5 w-5\" />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          <div className=\"text-center py-12\">\n            <SparklesIcon className=\"h-16 w-16 mx-auto text-gray-300 mb-4\" />\n            <h3 className=\"text-xl font-medium text-gray-900 mb-2\">Campaign Creation Wizard</h3>\n            <p className=\"text-gray-600 mb-6\">Advanced campaign creation with AI agent integration coming soon!</p>\n            \n            <div className=\"space-y-4 text-left max-w-md mx-auto\">\n              <div className=\"flex items-center gap-3 p-3 bg-blue-50 rounded-lg\">\n                <EnvelopeIcon className=\"h-5 w-5 text-blue-600\" />\n                <div>\n                  <div className=\"font-medium text-blue-900\">Email Campaign Builder</div>\n                  <div className=\"text-sm text-blue-700\">Template generation, audience targeting, scheduling</div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-3 p-3 bg-pink-50 rounded-lg\">\n                <GlobeAltIcon className=\"h-5 w-5 text-pink-600\" />\n                <div>\n                  <div className=\"font-medium text-pink-900\">Social Media Campaigns</div>\n                  <div className=\"text-sm text-pink-700\">Multi-platform content, scheduling, analytics</div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-3 p-3 bg-green-50 rounded-lg\">\n                <ChartBarIcon className=\"h-5 w-5 text-green-600\" />\n                <div>\n                  <div className=\"font-medium text-green-900\">Cross-Agent Integration</div>\n                  <div className=\"text-sm text-green-700\">ContentAgent + EmailAgent + SocialAgent coordination</div>\n                </div>\n              </div>\n            </div>\n            \n            <button\n              onClick={onClose}\n              className=\"mt-6 bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/CampaignExecutionPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Square' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":9},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":86,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":86,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2390,2441],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2616,2660],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2689,2739],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":227,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7984,7987],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7984,7987],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":250,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8952,8955],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8952,8955],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":285,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":285,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10008,10011],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10008,10011],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":394,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":394,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14309,14312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14309,14312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":411,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":411,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14862,14865],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14862,14865],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":435,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":435,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15690,15693],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15690,15693],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":457,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":457,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16446,16449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16446,16449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Campaign Execution Panel - Real-time Campaign Monitoring & Control\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { trpc } from '../utils/trpc';\nimport { Button } from './ui/button';\nimport { Badge } from './ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';\nimport { Progress } from './ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\nimport { Alert, AlertDescription } from './ui/alert';\nimport { \n  Play, \n  Pause, \n  Square, \n  BarChart3, \n  Users, \n  Mail, \n  MessageSquare,\n  TrendingUp,\n  AlertCircle,\n  CheckCircle,\n  Clock,\n  Zap\n} from 'lucide-react';\n\ninterface CampaignExecutionPanelProps {\n  campaignId?: string;\n  className?: string;\n}\n\nexport function CampaignExecutionPanel({ campaignId, className }: CampaignExecutionPanelProps) {\n  const [selectedCampaign, setSelectedCampaign] = useState<string | null>(campaignId || null);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n\n  // tRPC queries\n  const { \n    data: campaignStatus, \n    isLoading: statusLoading,\n    refetch: refetchStatus\n  } = trpc.campaign.getCampaignStatus.useQuery(undefined, {\n    refetchInterval: autoRefresh ? 5000 : false, // Refresh every 5 seconds if auto-refresh enabled\n  });\n\n  const { \n    data: campaignMetrics,\n    isLoading: metricsLoading \n  } = trpc.campaign.getCampaignMetrics.useQuery(\n    { campaignId: selectedCampaign || undefined },\n    { enabled: !!selectedCampaign }\n  );\n\n  // Campaign execution mutation\n  const executeCampaignMutation = trpc.campaign.executeCampaign.useMutation({\n    onSuccess: () => {\n      refetchStatus();\n    }\n  });\n\n  const analyzeCampaignMutation = trpc.campaign.analyzeCampaign.useMutation();\n\n  // Auto-refresh toggle\n  useEffect(() => {\n    if (!autoRefresh) return;\n    \n    const interval = setInterval(() => {\n      refetchStatus();\n    }, 5000);\n    \n    return () => clearInterval(interval);\n  }, [autoRefresh, refetchStatus]);\n\n  const handleExecuteCampaign = async () => {\n    try {\n      await executeCampaignMutation.mutateAsync({\n        goal: 'lead_generation',\n        channels: ['email', 'social_media'],\n        targetAudience: 'Marketing professionals interested in AI automation',\n        budget: 2500,\n        brandTone: 'Professional, innovative, results-focused'\n      });\n    } catch (error) {\n      console.error('Campaign execution failed:', error);\n    }\n  };\n\n  const handleAnalyzeCampaign = async (campaignId: string) => {\n    try {\n      const analysis = await analyzeCampaignMutation.mutateAsync({ campaignId });\n      console.log('Campaign analysis:', analysis);\n    } catch (error) {\n      console.error('Campaign analysis failed:', error);\n    }\n  };\n\n  if (statusLoading && !campaignStatus) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500\"></div>\n      </div>\n    );\n  }\n\n  const runningCampaigns = campaignStatus?.data?.running || [];\n  const scheduledCampaigns = campaignStatus?.data?.scheduled || [];\n  const statistics = campaignStatus?.data?.statistics;\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header Controls */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold gradient-text\">Campaign Execution Center</h2>\n          <p className=\"text-gray-400\">Real-time campaign monitoring and agent coordination</p>\n        </div>\n        \n        <div className=\"flex gap-3\">\n          <Button\n            onClick={() => setAutoRefresh(!autoRefresh)}\n            variant={autoRefresh ? \"default\" : \"outline\"}\n            size=\"sm\"\n            className=\"gap-2\"\n          >\n            <Zap className=\"w-4 h-4\" />\n            Auto-refresh {autoRefresh ? 'ON' : 'OFF'}\n          </Button>\n          \n          <Button \n            onClick={handleExecuteCampaign}\n            disabled={executeCampaignMutation.isPending}\n            className=\"gap-2 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700\"\n          >\n            <Play className=\"w-4 h-4\" />\n            {executeCampaignMutation.isPending ? 'Launching...' : 'Launch Campaign'}\n          </Button>\n        </div>\n      </div>\n\n      {/* System Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"glass-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Active Campaigns</p>\n                <p className=\"text-2xl font-bold text-blue-400\">{statistics?.totalRunning || 0}</p>\n              </div>\n              <div className=\"p-3 bg-blue-500/20 rounded-full\">\n                <BarChart3 className=\"w-6 h-6 text-blue-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Scheduled</p>\n                <p className=\"text-2xl font-bold text-purple-400\">{statistics?.totalScheduled || 0}</p>\n              </div>\n              <div className=\"p-3 bg-purple-500/20 rounded-full\">\n                <Clock className=\"w-6 h-6 text-purple-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Capacity Used</p>\n                <p className=\"text-2xl font-bold text-green-400\">\n                  {Math.round((statistics?.utilizationRate || 0) * 100)}%\n                </p>\n              </div>\n              <div className=\"p-3 bg-green-500/20 rounded-full\">\n                <TrendingUp className=\"w-6 h-6 text-green-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Agents Active</p>\n                <p className=\"text-2xl font-bold text-orange-400\">8</p>\n              </div>\n              <div className=\"p-3 bg-orange-500/20 rounded-full\">\n                <Users className=\"w-6 h-6 text-orange-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs defaultValue=\"running\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3 glass-card\">\n          <TabsTrigger value=\"running\">Running Campaigns</TabsTrigger>\n          <TabsTrigger value=\"scheduled\">Scheduled</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n        </TabsList>\n\n        {/* Running Campaigns */}\n        <TabsContent value=\"running\" className=\"space-y-4\">\n          {runningCampaigns.length === 0 ? (\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"text-gray-400 mb-4\">\n                  <BarChart3 className=\"w-12 h-12 mx-auto opacity-50\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-300 mb-2\">No Active Campaigns</h3>\n                <p className=\"text-gray-400 mb-4\">Launch your first autonomous campaign to get started</p>\n                <Button onClick={handleExecuteCampaign} className=\"bg-gradient-to-r from-blue-500 to-purple-600\">\n                  Launch Demo Campaign\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            runningCampaigns.map((campaign: any) => (\n              <CampaignCard \n                key={campaign.id} \n                campaign={campaign}\n                onAnalyze={handleAnalyzeCampaign}\n                onSelect={setSelectedCampaign}\n                isSelected={selectedCampaign === campaign.id}\n              />\n            ))\n          )}\n        </TabsContent>\n\n        {/* Scheduled Campaigns */}\n        <TabsContent value=\"scheduled\" className=\"space-y-4\">\n          {scheduledCampaigns.length === 0 ? (\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-8 text-center\">\n                <Clock className=\"w-12 h-12 mx-auto text-gray-400 opacity-50 mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-300 mb-2\">No Scheduled Campaigns</h3>\n                <p className=\"text-gray-400\">Schedule campaigns for future execution</p>\n              </CardContent>\n            </Card>\n          ) : (\n            scheduledCampaigns.map((schedule: any) => (\n              <ScheduledCampaignCard key={schedule.id} schedule={schedule} />\n            ))\n          )}\n        </TabsContent>\n\n        {/* Analytics */}\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          {selectedCampaign && campaignMetrics ? (\n            <CampaignAnalytics \n              metrics={campaignMetrics.data}\n              isLoading={metricsLoading}\n            />\n          ) : (\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-8 text-center\">\n                <BarChart3 className=\"w-12 h-12 mx-auto text-gray-400 opacity-50 mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-300 mb-2\">Select a Campaign</h3>\n                <p className=\"text-gray-400\">Choose a running campaign to view detailed analytics</p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\n// Campaign Card Component\nfunction CampaignCard({ \n  campaign, \n  onAnalyze, \n  onSelect, \n  isSelected \n}: { \n  campaign: any;\n  onAnalyze: (id: string) => void;\n  onSelect: (id: string) => void;\n  isSelected: boolean;\n}) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'running': return 'text-green-400 bg-green-500/20';\n      case 'completed': return 'text-blue-400 bg-blue-500/20';\n      case 'failed': return 'text-red-400 bg-red-500/20';\n      case 'paused': return 'text-yellow-400 bg-yellow-500/20';\n      default: return 'text-gray-400 bg-gray-500/20';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'running': return <Play className=\"w-4 h-4\" />;\n      case 'completed': return <CheckCircle className=\"w-4 h-4\" />;\n      case 'failed': return <AlertCircle className=\"w-4 h-4\" />;\n      case 'paused': return <Pause className=\"w-4 h-4\" />;\n      default: return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <Card \n      className={`glass-card transition-all cursor-pointer ${\n        isSelected ? 'ring-2 ring-blue-500' : 'hover:ring-1 ring-gray-600'\n      }`}\n      onClick={() => onSelect(campaign.id)}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Badge className={`gap-1 ${getStatusColor(campaign.status)}`}>\n              {getStatusIcon(campaign.status)}\n              {campaign.status}\n            </Badge>\n            <div>\n              <CardTitle className=\"text-lg\">Campaign {campaign.id.slice(-4)}</CardTitle>\n              <CardDescription>Lead Generation Campaign</CardDescription>\n            </div>\n          </div>\n          <Button \n            onClick={(e) => {\n              e.stopPropagation();\n              onAnalyze(campaign.id);\n            }}\n            size=\"sm\" \n            variant=\"outline\"\n            className=\"gap-2\"\n          >\n            <BarChart3 className=\"w-4 h-4\" />\n            Analyze\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* Progress */}\n        <div>\n          <div className=\"flex justify-between text-sm mb-2\">\n            <span className=\"text-gray-400\">Progress</span>\n            <span className=\"text-white\">{campaign.progress}%</span>\n          </div>\n          <Progress value={campaign.progress} className=\"h-2\" />\n        </div>\n\n        {/* Metrics Grid */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center gap-1 text-blue-400 mb-1\">\n              <Mail className=\"w-4 h-4\" />\n            </div>\n            <p className=\"text-lg font-bold text-white\">{campaign.metrics.delivered}</p>\n            <p className=\"text-xs text-gray-400\">Delivered</p>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center gap-1 text-green-400 mb-1\">\n              <TrendingUp className=\"w-4 h-4\" />\n            </div>\n            <p className=\"text-lg font-bold text-white\">{campaign.metrics.opened}</p>\n            <p className=\"text-xs text-gray-400\">Opened</p>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center gap-1 text-purple-400 mb-1\">\n              <MessageSquare className=\"w-4 h-4\" />\n            </div>\n            <p className=\"text-lg font-bold text-white\">{campaign.metrics.clicked}</p>\n            <p className=\"text-xs text-gray-400\">Clicked</p>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center gap-1 text-orange-400 mb-1\">\n              <CheckCircle className=\"w-4 h-4\" />\n            </div>\n            <p className=\"text-lg font-bold text-white\">{campaign.metrics.converted}</p>\n            <p className=\"text-xs text-gray-400\">Converted</p>\n          </div>\n        </div>\n\n        {/* Recent Activity */}\n        {campaign.agentActivity && campaign.agentActivity.length > 0 && (\n          <div className=\"border-t border-gray-700 pt-3\">\n            <p className=\"text-sm text-gray-400 mb-2\">Latest Agent Activity</p>\n            <div className=\"space-y-1\">\n              {campaign.agentActivity.slice(-2).map((activity: any, index: number) => (\n                <div key={index} className=\"flex items-center gap-2 text-sm\">\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {activity.agentId.replace('-agent', '')}\n                  </Badge>\n                  <span className=\"text-gray-300\">{activity.result}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// Scheduled Campaign Card Component\nfunction ScheduledCampaignCard({ schedule }: { schedule: any }) {\n  return (\n    <Card className=\"glass-card\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"font-semibold text-white\">Scheduled Campaign</h3>\n            <p className=\"text-sm text-gray-400\">\n              Priority: <Badge variant=\"outline\" className=\"ml-1\">{schedule.priority}</Badge>\n            </p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-sm text-gray-400\">Scheduled for</p>\n            <p className=\"font-medium text-white\">\n              {new Date(schedule.scheduledTime).toLocaleString()}\n            </p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Campaign Analytics Component\nfunction CampaignAnalytics({ metrics, isLoading }: { metrics: any; isLoading: boolean }) {\n  if (isLoading) {\n    return (\n      <Card className=\"glass-card\">\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-4 bg-gray-700 rounded w-1/4\"></div>\n            <div className=\"h-32 bg-gray-700 rounded\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      {/* Performance Metrics */}\n      <Card className=\"glass-card\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Performance Metrics</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {Object.entries(metrics.performance).map(([key, value]: [string, any]) => (\n            <div key={key} className=\"flex justify-between items-center\">\n              <span className=\"text-gray-400 capitalize\">\n                {key.replace(/([A-Z])/g, ' $1').trim()}\n              </span>\n              <span className=\"font-semibold text-white\">\n                {typeof value === 'number' ? \n                  (key.includes('Rate') ? `${(value * 100).toFixed(1)}%` : value.toFixed(2))\n                  : value\n                }\n              </span>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n\n      {/* Insights */}\n      <Card className=\"glass-card\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">AI Insights</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {metrics.insights.map((insight: string, index: number) => (\n              <Alert key={index} className=\"border-blue-500/20 bg-blue-500/10\">\n                <AlertCircle className=\"h-4 w-4 text-blue-400\" />\n                <AlertDescription className=\"text-gray-300\">\n                  {insight}\n                </AlertDescription>\n              </Alert>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/CampaignMemoryDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'trpc' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Mail' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MessageSquare' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Campaign Memory Dashboard - Historical Performance & Agent Learnings\n */\n\nimport React, { useState } from 'react';\nimport { trpc } from '../utils/trpc';\nimport { Button } from './ui/button';\nimport { Badge } from './ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\nimport { Progress } from './ui/progress';\nimport { \n  Brain, \n  TrendingUp, \n  Target,\n  Lightbulb,\n  BarChart3,\n  Calendar,\n  Users,\n  Mail,\n  MessageSquare,\n  DollarSign,\n  ArrowUp,\n  Sparkles\n} from 'lucide-react';\n\ninterface CampaignMemoryDashboardProps {\n  className?: string;\n}\n\nexport function CampaignMemoryDashboard({ className }: CampaignMemoryDashboardProps) {\n  const [selectedTimeframe, setSelectedTimeframe] = useState<'7d' | '30d' | 'all'>('30d');\n\n  // Mock historical data\n  const historicalCampaigns = [\n    {\n      id: 'camp_001',\n      goal: 'lead_generation',\n      completedAt: '2024-01-15',\n      performance: { roi: 3.2, conversionRate: 0.045, openRate: 0.28, clickRate: 0.06 },\n      learnings: ['Personalized subject lines increased opens by 40%', 'Tuesday 10 AM sends performed best']\n    },\n    {\n      id: 'camp_002',\n      goal: 'brand_awareness',\n      completedAt: '2024-01-10',\n      performance: { roi: 2.1, conversionRate: 0.025, openRate: 0.32, clickRate: 0.08 },\n      learnings: ['Visual content drove 3x higher engagement', 'LinkedIn performed better than email']\n    },\n    {\n      id: 'camp_003',\n      goal: 'customer_retention',\n      completedAt: '2024-01-05',\n      performance: { roi: 4.5, conversionRate: 0.12, openRate: 0.45, clickRate: 0.15 },\n      learnings: ['Exclusive offers reduced churn by 25%', 'Personal tone resonated with existing customers']\n    }\n  ];\n\n  const agentLearnings = [\n    {\n      agentId: 'content-agent',\n      insights: [\n        'Subject lines with urgency increase open rates by 23%',\n        'Personalization tokens boost click rates by 35%',\n        'Questions in headlines drive 18% more engagement'\n      ],\n      confidence: 0.92,\n      dataPoints: 847\n    },\n    {\n      agentId: 'insight-agent',\n      insights: [\n        'Enterprise audience prefers weekday sends',\n        'Mobile optimization increases conversions by 40%',\n        'Social proof elements improve trust metrics'\n      ],\n      confidence: 0.88,\n      dataPoints: 623\n    }\n  ];\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold gradient-text\">Campaign Memory Dashboard</h2>\n          <p className=\"text-gray-400\">Historical insights and AI-powered learnings</p>\n        </div>\n        \n        <div className=\"flex gap-3\">\n          <Button\n            onClick={() => setSelectedTimeframe('7d')}\n            variant={selectedTimeframe === '7d' ? 'default' : 'outline'}\n            size=\"sm\"\n          >\n            7 Days\n          </Button>\n          <Button\n            onClick={() => setSelectedTimeframe('30d')}\n            variant={selectedTimeframe === '30d' ? 'default' : 'outline'}\n            size=\"sm\"\n          >\n            30 Days\n          </Button>\n          <Button\n            onClick={() => setSelectedTimeframe('all')}\n            variant={selectedTimeframe === 'all' ? 'default' : 'outline'}\n            size=\"sm\"\n          >\n            All Time\n          </Button>\n        </div>\n      </div>\n\n      {/* Performance Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"glass-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Avg ROI</p>\n                <p className=\"text-2xl font-bold text-green-400\">3.3x</p>\n                <div className=\"flex items-center gap-1 text-sm text-green-400\">\n                  <ArrowUp className=\"w-4 h-4\" />\n                  12.5%\n                </div>\n              </div>\n              <div className=\"p-3 bg-green-500/20 rounded-full\">\n                <DollarSign className=\"w-6 h-6 text-green-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Total Campaigns</p>\n                <p className=\"text-2xl font-bold text-blue-400\">{historicalCampaigns.length}</p>\n                <p className=\"text-sm text-gray-400\">This month</p>\n              </div>\n              <div className=\"p-3 bg-blue-500/20 rounded-full\">\n                <BarChart3 className=\"w-6 h-6 text-blue-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Best Goal</p>\n                <p className=\"text-lg font-bold text-purple-400\">Retention</p>\n                <p className=\"text-sm text-gray-400\">4.5x ROI</p>\n              </div>\n              <div className=\"p-3 bg-purple-500/20 rounded-full\">\n                <Target className=\"w-6 h-6 text-purple-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Agent Insights</p>\n                <p className=\"text-2xl font-bold text-orange-400\">15</p>\n                <p className=\"text-sm text-gray-400\">New learnings</p>\n              </div>\n              <div className=\"p-3 bg-orange-500/20 rounded-full\">\n                <Brain className=\"w-6 h-6 text-orange-400\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content */}\n      <Tabs defaultValue=\"history\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3 glass-card\">\n          <TabsTrigger value=\"history\">Campaign History</TabsTrigger>\n          <TabsTrigger value=\"learnings\">Agent Learnings</TabsTrigger>\n          <TabsTrigger value=\"insights\">Key Insights</TabsTrigger>\n        </TabsList>\n\n        {/* Campaign History */}\n        <TabsContent value=\"history\" className=\"space-y-4\">\n          {historicalCampaigns.map((campaign) => (\n            <Card key={campaign.id} className=\"glass-card\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle className=\"text-lg\">Campaign {campaign.id.slice(-3)}</CardTitle>\n                    <CardDescription className=\"flex items-center gap-2\">\n                      <Badge className=\"bg-blue-500/20 text-blue-400\">\n                        {campaign.goal.replace('_', ' ')}\n                      </Badge>\n                      <span className=\"text-gray-400\">\n                        <Calendar className=\"w-4 h-4 inline mr-1\" />\n                        {new Date(campaign.completedAt).toLocaleDateString()}\n                      </span>\n                    </CardDescription>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm text-gray-400\">ROI</p>\n                    <p className=\"text-xl font-bold text-green-400\">{campaign.performance.roi}x</p>\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-4\">\n                {/* Performance Metrics */}\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-400\">Conversion</p>\n                    <p className=\"text-lg font-semibold text-white\">\n                      {(campaign.performance.conversionRate * 100).toFixed(1)}%\n                    </p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-400\">Open Rate</p>\n                    <p className=\"text-lg font-semibold text-white\">\n                      {(campaign.performance.openRate * 100).toFixed(1)}%\n                    </p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-400\">Click Rate</p>\n                    <p className=\"text-lg font-semibold text-white\">\n                      {(campaign.performance.clickRate * 100).toFixed(1)}%\n                    </p>\n                  </div>\n                </div>\n\n                {/* Key Learnings */}\n                <div className=\"border-t border-gray-700 pt-3\">\n                  <p className=\"text-sm text-gray-400 mb-2\">Key Learnings</p>\n                  <div className=\"space-y-1\">\n                    {campaign.learnings.map((learning: string, index: number) => (\n                      <div key={index} className=\"flex items-start gap-2 text-sm\">\n                        <Lightbulb className=\"w-4 h-4 text-yellow-400 mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-gray-300\">{learning}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </TabsContent>\n\n        {/* Agent Learnings */}\n        <TabsContent value=\"learnings\" className=\"space-y-4\">\n          {agentLearnings.map((learning) => (\n            <Card key={learning.agentId} className=\"glass-card\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-2 bg-blue-500/20 rounded-full\">\n                      <Brain className=\"w-5 h-5 text-blue-400\" />\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-lg capitalize\">\n                        {learning.agentId.replace('-', ' ')}\n                      </CardTitle>\n                      <CardDescription>\n                        {learning.dataPoints} data points • {(learning.confidence * 100).toFixed(0)}% confidence\n                      </CardDescription>\n                    </div>\n                  </div>\n                  <Progress value={learning.confidence * 100} className=\"w-20 h-2\" />\n                </div>\n              </CardHeader>\n              \n              <CardContent>\n                <div className=\"space-y-2\">\n                  {learning.insights.map((insight: string, index: number) => (\n                    <div key={index} className=\"flex items-start gap-2 text-sm\">\n                      <Sparkles className=\"w-4 h-4 text-yellow-400 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-gray-300\">{insight}</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </TabsContent>\n\n        {/* Key Insights */}\n        <TabsContent value=\"insights\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"font-semibold text-white\">Best Performing Goal</h3>\n                  <Badge className=\"bg-green-500/20 text-green-400\">\n                    <TrendingUp className=\"w-3 h-3 mr-1\" />\n                    trending\n                  </Badge>\n                </div>\n                <p className=\"text-xl font-bold text-white mb-2\">Customer Retention</p>\n                <p className=\"text-sm text-gray-400\">Average ROI of 4.5x across campaigns</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"font-semibold text-white\">Optimal Timing</h3>\n                  <Badge className=\"bg-blue-500/20 text-blue-400\">\n                    data-driven\n                  </Badge>\n                </div>\n                <p className=\"text-xl font-bold text-white mb-2\">Tuesday 10 AM</p>\n                <p className=\"text-sm text-gray-400\">Consistently highest open and click rates</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"font-semibold text-white\">Best Channel Mix</h3>\n                  <Badge className=\"bg-purple-500/20 text-purple-400\">\n                    optimized\n                  </Badge>\n                </div>\n                <p className=\"text-xl font-bold text-white mb-2\">Email + Social</p>\n                <p className=\"text-sm text-gray-400\">Combined approach shows 35% better results</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"font-semibold text-white\">Top Audience Segment</h3>\n                  <Badge className=\"bg-orange-500/20 text-orange-400\">\n                    high-value\n                  </Badge>\n                </div>\n                <p className=\"text-xl font-bold text-white mb-2\">Enterprise Decision Makers</p>\n                <p className=\"text-sm text-gray-400\">3x higher conversion than average</p>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/ContentAgentTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowDownTrayIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3701,3704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3701,3704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4713,4716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4713,4716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { api } from '../utils/trpc';\nimport { \n  DocumentTextIcon, \n  SparklesIcon,\n  ArrowDownTrayIcon,\n  ClipboardDocumentIcon,\n  CheckCircleIcon\n} from '@heroicons/react/24/outline';\n\ninterface Post {\n  id: string;\n  platform: string;\n  content: string;\n  hashtags: string[];\n  imageSuggestions: string[];\n  engagementScore: number;\n  estimatedReach: number;\n}\n\nexport default function ContentAgentTab() {\n  const [platform, setPlatform] = useState<'instagram' | 'facebook' | 'tiktok' | 'twitter' | 'linkedin'>('instagram');\n  const [topic, setTopic] = useState('custom neon signs');\n  const [tone, setTone] = useState<'professional' | 'casual' | 'funny' | 'inspiring' | 'urgent'>('professional');\n  const [generatedPosts, setGeneratedPosts] = useState<Post[]>([]);\n  const [copiedId, setCopiedId] = useState<string | null>(null);\n\n  const generatePosts = api.content.generatePosts.useMutation({\n    onSuccess: (data) => {\n      setGeneratedPosts(data.posts);\n    },\n  });\n\n  const agentStatus = api.content.getAgentStatus.useQuery();\n\n  const handleGenerate = () => {\n    generatePosts.mutate({\n      platform,\n      topic,\n      tone,\n      includeHashtags: true,\n    });\n  };\n\n  const copyToClipboard = (text: string, id: string) => {\n    navigator.clipboard.writeText(text);\n    setCopiedId(id);\n    setTimeout(() => setCopiedId(null), 2000);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Agent Status Header */}\n      <div className=\"card-glow\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <DocumentTextIcon className=\"h-8 w-8 text-blue-400\" />\n            <div>\n              <h2 className=\"text-xl font-semibold text-white\">Content Agent</h2>\n              <p className=\"text-dark-400 text-sm\">AI-powered content generation</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"status-indicator active\"></div>\n            <span className=\"text-green-400 text-sm\">\n              {agentStatus.data?.status || 'Active'}\n            </span>\n          </div>\n        </div>\n\n        {agentStatus.data && (\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <p className=\"text-dark-400 text-xs\">Uptime</p>\n              <p className=\"text-white font-semibold\">{agentStatus.data.uptime}</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-dark-400 text-xs\">Success Rate</p>\n              <p className=\"text-white font-semibold\">{agentStatus.data.successRate}</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-dark-400 text-xs\">Total Executions</p>\n              <p className=\"text-white font-semibold\">{agentStatus.data.totalExecutions}</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-dark-400 text-xs\">Avg Response</p>\n              <p className=\"text-white font-semibold\">{agentStatus.data.avgResponseTime}</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Content Generation Form */}\n      <div className=\"card-glow\">\n        <h3 className=\"text-lg font-semibold text-white mb-4\">Generate Social Media Posts</h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          {/* Platform Selection */}\n          <div>\n            <label className=\"block text-dark-300 text-sm font-medium mb-2\">Platform</label>\n            <select\n              value={platform}\n              onChange={(e) => setPlatform(e.target.value as any)}\n              className=\"input w-full\"\n            >\n              <option value=\"instagram\">Instagram</option>\n              <option value=\"facebook\">Facebook</option>\n              <option value=\"tiktok\">TikTok</option>\n              <option value=\"twitter\">Twitter</option>\n              <option value=\"linkedin\">LinkedIn</option>\n            </select>\n          </div>\n\n          {/* Topic Input */}\n          <div>\n            <label className=\"block text-dark-300 text-sm font-medium mb-2\">Topic</label>\n            <input\n              type=\"text\"\n              value={topic}\n              onChange={(e) => setTopic(e.target.value)}\n              placeholder=\"e.g., custom neon signs\"\n              className=\"input w-full\"\n            />\n          </div>\n\n          {/* Tone Selection */}\n          <div>\n            <label className=\"block text-dark-300 text-sm font-medium mb-2\">Tone</label>\n            <select\n              value={tone}\n              onChange={(e) => setTone(e.target.value as any)}\n              className=\"input w-full\"\n            >\n              <option value=\"professional\">Professional</option>\n              <option value=\"casual\">Casual</option>\n              <option value=\"funny\">Funny</option>\n              <option value=\"inspiring\">Inspiring</option>\n              <option value=\"urgent\">Urgent</option>\n            </select>\n          </div>\n        </div>\n\n        <button\n          onClick={handleGenerate}\n          disabled={generatePosts.isLoading}\n          className=\"btn-primary flex items-center space-x-2\"\n        >\n          {generatePosts.isLoading ? (\n            <>\n              <SparklesIcon className=\"h-5 w-5 animate-spin\" />\n              <span>Generating...</span>\n            </>\n          ) : (\n            <>\n              <SparklesIcon className=\"h-5 w-5\" />\n              <span>Generate Content</span>\n            </>\n          )}\n        </button>\n      </div>\n\n      {/* Generated Posts */}\n      {generatedPosts.length > 0 && (\n        <div className=\"card-glow\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-white\">Generated Posts</h3>\n            <div className=\"text-dark-400 text-sm\">\n              {generatedPosts.length} posts generated\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            {generatedPosts.map((post) => (\n              <div key={post.id} className=\"agent-card\">\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"px-2 py-1 bg-neon-400/20 text-neon-400 text-xs rounded-full capitalize\">\n                      {post.platform}\n                    </span>\n                    <span className=\"text-dark-400 text-xs\">\n                      Score: {post.engagementScore}/100\n                    </span>\n                    <span className=\"text-dark-400 text-xs\">\n                      Est. Reach: {post.estimatedReach.toLocaleString()}\n                    </span>\n                  </div>\n                  <button\n                    onClick={() => copyToClipboard(`${post.content  }\\n\\n${  post.hashtags.join(' ')}`, post.id)}\n                    className=\"btn-pill flex items-center space-x-1\"\n                  >\n                    {copiedId === post.id ? (\n                      <CheckCircleIcon className=\"h-4 w-4 text-green-400\" />\n                    ) : (\n                      <ClipboardDocumentIcon className=\"h-4 w-4\" />\n                    )}\n                    <span className=\"text-xs\">{copiedId === post.id ? 'Copied!' : 'Copy'}</span>\n                  </button>\n                </div>\n                \n                <div className=\"mb-3\">\n                  <p className=\"text-white leading-relaxed\">{post.content}</p>\n                </div>\n                \n                {post.hashtags.length > 0 && (\n                  <div className=\"mb-3\">\n                    <p className=\"text-neon-400 text-sm\">\n                      {post.hashtags.join(' ')}\n                    </p>\n                  </div>\n                )}\n                \n                {post.imageSuggestions.length > 0 && (\n                  <div>\n                    <p className=\"text-dark-400 text-xs mb-1\">Image suggestions:</p>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {post.imageSuggestions.map((suggestion, index) => (\n                        <span key={index} className=\"px-2 py-1 bg-dark-700 text-dark-300 text-xs rounded\">\n                          {suggestion}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Error Display */}\n      {generatePosts.error && (\n        <div className=\"card-glow border border-red-500/50\">\n          <div className=\"flex items-center space-x-2 text-red-400\">\n            <span className=\"text-sm\">Error: {generatePosts.error.message}</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/ContentVoiceAnalyzer.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[448,451],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[448,451],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":41,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1117,1158],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4486,4489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4486,4489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\n\n// Simple Content Voice Analyzer component\ninterface ContentVoiceAnalyzerProps {\n  profiles: Array<{\n    id: string;\n    name: string;\n    isActive: boolean;\n  }>;\n}\n\nexport function ContentVoiceAnalyzer({ profiles }: ContentVoiceAnalyzerProps) {\n  const [content, setContent] = useState('');\n  const [selectedProfile, setSelectedProfile] = useState('');\n  const [analysis, setAnalysis] = useState<any>(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n\n  const analyzeContent = async () => {\n    if (!content.trim()) return;\n    \n    setIsAnalyzing(true);\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Mock analysis result\n      setAnalysis({\n        voiceScore: Math.floor(Math.random() * 30) + 70, // 70-100\n        suggestions: [\n          {\n            type: 'tone',\n            issue: 'Content could be more professional',\n            suggestion: 'Use more business-oriented language',\n            priority: 'medium'\n          }\n        ]\n      });\n    } catch (error) {\n      console.error('Analysis failed:', error);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Content Voice Analyzer</h3>\n        <p className=\"text-gray-600 mb-6\">\n          Analyze your content against brand voice profiles in real-time\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Input Section */}\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Select Brand Voice Profile</label>\n            <select\n              value={selectedProfile}\n              onChange={(e) => setSelectedProfile(e.target.value)}\n              className=\"w-full p-2 border rounded-md\"\n            >\n              <option value=\"\">Choose a profile...</option>\n              {profiles.map((profile) => (\n                <option key={profile.id} value={profile.id}>\n                  {profile.name} {profile.isActive ? '(Active)' : ''}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Content to Analyze</label>\n            <textarea\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n              placeholder=\"Paste your content here for voice analysis...\"\n              className=\"w-full h-64 p-3 border rounded-md\"\n            />\n          </div>\n\n          <button\n            onClick={analyzeContent}\n            disabled={!content.trim() || !selectedProfile || isAnalyzing}\n            className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-md disabled:opacity-50\"\n          >\n            {isAnalyzing ? 'Analyzing...' : 'Analyze Brand Voice'}\n          </button>\n        </div>\n\n        {/* Results Section */}\n        <div className=\"space-y-4\">\n          <h4 className=\"text-md font-semibold\">Analysis Results</h4>\n          \n          {analysis ? (\n            <div className=\"space-y-4\">\n              <div className=\"p-4 border rounded-lg\">\n                <div className=\"flex justify-between items-center mb-2\">\n                  <span className=\"font-medium\">Voice Consistency Score</span>\n                  <span className={`text-lg font-bold ${\n                    analysis.voiceScore >= 80 ? 'text-green-600' : \n                    analysis.voiceScore >= 60 ? 'text-yellow-600' : 'text-red-600'\n                  }`}>\n                    {analysis.voiceScore}%\n                  </span>\n                </div>\n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                  <div \n                    className={`h-2 rounded-full ${\n                      analysis.voiceScore >= 80 ? 'bg-green-600' : \n                      analysis.voiceScore >= 60 ? 'bg-yellow-600' : 'bg-red-600'\n                    }`}\n                    style={{ width: `${analysis.voiceScore}%` }}\n                  ></div>\n                </div>\n              </div>\n\n              {analysis.suggestions && analysis.suggestions.length > 0 && (\n                <div className=\"p-4 border rounded-lg\">\n                  <h5 className=\"font-medium mb-3\">Suggestions for Improvement</h5>\n                  <div className=\"space-y-2\">\n                    {analysis.suggestions.map((suggestion: any, index: number) => (\n                      <div key={index} className=\"p-3 bg-amber-50 rounded-md\">\n                        <div className=\"flex justify-between items-start mb-1\">\n                          <span className=\"font-medium text-sm capitalize\">{suggestion.type}</span>\n                          <span className={`text-xs px-2 py-1 rounded ${\n                            suggestion.priority === 'high' ? 'bg-red-100 text-red-700' :\n                            suggestion.priority === 'medium' ? 'bg-yellow-100 text-yellow-700' :\n                            'bg-green-100 text-green-700'\n                          }`}>\n                            {suggestion.priority}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-gray-700 mb-1\">{suggestion.issue}</p>\n                        <p className=\"text-sm text-blue-700 font-medium\">{suggestion.suggestion}</p>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"text-center py-12 text-gray-500\">\n              <p>Select a profile and enter content to see analysis results</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/CopilotWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Card' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardContent' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MessageCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Volume2' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'VolumeX' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'History' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'lastInteraction' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":107,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dragRef' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":114,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":114,"endColumn":16},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPersistedState'. Either include it or remove the dependency array.","line":123,"column":6,"nodeType":"ArrayExpression","endLine":123,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadPersistedState]","fix":{"range":[3233,3235],"text":"[loadPersistedState]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'savePersistedState'. Either include it or remove the dependency array.","line":152,"column":6,"nodeType":"ArrayExpression","endLine":152,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [widgetState, persistState, savePersistedState]","fix":{"range":[4131,4158],"text":"[widgetState, persistState, savePersistedState]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":164,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":164,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4466,4529],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":174,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":174,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4736,4789],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":242,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":242,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6739,6786],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":314,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":314,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9687,9744],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":346,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":346,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10462,10514],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":355,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":355,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10674,10717],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { \n  Bot, \n  User, \n  Send, \n  Mic, \n  MicOff, \n  Minimize2, \n  Maximize2, \n  X, \n  MessageCircle, \n  Zap, \n  Volume2,\n  VolumeX,\n  Loader2,\n  CheckCircle,\n  AlertCircle,\n  Settings,\n  History,\n  Download\n} from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\n// Types\ninterface CopilotMessage {\n  id: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: string;\n  confidence?: number;\n  attachments?: MessageAttachment[];\n  actions?: string[];\n  status?: 'sending' | 'sent' | 'processing' | 'completed' | 'failed';\n}\n\ninterface MessageAttachment {\n  type: 'report' | 'chart' | 'campaign' | 'insight';\n  id: string;\n  title: string;\n  preview?: string;\n  downloadUrl?: string;\n}\n\ninterface VoiceRecording {\n  isRecording: boolean;\n  isProcessing: boolean;\n  duration: number;\n  transcript?: string;\n  confidence?: number;\n}\n\ninterface CopilotWidgetProps {\n  className?: string;\n  initialPosition?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n  enableVoice?: boolean;\n  enableDrag?: boolean;\n  persistState?: boolean;\n}\n\ninterface WidgetState {\n  isOpen: boolean;\n  isMinimized: boolean;\n  position: { x: number; y: number };\n  size: { width: number; height: number };\n}\n\nexport const CopilotWidget: React.FC<CopilotWidgetProps> = ({\n  className = '',\n  initialPosition = 'bottom-right',\n  enableVoice = true,\n  enableDrag = true,\n  persistState = true\n}) => {\n  // Widget state\n  const [widgetState, setWidgetState] = useState<WidgetState>({\n    isOpen: false,\n    isMinimized: false,\n    position: getInitialPosition(initialPosition),\n    size: { width: 400, height: 600 }\n  });\n  \n  // Chat state\n  const [messages, setMessages] = useState<CopilotMessage[]>([]);\n  const [inputValue, setInputValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  \n  // Voice state\n  const [voiceRecording, setVoiceRecording] = useState<VoiceRecording>({\n    isRecording: false,\n    isProcessing: false,\n    duration: 0\n  });\n  \n  // Widget interaction state\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [lastInteraction, setLastInteraction] = useState<Date>(new Date());\n  \n  // Refs\n  const widgetRef = useRef<HTMLDivElement>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const voiceTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const dragRef = useRef<{ isDragging: boolean; offset: { x: number; y: number } }>({\n    isDragging: false,\n    offset: { x: 0, y: 0 }\n  });\n\n  // Initialize widget\n  useEffect(() => {\n    loadPersistedState();\n    initializeWelcomeMessage();\n  }, []);\n\n  // Auto-scroll to bottom\n  useEffect(() => {\n    if (widgetState.isOpen && messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages, widgetState.isOpen]);\n\n  // Handle outside clicks\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (widgetRef.current && !widgetRef.current.contains(event.target as Node)) {\n        if (widgetState.isOpen && !isDragging) {\n          // Optionally auto-minimize on outside click\n          // setWidgetState(prev => ({ ...prev, isMinimized: true }));\n        }\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [widgetState.isOpen, isDragging]);\n\n  // Persist state\n  useEffect(() => {\n    if (persistState) {\n      savePersistedState();\n    }\n  }, [widgetState, persistState]);\n\n  const loadPersistedState = () => {\n    if (!persistState) return;\n    \n    try {\n      const saved = localStorage.getItem('neonhub-copilot-widget');\n      if (saved) {\n        const state = JSON.parse(saved);\n        setWidgetState(prev => ({ ...prev, ...state }));\n      }\n    } catch (error) {\n      console.error('Failed to load persisted widget state:', error);\n    }\n  };\n\n  const savePersistedState = () => {\n    if (!persistState) return;\n    \n    try {\n      localStorage.setItem('neonhub-copilot-widget', JSON.stringify(widgetState));\n    } catch (error) {\n      console.error('Failed to save widget state:', error);\n    }\n  };\n\n  const initializeWelcomeMessage = () => {\n    const welcomeMessage: CopilotMessage = {\n      id: 'welcome',\n      role: 'assistant',\n      content: `Hi! I'm your AI Marketing Copilot 🤖\\n\\nI can help you with:\\n• Generate reports and analytics\\n• Analyze campaign performance\\n• Create forecasts and insights\\n• Manage campaigns\\n• Answer questions about your data\\n\\nJust ask me anything!`,\n      timestamp: new Date().toISOString(),\n      confidence: 1.0,\n      status: 'completed'\n    };\n    setMessages([welcomeMessage]);\n  };\n\n  const toggleWidget = () => {\n    setWidgetState(prev => ({\n      ...prev,\n      isOpen: !prev.isOpen,\n      isMinimized: false\n    }));\n    \n    if (!widgetState.isOpen) {\n      setUnreadCount(0);\n      setLastInteraction(new Date());\n      // Focus input when opening\n      setTimeout(() => inputRef.current?.focus(), 100);\n    }\n  };\n\n  const minimizeWidget = () => {\n    setWidgetState(prev => ({ ...prev, isMinimized: !prev.isMinimized }));\n  };\n\n  const closeWidget = () => {\n    setWidgetState(prev => ({ ...prev, isOpen: false }));\n  };\n\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isLoading) return;\n\n    const userMessage: CopilotMessage = {\n      id: `msg_${Date.now()}`,\n      role: 'user',\n      content: inputValue.trim(),\n      timestamp: new Date().toISOString(),\n      status: 'sent'\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue('');\n    setIsLoading(true);\n    setIsTyping(true);\n\n    try {\n      // Mock AI response - in production would call tRPC endpoint\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      const response = await generateMockResponse(userMessage.content);\n      setMessages(prev => [...prev, response]);\n      \n      // Update unread count if widget is not focused\n      if (!widgetState.isOpen) {\n        setUnreadCount(prev => prev + 1);\n      }\n      \n    } catch (error) {\n      console.error('Error sending message:', error);\n      const errorMessage: CopilotMessage = {\n        id: `error_${Date.now()}`,\n        role: 'assistant',\n        content: 'I apologize, but I encountered an error. Please try again.',\n        timestamp: new Date().toISOString(),\n        status: 'failed'\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n      setIsTyping(false);\n    }\n  };\n\n  const generateMockResponse = async (input: string): Promise<CopilotMessage> => {\n    const inputLower = input.toLowerCase();\n    \n    let content = '';\n    let actions: string[] = [];\n    let attachments: MessageAttachment[] = [];\n    \n    if (inputLower.includes('report') || inputLower.includes('generate')) {\n      content = `I'll generate a comprehensive report for you. This will include performance metrics, strategic insights, and recommendations.\\n\\nWould you like me to proceed with creating the report?`;\n      actions = ['Generate Report', 'Customize Format', 'View Analytics'];\n      attachments = [{\n        type: 'report',\n        id: 'sample_report',\n        title: 'Performance Report',\n        preview: 'Key metrics and insights'\n      }];\n    } else if (inputLower.includes('campaign')) {\n      content = `I can help you with campaign management. Here's what I found:\\n\\n• 12 active campaigns\\n• Average ROAS: 3.4x\\n• Top performer: Holiday Sale Campaign\\n\\nWhat would you like me to do?`;\n      actions = ['View Details', 'Optimize Budget', 'Create New Campaign'];\n    } else if (inputLower.includes('analytics') || inputLower.includes('performance')) {\n      content = `Here's your current performance overview:\\n\\n📊 **Key Metrics:**\\n• Revenue: $142K (+18%)\\n• ROAS: 3.4x (+12%)\\n• Conversions: 1,247 (+8%)\\n• Brand Alignment: 91%\\n\\nPerformance is trending upward!`;\n      actions = ['Deep Dive', 'Export Data', 'Set Alerts'];\n    } else {\n      content = `I understand you're asking about \"${input}\". I can help you with marketing analytics, campaign management, report generation, and strategic insights.\\n\\nWhat specific task would you like me to assist with?`;\n      actions = ['Show Capabilities', 'View Dashboard', 'Get Help'];\n    }\n    \n    return {\n      id: `resp_${Date.now()}`,\n      role: 'assistant',\n      content,\n      timestamp: new Date().toISOString(),\n      confidence: 0.9,\n      actions: actions.length > 0 ? actions : undefined,\n      attachments: attachments.length > 0 ? attachments : undefined,\n      status: 'completed'\n    };\n  };\n\n  const startVoiceRecording = async () => {\n    if (!enableVoice) return;\n    \n    try {\n      setVoiceRecording({\n        isRecording: true,\n        isProcessing: false,\n        duration: 0\n      });\n      \n      voiceTimerRef.current = setInterval(() => {\n        setVoiceRecording(prev => ({\n          ...prev,\n          duration: prev.duration + 1\n        }));\n      }, 1000);\n      \n    } catch (error) {\n      console.error('Failed to start voice recording:', error);\n    }\n  };\n\n  const stopVoiceRecording = async () => {\n    if (voiceTimerRef.current) {\n      clearInterval(voiceTimerRef.current);\n      voiceTimerRef.current = null;\n    }\n    \n    setVoiceRecording(prev => ({\n      ...prev,\n      isRecording: false,\n      isProcessing: true\n    }));\n    \n    try {\n      // Mock voice transcription\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      const mockTranscript = \"Generate a quarterly performance report\";\n      \n      setVoiceRecording(prev => ({\n        ...prev,\n        isProcessing: false,\n        transcript: mockTranscript,\n        confidence: 0.94\n      }));\n      \n      setInputValue(mockTranscript);\n      \n    } catch (error) {\n      console.error('Voice transcription failed:', error);\n      setVoiceRecording(prev => ({\n        ...prev,\n        isProcessing: false\n      }));\n    }\n  };\n\n  const executeAction = async (action: string) => {\n    console.log(`Executing action: ${action}`);\n    \n    // Mock action execution\n    const actionMessage: CopilotMessage = {\n      id: `action_${Date.now()}`,\n      role: 'assistant',\n      content: `✅ **${action}** executed successfully!\\n\\nI've completed the requested action. You can find the results in your dashboard.`,\n      timestamp: new Date().toISOString(),\n      status: 'completed'\n    };\n    \n    setMessages(prev => [...prev, actionMessage]);\n  };\n\n  // Drag functionality\n  const handleMouseDown = (e: React.MouseEvent) => {\n    if (!enableDrag) return;\n    \n    setIsDragging(true);\n    const rect = widgetRef.current?.getBoundingClientRect();\n    if (rect) {\n      setDragOffset({\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top\n      });\n    }\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent) => {\n    if (!isDragging || !enableDrag) return;\n    \n    const newX = e.clientX - dragOffset.x;\n    const newY = e.clientY - dragOffset.y;\n    \n    // Keep widget within viewport bounds\n    const maxX = window.innerWidth - widgetState.size.width;\n    const maxY = window.innerHeight - widgetState.size.height;\n    \n    setWidgetState(prev => ({\n      ...prev,\n      position: {\n        x: Math.max(0, Math.min(newX, maxX)),\n        y: Math.max(0, Math.min(newY, maxY))\n      }\n    }));\n  }, [isDragging, dragOffset, widgetState.size, enableDrag]);\n\n  const handleMouseUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [isDragging, handleMouseMove, handleMouseUp]);\n\n  const formatTimestamp = (timestamp: string): string => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    const minutes = Math.floor(diff / 60000);\n    \n    if (minutes < 1) return 'now';\n    if (minutes < 60) return `${minutes}m`;\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n\n  const formatDuration = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div ref={widgetRef} className={`fixed z-50 ${className}`}>\n      <AnimatePresence>\n        {!widgetState.isOpen ? (\n          // Floating Action Button\n          <motion.div\n            initial={{ scale: 0, opacity: 0 }}\n            animate={{ scale: 1, opacity: 1 }}\n            exit={{ scale: 0, opacity: 0 }}\n            className=\"relative\"\n            style={{\n              left: widgetState.position.x,\n              top: widgetState.position.y\n            }}\n          >\n            <Button\n              onClick={toggleWidget}\n              className=\"w-16 h-16 rounded-full bg-neon-green hover:bg-neon-green/80 shadow-2xl shadow-neon-green/20 border-2 border-neon-green/30\"\n              onMouseDown={handleMouseDown}\n            >\n              <Bot className=\"w-8 h-8 text-gray-900\" />\n            </Button>\n            \n            {unreadCount > 0 && (\n              <motion.div\n                initial={{ scale: 0 }}\n                animate={{ scale: 1 }}\n                className=\"absolute -top-1 -right-1 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center text-xs font-bold text-white\"\n              >\n                {unreadCount > 9 ? '9+' : unreadCount}\n              </motion.div>\n            )}\n          </motion.div>\n        ) : (\n          // Expanded Widget\n          <motion.div\n            initial={{ scale: 0.8, opacity: 0, y: 20 }}\n            animate={{ scale: 1, opacity: 1, y: 0 }}\n            exit={{ scale: 0.8, opacity: 0, y: 20 }}\n            transition={{ duration: 0.2 }}\n            style={{\n              left: widgetState.position.x,\n              top: widgetState.position.y,\n              width: widgetState.size.width,\n              height: widgetState.isMinimized ? 'auto' : widgetState.size.height\n            }}\n            className=\"bg-gray-900/95 backdrop-blur-sm border border-gray-700 rounded-lg shadow-2xl overflow-hidden\"\n          >\n            {/* Header */}\n            <div \n              className=\"bg-gray-800/50 border-b border-gray-700 p-3 cursor-move flex items-center justify-between\"\n              onMouseDown={handleMouseDown}\n            >\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-3 h-3 rounded-full bg-neon-green animate-pulse\"></div>\n                <span className=\"text-sm font-medium text-gray-200\">AI Copilot</span>\n                <Badge variant=\"outline\" className=\"text-xs\">Online</Badge>\n              </div>\n              \n              <div className=\"flex items-center gap-1\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={minimizeWidget}\n                  className=\"p-1 h-6 w-6 text-gray-400 hover:text-gray-200\"\n                >\n                  {widgetState.isMinimized ? <Maximize2 className=\"w-3 h-3\" /> : <Minimize2 className=\"w-3 h-3\" />}\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={closeWidget}\n                  className=\"p-1 h-6 w-6 text-gray-400 hover:text-gray-200\"\n                >\n                  <X className=\"w-3 h-3\" />\n                </Button>\n              </div>\n            </div>\n\n            {!widgetState.isMinimized && (\n              <>\n                {/* Messages Area */}\n                <ScrollArea className=\"h-96 p-3\">\n                  <div className=\"space-y-3\">\n                    {messages.map((message) => (\n                      <div key={message.id} className=\"flex gap-2\">\n                        <Avatar className=\"w-6 h-6 flex-shrink-0\">\n                          {message.role === 'user' ? (\n                            <AvatarFallback className=\"bg-blue-600 text-xs\">\n                              <User className=\"w-3 h-3\" />\n                            </AvatarFallback>\n                          ) : (\n                            <AvatarFallback className=\"bg-neon-green/20 text-neon-green text-xs\">\n                              <Bot className=\"w-3 h-3\" />\n                            </AvatarFallback>\n                          )}\n                        </Avatar>\n                        \n                        <div className=\"flex-1 space-y-1\">\n                          <div className=\"flex items-center gap-2 text-xs\">\n                            <span className=\"font-medium text-gray-300\">\n                              {message.role === 'user' ? 'You' : 'AI'}\n                            </span>\n                            <span className=\"text-gray-500\">\n                              {formatTimestamp(message.timestamp)}\n                            </span>\n                            {message.confidence && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {(message.confidence * 100).toFixed(0)}%\n                              </Badge>\n                            )}\n                            {message.status && (\n                              <div className=\"flex items-center\">\n                                {message.status === 'sending' && <Loader2 className=\"w-3 h-3 animate-spin text-blue-400\" />}\n                                {message.status === 'completed' && <CheckCircle className=\"w-3 h-3 text-green-400\" />}\n                                {message.status === 'failed' && <AlertCircle className=\"w-3 h-3 text-red-400\" />}\n                              </div>\n                            )}\n                          </div>\n                          \n                          <div className=\"bg-gray-800/50 rounded-lg p-2 text-sm text-gray-200\">\n                            <div className=\"whitespace-pre-wrap\">{message.content}</div>\n                            \n                            {/* Actions */}\n                            {message.actions && (\n                              <div className=\"flex flex-wrap gap-1 mt-2\">\n                                {message.actions.map((action, index) => (\n                                  <Button\n                                    key={index}\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => executeAction(action)}\n                                    className=\"text-xs h-6 px-2 border-gray-600 hover:border-neon-green\"\n                                  >\n                                    {action}\n                                  </Button>\n                                ))}\n                              </div>\n                            )}\n                            \n                            {/* Attachments */}\n                            {message.attachments && (\n                              <div className=\"mt-2 space-y-1\">\n                                {message.attachments.map((attachment, index) => (\n                                  <div key={index} className=\"flex items-center justify-between bg-gray-700/50 rounded p-2\">\n                                    <div className=\"flex items-center gap-2\">\n                                      <Zap className=\"w-3 h-3 text-neon-green\" />\n                                      <div>\n                                        <div className=\"text-xs font-medium\">{attachment.title}</div>\n                                        {attachment.preview && (\n                                          <div className=\"text-xs text-gray-400\">{attachment.preview}</div>\n                                        )}\n                                      </div>\n                                    </div>\n                                    <Button variant=\"ghost\" size=\"sm\" className=\"p-1 h-6 w-6\">\n                                      <Download className=\"w-3 h-3\" />\n                                    </Button>\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                    \n                    {/* Typing Indicator */}\n                    {isTyping && (\n                      <div className=\"flex gap-2\">\n                        <Avatar className=\"w-6 h-6 flex-shrink-0\">\n                          <AvatarFallback className=\"bg-neon-green/20 text-neon-green text-xs\">\n                            <Bot className=\"w-3 h-3\" />\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"bg-gray-800/50 rounded-lg p-2\">\n                          <div className=\"flex items-center gap-1\">\n                            <div className=\"flex space-x-1\">\n                              <div className=\"w-1 h-1 bg-neon-green rounded-full animate-bounce\"></div>\n                              <div className=\"w-1 h-1 bg-neon-green rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                              <div className=\"w-1 h-1 bg-neon-green rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                            </div>\n                            <span className=\"text-xs text-gray-400 ml-2\">AI is thinking...</span>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                    \n                    <div ref={messagesEndRef} />\n                  </div>\n                </ScrollArea>\n\n                {/* Voice Recording Status */}\n                {(voiceRecording.isRecording || voiceRecording.isProcessing) && (\n                  <div className=\"px-3 pb-2\">\n                    <div className=\"bg-neon-green/10 border border-neon-green/30 rounded-lg p-2\">\n                      <div className=\"flex items-center gap-2\">\n                        {voiceRecording.isRecording ? (\n                          <>\n                            <div className=\"w-2 h-2 rounded-full bg-red-500 animate-pulse\"></div>\n                            <span className=\"text-xs text-red-400\">Recording</span>\n                            <span className=\"text-xs text-gray-400\">\n                              {formatDuration(voiceRecording.duration)}\n                            </span>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={stopVoiceRecording}\n                              className=\"ml-auto text-xs h-6 px-2\"\n                            >\n                              Stop\n                            </Button>\n                          </>\n                        ) : (\n                          <>\n                            <Loader2 className=\"w-3 h-3 animate-spin text-neon-green\" />\n                            <span className=\"text-xs text-neon-green\">Processing...</span>\n                          </>\n                        )}\n                      </div>\n                      {voiceRecording.transcript && (\n                        <div className=\"mt-1 text-xs text-gray-300 bg-gray-800 rounded p-1\">\n                          {voiceRecording.transcript}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                {/* Input Area */}\n                <div className=\"border-t border-gray-700 p-3\">\n                  <div className=\"flex gap-2 items-end\">\n                    <div className=\"flex-1\">\n                      <Input\n                        ref={inputRef}\n                        value={inputValue}\n                        onChange={(e) => setInputValue(e.target.value)}\n                        onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                        placeholder=\"Ask me anything...\"\n                        className=\"text-sm bg-gray-800/50 border-gray-600 focus:border-neon-green\"\n                        disabled={isLoading}\n                      />\n                    </div>\n                    \n                    <div className=\"flex gap-1\">\n                      {enableVoice && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={voiceRecording.isRecording ? stopVoiceRecording : startVoiceRecording}\n                          className={`p-2 h-8 w-8 ${voiceRecording.isRecording ? 'text-red-400' : 'text-gray-400 hover:text-neon-green'}`}\n                          disabled={voiceRecording.isProcessing}\n                        >\n                          {voiceRecording.isRecording ? <MicOff className=\"w-4 h-4\" /> : <Mic className=\"w-4 h-4\" />}\n                        </Button>\n                      )}\n                      \n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={handleSendMessage}\n                        disabled={!inputValue.trim() || isLoading}\n                        className=\"p-2 h-8 w-8 text-gray-400 hover:text-neon-green\"\n                      >\n                        {isLoading ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : <Send className=\"w-4 h-4\" />}\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  {/* Quick Actions */}\n                  <div className=\"flex flex-wrap gap-1 mt-2\">\n                    {[\n                      \"Show analytics\",\n                      \"Generate report\",\n                      \"Campaign status\",\n                      \"Help\"\n                    ].map((suggestion, index) => (\n                      <Button\n                        key={index}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setInputValue(suggestion)}\n                        className=\"text-xs h-6 px-2 border-gray-600 hover:border-neon-green\"\n                      >\n                        {suggestion}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              </>\n            )}\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\n// Helper function to get initial position\nfunction getInitialPosition(position: string): { x: number; y: number } {\n  const margin = 20;\n  const buttonSize = 64; // Size of the floating button\n  \n  switch (position) {\n    case 'bottom-right':\n      return {\n        x: window.innerWidth - buttonSize - margin,\n        y: window.innerHeight - buttonSize - margin\n      };\n    case 'bottom-left':\n      return { x: margin, y: window.innerHeight - buttonSize - margin };\n    case 'top-right':\n      return { x: window.innerWidth - buttonSize - margin, y: margin };\n    case 'top-left':\n      return { x: margin, y: margin };\n    default:\n      return {\n        x: window.innerWidth - buttonSize - margin,\n        y: window.innerHeight - buttonSize - margin\n      };\n  }\n}\n\nexport default CopilotWidget; ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/EmailAgentTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1769,1772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1769,1772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1836,1839],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1836,1839],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2738,2791],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":102,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":102,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2964,3013],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":178,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5711,5714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5711,5714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { \n  EnvelopeIcon,\n  PaperAirplaneIcon,\n  CalendarIcon,\n  ChartBarIcon,\n  UserGroupIcon,\n  ClockIcon,\n  CheckCircleIcon,\n  XCircleIcon\n} from '@heroicons/react/24/outline';\nimport { trpc } from '../lib/trpc';\n\n// Form schemas\nconst emailTemplateSchema = z.object({\n  type: z.enum(['newsletter', 'promotional', 'welcome', 'follow-up', 'reminder', 'announcement']),\n  subject: z.string().min(1, 'Subject is required').max(200),\n  content: z.object({\n    headline: z.string().min(1, 'Headline is required').max(200),\n    message: z.string().min(1, 'Message is required'),\n    ctaText: z.string().min(1, 'CTA text is required').max(50),\n    ctaUrl: z.string().url('Invalid URL'),\n    footerText: z.string().optional(),\n  }),\n  brand: z.object({\n    name: z.string().min(1, 'Brand name is required').max(100),\n    primaryColor: z.string().optional(),\n    secondaryColor: z.string().optional(),\n  }),\n  personalization: z.boolean().default(true),\n  mobileOptimized: z.boolean().default(true),\n});\n\nconst campaignSchema = z.object({\n  recipients: z.array(z.object({\n    email: z.string().email(),\n    name: z.string().optional(),\n  })).min(1, 'At least one recipient is required'),\n  scheduleAt: z.date().optional(),\n  testMode: z.boolean().default(false),\n});\n\ntype EmailTemplateForm = z.infer<typeof emailTemplateSchema>;\ntype CampaignForm = z.infer<typeof campaignSchema>;\n\nexport default function EmailAgentTab() {\n  const [activeSection, setActiveSection] = useState<'template' | 'campaign' | 'analytics'>('template');\n  const [generatedTemplate, setGeneratedTemplate] = useState<any>(null);\n  const [campaignResult, setCampaignResult] = useState<any>(null);\n\n  // Form setup\n  const templateForm = useForm<EmailTemplateForm>({\n    resolver: zodResolver(emailTemplateSchema),\n    defaultValues: {\n      type: 'newsletter',\n      subject: '',\n      content: {\n        headline: '',\n        message: '',\n        ctaText: 'Learn More',\n        ctaUrl: '',\n        footerText: '',\n      },\n      brand: {\n        name: '',\n        primaryColor: '#3B82F6',\n        secondaryColor: '#1E40AF',\n      },\n      personalization: true,\n      mobileOptimized: true,\n    },\n  });\n\n  const campaignForm = useForm<CampaignForm>({\n    resolver: zodResolver(campaignSchema),\n    defaultValues: {\n      recipients: [{ email: '', name: '' }],\n      testMode: true,\n    },\n  });\n\n  // tRPC mutations\n  const generateTemplate = trpc.email.generateTemplate.useMutation({\n    onSuccess: (data) => {\n      setGeneratedTemplate(data);\n    },\n    onError: (error) => {\n      console.error('Failed to generate template:', error);\n    },\n  });\n\n  const sendCampaign = trpc.email.sendCampaign.useMutation({\n    onSuccess: (data) => {\n      setCampaignResult(data);\n    },\n    onError: (error) => {\n      console.error('Failed to send campaign:', error);\n    },\n  });\n\n  // tRPC queries\n  const { data: performance, isLoading: performanceLoading } = trpc.email.trackPerformance.useQuery(\n    { timeRange: '30d' },\n    { enabled: activeSection === 'analytics' }\n  );\n\n  // Form handlers\n  const onGenerateTemplate = (data: EmailTemplateForm) => {\n    generateTemplate.mutate(data);\n  };\n\n  const onSendCampaign = (data: CampaignForm) => {\n    if (!generatedTemplate) return;\n    \n    sendCampaign.mutate({\n      campaignId: 'temp-campaign-id', // In real app, get from context\n      emailTemplate: {\n        subject: templateForm.getValues('subject'),\n        htmlContent: generatedTemplate.htmlTemplate,\n        textContent: generatedTemplate.textTemplate,\n        fromName: templateForm.getValues('brand.name'),\n        fromEmail: 'noreply@neonhub.ai',\n      },\n      recipients: data.recipients,\n      scheduleAt: data.scheduleAt,\n      testMode: data.testMode,\n    });\n  };\n\n  const addRecipient = () => {\n    const current = campaignForm.getValues('recipients');\n    campaignForm.setValue('recipients', [...current, { email: '', name: '' }]);\n  };\n\n  const removeRecipient = (index: number) => {\n    const current = campaignForm.getValues('recipients');\n    if (current.length > 1) {\n      campaignForm.setValue('recipients', current.filter((_, i) => i !== index));\n    }\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n            <EnvelopeIcon className=\"h-5 w-5 text-blue-600\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-semibold text-gray-900\">Email Marketing Agent</h1>\n            <p className=\"text-sm text-gray-600\">Create campaigns, manage templates, and track performance</p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <div className=\"h-2 w-2 bg-green-500 rounded-full\"></div>\n          <span className=\"text-sm text-gray-600\">Agent Online</span>\n        </div>\n      </div>\n\n      {/* Section Navigation */}\n      <div className=\"flex space-x-1 mb-6 bg-gray-100 p-1 rounded-lg\">\n        {[\n          { id: 'template', name: 'Template Builder', icon: EnvelopeIcon },\n          { id: 'campaign', name: 'Send Campaign', icon: PaperAirplaneIcon },\n          { id: 'analytics', name: 'Analytics', icon: ChartBarIcon },\n        ].map((section) => {\n          const Icon = section.icon;\n          return (\n            <button\n              key={section.id}\n              onClick={() => setActiveSection(section.id as any)}\n              className={`flex items-center gap-2 px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n                activeSection === section.id\n                  ? 'bg-white text-blue-700 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              <Icon className=\"h-4 w-4\" />\n              {section.name}\n            </button>\n          );\n        })}\n      </div>\n\n      {/* Template Builder Section */}\n      {activeSection === 'template' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Template Form */}\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Template Configuration</h3>\n            \n            <form onSubmit={templateForm.handleSubmit(onGenerateTemplate)} className=\"space-y-4\">\n              {/* Template Type */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Template Type</label>\n                <Controller\n                  name=\"type\"\n                  control={templateForm.control}\n                  render={({ field }) => (\n                    <select\n                      {...field}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    >\n                      <option value=\"newsletter\">Newsletter</option>\n                      <option value=\"promotional\">Promotional</option>\n                      <option value=\"welcome\">Welcome</option>\n                      <option value=\"follow-up\">Follow-up</option>\n                      <option value=\"reminder\">Reminder</option>\n                      <option value=\"announcement\">Announcement</option>\n                    </select>\n                  )}\n                />\n              </div>\n\n              {/* Subject Line */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Subject Line</label>\n                <input\n                  {...templateForm.register('subject')}\n                  type=\"text\"\n                  placeholder=\"Enter email subject...\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n                {templateForm.formState.errors.subject && (\n                  <p className=\"mt-1 text-sm text-red-600\">{templateForm.formState.errors.subject.message}</p>\n                )}\n              </div>\n\n              {/* Brand Information */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Brand Name</label>\n                <input\n                  {...templateForm.register('brand.name')}\n                  type=\"text\"\n                  placeholder=\"Your brand name...\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n\n              {/* Content Fields */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Headline</label>\n                <input\n                  {...templateForm.register('content.headline')}\n                  type=\"text\"\n                  placeholder=\"Main headline...\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Message</label>\n                <textarea\n                  {...templateForm.register('content.message')}\n                  rows={4}\n                  placeholder=\"Email message content...\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">CTA Text</label>\n                  <input\n                    {...templateForm.register('content.ctaText')}\n                    type=\"text\"\n                    placeholder=\"Call to action...\"\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">CTA URL</label>\n                  <input\n                    {...templateForm.register('content.ctaUrl')}\n                    type=\"url\"\n                    placeholder=\"https://...\"\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n              </div>\n\n              {/* Options */}\n              <div className=\"flex items-center space-x-6\">\n                <label className=\"flex items-center\">\n                  <input\n                    {...templateForm.register('personalization')}\n                    type=\"checkbox\"\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  />\n                  <span className=\"ml-2 text-sm text-gray-700\">Personalization</span>\n                </label>\n                <label className=\"flex items-center\">\n                  <input\n                    {...templateForm.register('mobileOptimized')}\n                    type=\"checkbox\"\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  />\n                  <span className=\"ml-2 text-sm text-gray-700\">Mobile Optimized</span>\n                </label>\n              </div>\n\n              {/* Generate Button */}\n              <button\n                type=\"submit\"\n                disabled={generateTemplate.isLoading}\n                className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n              >\n                {generateTemplate.isLoading ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    Generating...\n                  </>\n                ) : (\n                  <>\n                    <EnvelopeIcon className=\"h-4 w-4\" />\n                    Generate Template\n                  </>\n                )}\n              </button>\n            </form>\n          </div>\n\n          {/* Template Preview */}\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Template Preview</h3>\n            \n            {generatedTemplate ? (\n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-gray-50 rounded-lg\">\n                  <h4 className=\"font-medium text-gray-900 mb-2\">Subject: {generatedTemplate.subject}</h4>\n                  <div className=\"text-sm text-gray-600 mb-2\">Preview: {generatedTemplate.previewText}</div>\n                </div>\n                \n                <div className=\"border border-gray-200 rounded-lg overflow-hidden\">\n                  <div \n                    className=\"p-4 max-h-96 overflow-y-auto\"\n                    dangerouslySetInnerHTML={{ __html: generatedTemplate.htmlTemplate }}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between pt-4 border-t border-gray-200\">\n                  <div className=\"text-sm text-gray-600\">\n                    Template generated successfully\n                  </div>\n                  <button\n                    onClick={() => setActiveSection('campaign')}\n                    className=\"bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 flex items-center gap-2\"\n                  >\n                    <PaperAirplaneIcon className=\"h-4 w-4\" />\n                    Send Campaign\n                  </button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-12 text-gray-500\">\n                <EnvelopeIcon className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                <p>Generate a template to see the preview</p>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Campaign Section */}\n      {activeSection === 'campaign' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Campaign Form */}\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Campaign Setup</h3>\n            \n            {!generatedTemplate && (\n              <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg mb-4\">\n                <p className=\"text-sm text-yellow-800\">Please generate a template first before sending a campaign.</p>\n              </div>\n            )}\n            \n            <form onSubmit={campaignForm.handleSubmit(onSendCampaign)} className=\"space-y-4\">\n              {/* Recipients */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Recipients</label>\n                {campaignForm.watch('recipients').map((_, index) => (\n                  <div key={index} className=\"flex gap-2 mb-2\">\n                    <input\n                      {...campaignForm.register(`recipients.${index}.email`)}\n                      type=\"email\"\n                      placeholder=\"Email address...\"\n                      className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                    <input\n                      {...campaignForm.register(`recipients.${index}.name`)}\n                      type=\"text\"\n                      placeholder=\"Name (optional)...\"\n                      className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                    {campaignForm.watch('recipients').length > 1 && (\n                      <button\n                        type=\"button\"\n                        onClick={() => removeRecipient(index)}\n                        className=\"px-3 py-2 text-red-600 hover:bg-red-50 rounded-md\"\n                      >\n                        <XCircleIcon className=\"h-4 w-4\" />\n                      </button>\n                    )}\n                  </div>\n                ))}\n                <button\n                  type=\"button\"\n                  onClick={addRecipient}\n                  className=\"text-blue-600 hover:text-blue-700 text-sm flex items-center gap-1\"\n                >\n                  <UserGroupIcon className=\"h-4 w-4\" />\n                  Add Recipient\n                </button>\n              </div>\n\n              {/* Scheduling */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Schedule</label>\n                <Controller\n                  name=\"scheduleAt\"\n                  control={campaignForm.control}\n                  render={({ field }) => (\n                    <input\n                      {...field}\n                      type=\"datetime-local\"\n                      value={field.value ? new Date(field.value.getTime() - field.value.getTimezoneOffset() * 60000).toISOString().slice(0, 16) : ''}\n                      onChange={(e) => field.onChange(e.target.value ? new Date(e.target.value) : undefined)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                  )}\n                />\n                <p className=\"mt-1 text-xs text-gray-500\">Leave empty to send immediately</p>\n              </div>\n\n              {/* Test Mode */}\n              <div>\n                <label className=\"flex items-center\">\n                  <input\n                    {...campaignForm.register('testMode')}\n                    type=\"checkbox\"\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  />\n                  <span className=\"ml-2 text-sm text-gray-700\">Test Mode (safe sending)</span>\n                </label>\n              </div>\n\n              {/* Send Button */}\n              <button\n                type=\"submit\"\n                disabled={sendCampaign.isLoading || !generatedTemplate}\n                className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n              >\n                {sendCampaign.isLoading ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    Sending...\n                  </>\n                ) : (\n                  <>\n                    <PaperAirplaneIcon className=\"h-4 w-4\" />\n                    Send Campaign\n                  </>\n                )}\n              </button>\n            </form>\n          </div>\n\n          {/* Campaign Results */}\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Campaign Results</h3>\n            \n            {campaignResult ? (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-green-600\">\n                  <CheckCircleIcon className=\"h-5 w-5\" />\n                  <span className=\"font-medium\">Campaign sent successfully!</span>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"p-3 bg-green-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-green-700\">{campaignResult.sentCount}</div>\n                    <div className=\"text-sm text-green-600\">Emails Sent</div>\n                  </div>\n                  <div className=\"p-3 bg-red-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-red-700\">{campaignResult.failedCount}</div>\n                    <div className=\"text-sm text-red-600\">Failed</div>\n                  </div>\n                </div>\n                \n                {campaignResult.scheduledFor && (\n                  <div className=\"p-3 bg-blue-50 rounded-lg\">\n                    <div className=\"flex items-center gap-2 text-blue-700\">\n                      <CalendarIcon className=\"h-4 w-4\" />\n                      <span className=\"text-sm\">Scheduled for: {new Date(campaignResult.scheduledFor).toLocaleString()}</span>\n                    </div>\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div className=\"text-center py-12 text-gray-500\">\n                <PaperAirplaneIcon className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                <p>Campaign results will appear here</p>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Analytics Section */}\n      {activeSection === 'analytics' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Performance Metrics */}\n          <div className=\"lg:col-span-2 bg-white rounded-lg border border-gray-200 p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Email Performance (Last 30 Days)</h3>\n            \n            {performanceLoading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n              </div>\n            ) : performance ? (\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"p-4 bg-blue-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-700\">{performance.performance.sent.toLocaleString()}</div>\n                    <div className=\"text-sm text-blue-600\">Emails Sent</div>\n                  </div>\n                  <div className=\"p-4 bg-green-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-green-700\">{performance.rates.delivery}%</div>\n                    <div className=\"text-sm text-green-600\">Delivery Rate</div>\n                  </div>\n                  <div className=\"p-4 bg-purple-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-purple-700\">{performance.rates.open}%</div>\n                    <div className=\"text-sm text-purple-600\">Open Rate</div>\n                  </div>\n                  <div className=\"p-4 bg-orange-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-orange-700\">{performance.rates.click}%</div>\n                    <div className=\"text-sm text-orange-600\">Click Rate</div>\n                  </div>\n                </div>\n                \n                <div className=\"border-t border-gray-200 pt-4\">\n                  <h4 className=\"font-medium text-gray-900 mb-3\">Detailed Metrics</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Delivered:</span>\n                      <span className=\"font-medium\">{performance.performance.delivered.toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Opened:</span>\n                      <span className=\"font-medium\">{performance.performance.opened.toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Clicked:</span>\n                      <span className=\"font-medium\">{performance.performance.clicked.toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Bounced:</span>\n                      <span className=\"font-medium text-red-600\">{performance.performance.bounced.toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Unsubscribed:</span>\n                      <span className=\"font-medium text-red-600\">{performance.performance.unsubscribed.toLocaleString()}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-12 text-gray-500\">\n                <ChartBarIcon className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                <p>No performance data available</p>\n              </div>\n            )}\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Quick Actions</h3>\n            \n            <div className=\"space-y-3\">\n              <button\n                onClick={() => setActiveSection('template')}\n                className=\"w-full p-3 text-left border border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 transition-colors\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  <EnvelopeIcon className=\"h-5 w-5 text-blue-600\" />\n                  <div>\n                    <div className=\"font-medium text-gray-900\">New Template</div>\n                    <div className=\"text-sm text-gray-600\">Create email template</div>\n                  </div>\n                </div>\n              </button>\n              \n              <button\n                onClick={() => setActiveSection('campaign')}\n                className=\"w-full p-3 text-left border border-gray-200 rounded-lg hover:border-green-300 hover:bg-green-50 transition-colors\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  <PaperAirplaneIcon className=\"h-5 w-5 text-green-600\" />\n                  <div>\n                    <div className=\"font-medium text-gray-900\">Send Campaign</div>\n                    <div className=\"text-sm text-gray-600\">Launch email campaign</div>\n                  </div>\n                </div>\n              </button>\n              \n              <div className=\"p-3 border border-gray-200 rounded-lg bg-gray-50\">\n                <div className=\"flex items-center gap-3\">\n                  <ClockIcon className=\"h-5 w-5 text-gray-400\" />\n                  <div>\n                    <div className=\"font-medium text-gray-700\">Sequences</div>\n                    <div className=\"text-sm text-gray-500\">Coming soon</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/FaqAccordion.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1657,1744],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { ChevronDownIcon, ChevronUpIcon } from '@heroicons/react/24/outline';\nimport { faq } from '@/lib/faq';\n\ninterface FaqAccordionProps {\n  selectedCategory?: string;\n  searchTerm?: string;\n}\n\nexport function FaqAccordion({ selectedCategory, searchTerm }: FaqAccordionProps) {\n  const [openQuestions, setOpenQuestions] = useState<Set<string>>(new Set());\n\n  const toggleQuestion = (questionId: string) => {\n    const newOpenQuestions = new Set(openQuestions);\n    if (newOpenQuestions.has(questionId)) {\n      newOpenQuestions.delete(questionId);\n    } else {\n      newOpenQuestions.add(questionId);\n    }\n    setOpenQuestions(newOpenQuestions);\n  };\n\n  // Filter questions based on category and search term\n  const getFilteredQuestions = () => {\n    let questions = faq.categories.flatMap(category => \n      category.questions.map(q => ({ ...q, categoryName: category.name, categoryIcon: category.icon }))\n    );\n\n    if (selectedCategory && selectedCategory !== 'all') {\n      questions = questions.filter(q => q.category === selectedCategory);\n    }\n\n    if (searchTerm) {\n      const lowercaseSearch = searchTerm.toLowerCase();\n      questions = questions.filter(q => \n        q.question.toLowerCase().includes(lowercaseSearch) ||\n        q.answer.toLowerCase().includes(lowercaseSearch) ||\n        q.tags.some(tag => tag.toLowerCase().includes(lowercaseSearch))\n      );\n    }\n\n    return questions;\n  };\n\n  const filteredQuestions = getFilteredQuestions();\n\n  const handleHelpful = (questionId: string, helpful: boolean) => {\n    // In a real app, this would call an API to record the feedback\n    console.log(`Question ${questionId} marked as ${helpful ? 'helpful' : 'not helpful'}`);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {filteredQuestions.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <div className=\"text-6xl mb-4 opacity-50\">🤷‍♂️</div>\n          <h3 className=\"text-xl font-medium text-gray-700 mb-2\">No matching questions found</h3>\n          <p className=\"text-gray-500\">Try adjusting your search or browse different categories</p>\n        </div>\n      ) : (\n        filteredQuestions.map((question) => (\n          <div\n            key={question.id}\n            className=\"bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow\"\n          >\n            {/* Question Header */}\n            <button\n              onClick={() => toggleQuestion(question.id)}\n              className=\"w-full px-6 py-4 text-left flex items-center justify-between hover:bg-gray-50 transition-colors\"\n            >\n              <div className=\"flex items-center space-x-3 flex-1\">\n                <span className=\"text-xl\">{question.categoryIcon}</span>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold text-gray-900 pr-4\">{question.question}</h3>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <span className=\"text-xs text-gray-500\">{question.categoryName}</span>\n                    <span className=\"text-gray-300\">•</span>\n                    <span className=\"text-xs text-gray-500\">\n                      Updated {question.lastUpdated.toLocaleDateString()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n              {openQuestions.has(question.id) ? (\n                <ChevronUpIcon className=\"h-5 w-5 text-gray-500 flex-shrink-0\" />\n              ) : (\n                <ChevronDownIcon className=\"h-5 w-5 text-gray-500 flex-shrink-0\" />\n              )}\n            </button>\n\n            {/* Answer Content */}\n            {openQuestions.has(question.id) && (\n              <div className=\"px-6 pb-6\">\n                <div className=\"border-t border-gray-100 pt-4\">\n                  <div className=\"prose prose-sm max-w-none\">\n                    <p className=\"text-gray-700 leading-relaxed\">{question.answer}</p>\n                  </div>\n\n                  {/* Tags */}\n                  {question.tags.length > 0 && (\n                    <div className=\"flex flex-wrap gap-2 mt-4\">\n                      {question.tags.map((tag, index) => (\n                        <span\n                          key={index}\n                          className=\"px-2 py-1 bg-blue-50 text-blue-700 text-xs rounded-full\"\n                        >\n                          {tag}\n                        </span>\n                      ))}\n                    </div>\n                  )}\n\n                  {/* Feedback Section */}\n                  <div className=\"flex items-center justify-between mt-6 pt-4 border-t border-gray-100\">\n                    <div className=\"flex items-center space-x-4\">\n                      <span className=\"text-sm text-gray-600\">Was this helpful?</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <button\n                          onClick={() => handleHelpful(question.id, true)}\n                          className=\"flex items-center space-x-1 px-3 py-1 text-sm text-green-600 hover:bg-green-50 rounded-full transition-colors\"\n                        >\n                          <span>👍</span>\n                          <span>{question.helpful}</span>\n                        </button>\n                        <button\n                          onClick={() => handleHelpful(question.id, false)}\n                          className=\"flex items-center space-x-1 px-3 py-1 text-sm text-red-600 hover:bg-red-50 rounded-full transition-colors\"\n                        >\n                          <span>👎</span>\n                          <span>{question.notHelpful}</span>\n                        </button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-xs text-gray-500\">\n                      {Math.round((question.helpful / (question.helpful + question.notHelpful)) * 100)}% found helpful\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        ))\n      )}\n    </div>\n  );\n}\n\n// Category selector component\nexport function FaqCategorySelector({ \n  selectedCategory, \n  onCategoryChange \n}: { \n  selectedCategory: string; \n  onCategoryChange: (category: string) => void; \n}) {\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3 mb-6\">\n      <button\n        onClick={() => onCategoryChange('all')}\n        className={`p-4 rounded-lg border-2 transition-all ${\n          selectedCategory === 'all'\n            ? 'border-blue-500 bg-blue-50'\n            : 'border-gray-200 hover:border-gray-300'\n        }`}\n      >\n        <div className=\"text-2xl mb-2\">🌟</div>\n        <div className=\"text-sm font-medium\">All Topics</div>\n      </button>\n      \n      {faq.categories.map((category) => (\n        <button\n          key={category.id}\n          onClick={() => onCategoryChange(category.id)}\n          className={`p-4 rounded-lg border-2 transition-all ${\n            selectedCategory === category.id\n              ? 'border-blue-500 bg-blue-50'\n              : 'border-gray-200 hover:border-gray-300'\n          }`}\n        >\n          <div className=\"text-2xl mb-2\">{category.icon}</div>\n          <div className=\"text-sm font-medium\">{category.name}</div>\n          <div className=\"text-xs text-gray-500 mt-1\">\n            {category.questions.length} questions\n          </div>\n        </button>\n      ))}\n    </div>\n  );\n}\n\n// Quick help topics component\nexport function QuickHelpTopics() {\n  return (\n    <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-6 mb-8\">\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">🚀 Quick Start Guide</h3>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {faq.quickHelp.map((topic, index) => (\n          <div\n            key={index}\n            className=\"bg-white rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow cursor-pointer\"\n          >\n            <div className=\"text-2xl mb-2\">{topic.icon}</div>\n            <h4 className=\"font-semibold text-gray-900 mb-1\">{topic.title}</h4>\n            <p className=\"text-sm text-gray-600 mb-3\">{topic.description}</p>\n            <button className=\"text-sm text-blue-600 hover:text-blue-700 font-medium\">\n              {topic.action} →\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// Support contact info component\nexport function SupportContactInfo() {\n  return (\n    <div className=\"bg-gray-50 rounded-lg p-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">📞 Need More Help?</h3>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <div className=\"text-center\">\n          <div className=\"text-2xl mb-2\">💬</div>\n          <div className=\"font-medium text-gray-900\">Live Chat</div>\n          <div className=\"text-sm text-gray-600\">{faq.supportContact.liveChatHours}</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-2xl mb-2\">📧</div>\n          <div className=\"font-medium text-gray-900\">Email Support</div>\n          <div className=\"text-sm text-blue-600 hover:text-blue-700\">\n            <a href={`mailto:${faq.supportContact.email}`}>\n              {faq.supportContact.email}\n            </a>\n          </div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-2xl mb-2\">📞</div>\n          <div className=\"font-medium text-gray-900\">Phone Support</div>\n          <div className=\"text-sm text-gray-600\">{faq.supportContact.phone}</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-2xl mb-2\">⚡</div>\n          <div className=\"font-medium text-gray-900\">Response Time</div>\n          <div className=\"text-sm text-gray-600\">{faq.supportContact.averageResponseTime}</div>\n        </div>\n      </div>\n      \n      <div className=\"mt-4 pt-4 border-t border-gray-200\">\n        <div className=\"flex items-center justify-center space-x-4 text-sm text-gray-600\">\n          <div className=\"flex items-center space-x-1\">\n            <span>⭐</span>\n            <span>{faq.supportContact.satisfactionScore}/5.0 satisfaction</span>\n          </div>\n          <span>•</span>\n          <div>Available in {faq.supportContact.languages.join(', ')}</div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/PatternExplorerPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[771,774],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[771,774],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[808,811],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[808,811],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'refreshKey' is defined but never used. Allowed unused args must match /^_/u.","line":64,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":156,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4742,4745],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4742,4745],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":284,"column":94,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":284,"endColumn":124,"fix":{"range":[11010,11040],"text":"`${(value * 100).toFixed(1)  }%`"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":1,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useMemo } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Search, \n  Filter, \n  Brain, \n  TrendingUp, \n  Copy, \n  Users, \n  Calendar,\n  BarChart3,\n  Zap,\n  Target,\n  Clock,\n  ChevronDown,\n  ChevronUp,\n  Star\n} from 'lucide-react';\n\ninterface Pattern {\n  id: string;\n  summary: string;\n  patternScore: number;\n  winningVariants: {\n    contentStyles: string[];\n    subjects: string[];\n    ctaTypes: string[];\n    timingWindows: string[];\n    agentSequences: string[];\n  };\n  segments: {\n    demographics: Record<string, any>;\n    behavioral: Record<string, any>;\n    performance: Record<string, number>;\n  };\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface VariantStructure {\n  type: 'subject' | 'copy' | 'visual' | 'cta' | 'timing';\n  structure: string;\n  performanceScore: number;\n  usageCount: number;\n  segments: string[];\n}\n\ninterface PatternExplorerPanelProps {\n  patterns: Pattern[];\n  trendingPatterns: Pattern[];\n  variantStructures: VariantStructure[];\n  refreshKey: number;\n}\n\nexport function PatternExplorerPanel({ \n  patterns, \n  trendingPatterns, \n  variantStructures, \n  refreshKey \n}: PatternExplorerPanelProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedFilter, setSelectedFilter] = useState<'all' | 'high-score' | 'trending' | 'recent'>('all');\n  const [expandedPattern, setExpandedPattern] = useState<string | null>(null);\n\n  // Filter and search patterns\n  const filteredPatterns = useMemo(() => {\n    let filtered = patterns;\n\n    // Apply filter\n    switch (selectedFilter) {\n      case 'high-score':\n        filtered = patterns.filter(p => p.patternScore >= 85);\n        break;\n      case 'trending':\n        filtered = trendingPatterns;\n        break;\n      case 'recent':\n        filtered = patterns.filter(p => {\n          const createdAt = new Date(p.createdAt);\n          const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n          return createdAt > weekAgo;\n        });\n        break;\n      default:\n        filtered = patterns;\n    }\n\n    // Apply search\n    if (searchTerm) {\n      filtered = filtered.filter(p =>\n        p.summary.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        p.winningVariants.contentStyles.some(style => \n          style.toLowerCase().includes(searchTerm.toLowerCase())\n        ) ||\n        p.winningVariants.agentSequences.some(seq => \n          seq.toLowerCase().includes(searchTerm.toLowerCase())\n        )\n      );\n    }\n\n    return filtered.sort((a, b) => b.patternScore - a.patternScore);\n  }, [patterns, trendingPatterns, searchTerm, selectedFilter]);\n\n  const getScoreColor = (score: number) => {\n    if (score >= 90) return 'text-green-400';\n    if (score >= 80) return 'text-yellow-400';\n    if (score >= 70) return 'text-orange-400';\n    return 'text-red-400';\n  };\n\n  const getScoreBadgeColor = (score: number) => {\n    if (score >= 90) return 'bg-green-500/20 text-green-400 border-green-400';\n    if (score >= 80) return 'bg-yellow-500/20 text-yellow-400 border-yellow-400';\n    if (score >= 70) return 'bg-orange-500/20 text-orange-400 border-orange-400';\n    return 'bg-red-500/20 text-red-400 border-red-400';\n  };\n\n  const copyPatternId = (id: string) => {\n    navigator.clipboard.writeText(id);\n    // You could add a toast notification here\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header and Controls */}\n      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-white mb-2\">Pattern Explorer</h2>\n          <p className=\"text-slate-400\">\n            Discover and analyze successful campaign patterns from {patterns.length} campaigns\n          </p>\n        </div>\n\n        <div className=\"flex items-center gap-4\">\n          {/* Search */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Search patterns...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 bg-slate-800/50 border-slate-700 text-white placeholder-slate-400 w-64\"\n            />\n          </div>\n\n          {/* Filter */}\n          <div className=\"flex items-center gap-2\">\n            <Filter className=\"w-4 h-4 text-slate-400\" />\n            <select\n              value={selectedFilter}\n              onChange={(e) => setSelectedFilter(e.target.value as any)}\n              className=\"bg-slate-800/50 border border-slate-700 rounded-md px-3 py-2 text-white text-sm\"\n            >\n              <option value=\"all\">All Patterns</option>\n              <option value=\"high-score\">High Score (85+)</option>\n              <option value=\"trending\">Trending</option>\n              <option value=\"recent\">Recent (7 days)</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Filter Summary */}\n      <div className=\"flex items-center gap-4 text-sm text-slate-400\">\n        <span>Showing {filteredPatterns.length} patterns</span>\n        {selectedFilter !== 'all' && (\n          <Badge variant=\"outline\" className=\"text-neon-blue border-neon-blue\">\n            {selectedFilter === 'high-score' && 'High Score'}\n            {selectedFilter === 'trending' && 'Trending'}\n            {selectedFilter === 'recent' && 'Recent'}\n          </Badge>\n        )}\n      </div>\n\n      {/* Patterns Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {filteredPatterns.map((pattern) => (\n          <Card key={pattern.id} className=\"bg-slate-800/50 backdrop-blur-sm border-slate-700/50 hover:border-neon-blue/50 transition-all duration-300\">\n            <CardHeader>\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <CardTitle className=\"text-white text-lg leading-tight mb-2\">\n                    {pattern.summary}\n                  </CardTitle>\n                  <div className=\"flex items-center gap-3 text-sm text-slate-400\">\n                    <div className=\"flex items-center gap-1\">\n                      <Calendar className=\"w-4 h-4\" />\n                      {new Date(pattern.createdAt).toLocaleDateString()}\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <Brain className=\"w-4 h-4\" />\n                      ID: {pattern.id.slice(-8)}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex flex-col items-end gap-2\">\n                  <Badge variant=\"outline\" className={getScoreBadgeColor(pattern.patternScore)}>\n                    {pattern.patternScore}/100\n                  </Badge>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => copyPatternId(pattern.id)}\n                    className=\"h-8 w-8 p-0 text-slate-400 hover:text-white\"\n                  >\n                    <Copy className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n\n            <CardContent className=\"space-y-4\">\n              {/* Quick Stats */}\n              <div className=\"grid grid-cols-3 gap-4 p-3 bg-slate-700/30 rounded-lg\">\n                <div className=\"text-center\">\n                  <div className=\"text-neon-blue font-bold\">\n                    {pattern.winningVariants.agentSequences.length}\n                  </div>\n                  <div className=\"text-xs text-slate-400\">Sequences</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-neon-purple font-bold\">\n                    {pattern.winningVariants.contentStyles.length}\n                  </div>\n                  <div className=\"text-xs text-slate-400\">Styles</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-green-400 font-bold\">\n                    {Object.keys(pattern.segments.demographics || {}).length}\n                  </div>\n                  <div className=\"text-xs text-slate-400\">Segments</div>\n                </div>\n              </div>\n\n              {/* Winning Variants Preview */}\n              <div className=\"space-y-3\">\n                {pattern.winningVariants.contentStyles.length > 0 && (\n                  <div>\n                    <h4 className=\"text-sm font-medium text-slate-300 mb-2 flex items-center gap-2\">\n                      <Target className=\"w-4 h-4 text-neon-blue\" />\n                      Content Styles\n                    </h4>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {pattern.winningVariants.contentStyles.slice(0, 3).map((style, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-xs text-slate-300 border-slate-600\">\n                          {style}\n                        </Badge>\n                      ))}\n                      {pattern.winningVariants.contentStyles.length > 3 && (\n                        <Badge variant=\"outline\" className=\"text-xs text-slate-400 border-slate-600\">\n                          +{pattern.winningVariants.contentStyles.length - 3}\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                {pattern.winningVariants.agentSequences.length > 0 && (\n                  <div>\n                    <h4 className=\"text-sm font-medium text-slate-300 mb-2 flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4 text-neon-purple\" />\n                      Agent Sequence\n                    </h4>\n                    <div className=\"bg-slate-700/30 rounded px-3 py-2 text-xs font-mono text-slate-300\">\n                      {pattern.winningVariants.agentSequences[0]?.replace(/-/g, ' → ') || 'No sequence'}\n                    </div>\n                  </div>\n                )}\n\n                {pattern.segments.performance && Object.keys(pattern.segments.performance).length > 0 && (\n                  <div>\n                    <h4 className=\"text-sm font-medium text-slate-300 mb-2 flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4 text-green-400\" />\n                      Performance Metrics\n                    </h4>\n                    <div className=\"grid grid-cols-3 gap-2 text-xs\">\n                      {Object.entries(pattern.segments.performance).slice(0, 3).map(([key, value]) => (\n                        <div key={key} className=\"bg-slate-700/30 rounded p-2 text-center\">\n                          <div className=\"font-bold text-white\">{typeof value === 'number' ? (value * 100).toFixed(1) + '%' : value}</div>\n                          <div className=\"text-slate-400 capitalize\">{key.replace(/([A-Z])/g, ' $1').trim()}</div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Expand/Collapse Button */}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setExpandedPattern(expandedPattern === pattern.id ? null : pattern.id)}\n                className=\"w-full text-slate-400 hover:text-white hover:bg-slate-700/50\"\n              >\n                {expandedPattern === pattern.id ? (\n                  <>\n                    <ChevronUp className=\"w-4 h-4 mr-2\" />\n                    Show Less\n                  </>\n                ) : (\n                  <>\n                    <ChevronDown className=\"w-4 h-4 mr-2\" />\n                    Show Details\n                  </>\n                )}\n              </Button>\n\n              {/* Expanded Details */}\n              {expandedPattern === pattern.id && (\n                <div className=\"border-t border-slate-700/50 pt-4 space-y-4\">\n                  {/* All Winning Variants */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <h5 className=\"font-medium text-white mb-2\">Subject Lines</h5>\n                      <div className=\"space-y-1\">\n                        {pattern.winningVariants.subjects.length > 0 ? (\n                          pattern.winningVariants.subjects.map((subject, index) => (\n                            <div key={index} className=\"text-sm text-slate-300 bg-slate-700/30 rounded px-2 py-1\">\n                              {subject}\n                            </div>\n                          ))\n                        ) : (\n                          <div className=\"text-sm text-slate-400\">No subject data</div>\n                        )}\n                      </div>\n                    </div>\n\n                    <div>\n                      <h5 className=\"font-medium text-white mb-2\">CTA Types</h5>\n                      <div className=\"space-y-1\">\n                        {pattern.winningVariants.ctaTypes.length > 0 ? (\n                          pattern.winningVariants.ctaTypes.map((cta, index) => (\n                            <div key={index} className=\"text-sm text-slate-300 bg-slate-700/30 rounded px-2 py-1\">\n                              {cta}\n                            </div>\n                          ))\n                        ) : (\n                          <div className=\"text-sm text-slate-400\">No CTA data</div>\n                        )}\n                      </div>\n                    </div>\n\n                    <div>\n                      <h5 className=\"font-medium text-white mb-2\">Timing Windows</h5>\n                      <div className=\"space-y-1\">\n                        {pattern.winningVariants.timingWindows.length > 0 ? (\n                          pattern.winningVariants.timingWindows.map((timing, index) => (\n                            <div key={index} className=\"text-sm text-slate-300 bg-slate-700/30 rounded px-2 py-1 flex items-center gap-2\">\n                              <Clock className=\"w-3 h-3 text-neon-blue\" />\n                              {timing}\n                            </div>\n                          ))\n                        ) : (\n                          <div className=\"text-sm text-slate-400\">No timing data</div>\n                        )}\n                      </div>\n                    </div>\n\n                    <div>\n                      <h5 className=\"font-medium text-white mb-2\">Segment Data</h5>\n                      <div className=\"space-y-1\">\n                        {Object.entries(pattern.segments.demographics || {}).map(([key, value]) => (\n                          <div key={key} className=\"text-sm text-slate-300 bg-slate-700/30 rounded px-2 py-1 flex items-center gap-2\">\n                            <Users className=\"w-3 h-3 text-neon-purple\" />\n                            {key}: {typeof value === 'object' ? JSON.stringify(value) : value}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"flex gap-2 pt-4 border-t border-slate-700/50\">\n                    <Button size=\"sm\" className=\"bg-gradient-to-r from-neon-blue to-blue-600 hover:from-blue-600 hover:to-neon-blue\">\n                      <Star className=\"w-4 h-4 mr-2\" />\n                      Use as Template\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" className=\"border-slate-600 text-slate-300 hover:bg-slate-700/50\">\n                      <Copy className=\"w-4 h-4 mr-2\" />\n                      Clone Pattern\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Empty State */}\n      {filteredPatterns.length === 0 && (\n        <Card className=\"bg-slate-800/50 backdrop-blur-sm border-slate-700/50\">\n          <CardContent className=\"text-center py-12\">\n            <Brain className=\"w-12 h-12 text-slate-500 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-white mb-2\">No patterns found</h3>\n            <p className=\"text-slate-400 mb-4\">\n              {searchTerm || selectedFilter !== 'all' \n                ? 'Try adjusting your search or filter criteria.'\n                : 'Run more campaigns to start generating patterns.'}\n            </p>\n            {(searchTerm || selectedFilter !== 'all') && (\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setSearchTerm('');\n                  setSelectedFilter('all');\n                }}\n                className=\"border-slate-600 text-slate-300 hover:bg-slate-700/50\"\n              >\n                Clear Filters\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Variant Structures Summary */}\n      {variantStructures.length > 0 && (\n        <Card className=\"bg-slate-800/50 backdrop-blur-sm border-slate-700/50\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center gap-2\">\n              <TrendingUp className=\"w-5 h-5 text-neon-blue\" />\n              Top Performing Variant Structures\n            </CardTitle>\n            <CardDescription className=\"text-slate-400\">\n              Most successful content and timing patterns across all campaigns\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {variantStructures.slice(0, 6).map((structure, index) => (\n                <div key={index} className=\"p-4 bg-slate-700/30 rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <Badge variant=\"outline\" className=\"text-xs capitalize text-slate-300 border-slate-600\">\n                      {structure.type}\n                    </Badge>\n                    <span className={`text-sm font-bold ${getScoreColor(structure.performanceScore)}`}>\n                      {structure.performanceScore.toFixed(1)}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-white font-medium mb-1\">{structure.structure}</p>\n                  <p className=\"text-xs text-slate-400\">Used in {structure.usageCount} campaigns</p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/PredictiveCampaignDesigner.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { trpc } from '@/utils/trpc';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { \n  Rocket, \n  Target, \n  DollarSign, \n  Calendar, \n  Users, \n  Brain,\n  TrendingUp,\n  CheckCircle,\n  AlertTriangle,\n  Clock,\n  Zap\n} from 'lucide-react';\n\nexport function PredictiveCampaignDesigner() {\n  const [formData, setFormData] = useState({\n    objective: '',\n    budget: '',\n    timeline: '',\n    targetAudience: {\n      demographics: '',\n      interests: '',\n      size: ''\n    }\n  });\n\n  const generateCampaign = trpc.insights.generatePredictiveCampaign.useMutation();\n\n  const handleGenerate = async () => {\n    await generateCampaign.mutateAsync({\n      objective: formData.objective,\n      budget: parseInt(formData.budget),\n      timeline: parseInt(formData.timeline),\n      targetAudience: {\n        demographics: formData.targetAudience.demographics,\n        interests: formData.targetAudience.interests,\n        estimatedSize: formData.targetAudience.size\n      }\n    });\n  };\n\n  const plan = generateCampaign.data?.data?.mainPlan;\n  const readiness = generateCampaign.data?.data?.executionReadiness;\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      {/* Input Form */}\n      <Card className=\"bg-slate-800/50 backdrop-blur-sm border-slate-700/50\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-white\">\n            <Rocket className=\"w-5 h-5 mr-2 text-neon-blue\" />\n            Campaign Designer\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label htmlFor=\"objective\" className=\"text-slate-300\">Campaign Objective</Label>\n            <Textarea\n              id=\"objective\"\n              placeholder=\"Describe your campaign goals...\"\n              value={formData.objective}\n              onChange={(e) => setFormData({...formData, objective: e.target.value})}\n              className=\"bg-slate-700/50 border-slate-600 text-white mt-1\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"budget\" className=\"text-slate-300\">Budget ($)</Label>\n              <Input\n                id=\"budget\"\n                type=\"number\"\n                placeholder=\"10000\"\n                value={formData.budget}\n                onChange={(e) => setFormData({...formData, budget: e.target.value})}\n                className=\"bg-slate-700/50 border-slate-600 text-white mt-1\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"timeline\" className=\"text-slate-300\">Timeline (days)</Label>\n              <Input\n                id=\"timeline\"\n                type=\"number\"\n                placeholder=\"30\"\n                value={formData.timeline}\n                onChange={(e) => setFormData({...formData, timeline: e.target.value})}\n                className=\"bg-slate-700/50 border-slate-600 text-white mt-1\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label className=\"text-slate-300\">Target Audience</Label>\n            <div className=\"space-y-3 mt-2\">\n              <Input\n                placeholder=\"Demographics (e.g., 25-45, urban professionals)\"\n                value={formData.targetAudience.demographics}\n                onChange={(e) => setFormData({\n                  ...formData, \n                  targetAudience: {...formData.targetAudience, demographics: e.target.value}\n                })}\n                className=\"bg-slate-700/50 border-slate-600 text-white\"\n              />\n              <Input\n                placeholder=\"Interests (e.g., technology, business)\"\n                value={formData.targetAudience.interests}\n                onChange={(e) => setFormData({\n                  ...formData, \n                  targetAudience: {...formData.targetAudience, interests: e.target.value}\n                })}\n                className=\"bg-slate-700/50 border-slate-600 text-white\"\n              />\n            </div>\n          </div>\n\n          <Button \n            onClick={handleGenerate}\n            disabled={generateCampaign.isLoading || !formData.objective || !formData.budget}\n            className=\"w-full bg-gradient-to-r from-neon-blue to-blue-600 hover:from-blue-600 hover:to-neon-blue\"\n          >\n            {generateCampaign.isLoading ? (\n              <>\n                <Brain className=\"w-4 h-4 mr-2 animate-pulse\" />\n                Generating Plan...\n              </>\n            ) : (\n              <>\n                <Rocket className=\"w-4 h-4 mr-2\" />\n                Generate Campaign\n              </>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Generated Plan */}\n      {plan && (\n        <Card className=\"bg-slate-800/50 backdrop-blur-sm border-slate-700/50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between text-white\">\n              <span className=\"flex items-center\">\n                <Target className=\"w-5 h-5 mr-2 text-neon-purple\" />\n                {plan.name}\n              </span>\n              <Badge \n                variant=\"outline\" \n                className={`${plan.confidence > 80 ? 'text-green-400 border-green-400' : 'text-yellow-400 border-yellow-400'}`}\n              >\n                {plan.confidence}% Confidence\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Key Metrics */}\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div className=\"text-center p-3 bg-slate-700/30 rounded-lg\">\n                <DollarSign className=\"w-6 h-6 text-green-400 mx-auto mb-1\" />\n                <div className=\"text-lg font-bold text-white\">{plan.expectedROI.toFixed(1)}x</div>\n                <div className=\"text-xs text-slate-400\">Expected ROI</div>\n              </div>\n              <div className=\"text-center p-3 bg-slate-700/30 rounded-lg\">\n                <Calendar className=\"w-6 h-6 text-neon-blue mx-auto mb-1\" />\n                <div className=\"text-lg font-bold text-white\">{plan.timeline.totalDuration}</div>\n                <div className=\"text-xs text-slate-400\">Days</div>\n              </div>\n              <div className=\"text-center p-3 bg-slate-700/30 rounded-lg\">\n                <Users className=\"w-6 h-6 text-neon-purple mx-auto mb-1\" />\n                <div className=\"text-lg font-bold text-white\">{plan.targetSegments.length}</div>\n                <div className=\"text-xs text-slate-400\">Segments</div>\n              </div>\n            </div>\n\n            {/* Campaign Phases */}\n            <div>\n              <h4 className=\"font-medium text-white mb-3 flex items-center gap-2\">\n                <Clock className=\"w-4 h-4 text-neon-blue\" />\n                Campaign Phases\n              </h4>\n              <div className=\"space-y-2\">\n                {plan.timeline.phases.map((phase, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-slate-700/30 rounded-lg\">\n                    <div>\n                      <p className=\"font-medium text-white\">{phase.name}</p>\n                      <p className=\"text-sm text-slate-400\">{phase.agents.join(', ')}</p>\n                    </div>\n                    <Badge variant=\"outline\" className=\"text-slate-300 border-slate-600\">\n                      {phase.duration} days\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Readiness Status */}\n            {readiness && (\n              <div className=\"p-4 bg-slate-700/30 rounded-lg\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h4 className=\"font-medium text-white\">Execution Readiness</h4>\n                  {readiness.readyToLaunch ? (\n                    <CheckCircle className=\"w-5 h-5 text-green-400\" />\n                  ) : (\n                    <AlertTriangle className=\"w-5 h-5 text-yellow-400\" />\n                  )}\n                </div>\n                \n                {readiness.readyToLaunch ? (\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm text-green-400\">✅ Ready to launch</p>\n                    <Button className=\"w-full bg-gradient-to-r from-green-500 to-green-600\">\n                      <Zap className=\"w-4 h-4 mr-2\" />\n                      Launch Campaign\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm text-yellow-400\">⚠️ Review blockers before launch</p>\n                    {readiness.blockers.map((blocker, index) => (\n                      <p key={index} className=\"text-xs text-slate-400\">• {blocker}</p>\n                    ))}\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* Recommendations */}\n            {plan.recommendations && (\n              <div>\n                <h4 className=\"font-medium text-white mb-3\">AI Recommendations</h4>\n                <div className=\"space-y-2\">\n                  {plan.recommendations.slice(0, 3).map((rec, index) => (\n                    <div key={index} className=\"flex items-start gap-2 text-sm text-slate-300\">\n                      <div className=\"w-1.5 h-1.5 bg-neon-blue rounded-full mt-2 flex-shrink-0\"></div>\n                      {rec}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/SEOAgentTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowTrendingUpIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[747,750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[747,750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[976,979],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[976,979],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'keywordResults' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":39,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setKeywordResults' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":39,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1422,1425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1422,1425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":166,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5617,5620],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5617,5620],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":237,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8741,8744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8741,8744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":284,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":284,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10866,10869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10866,10869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":396,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":396,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16127,16130],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16127,16130],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { api } from '../utils/trpc';\nimport { \n  MagnifyingGlassIcon, \n  SparklesIcon,\n  ChartBarIcon,\n  DocumentTextIcon,\n  ClipboardDocumentIcon,\n  CheckCircleIcon,\n  ArrowTrendingUpIcon\n} from '@heroicons/react/24/outline';\n\nexport default function SEOAgentTab() {\n  const [activeTab, setActiveTab] = useState<'analyze' | 'generate' | 'keywords' | 'performance'>('analyze');\n  const [analysisContent, setAnalysisContent] = useState('');\n  const [targetKeywords, setTargetKeywords] = useState<string[]>(['neon signs']);\n  const [newKeyword, setNewKeyword] = useState('');\n  const [copiedId, setCopiedId] = useState<string | null>(null);\n\n  // SEO Analysis\n  const [analysisResult, setAnalysisResult] = useState<any>(null);\n  const analyzeContent = api.seo.analyzeContent.useMutation({\n    onSuccess: (data) => {\n      setAnalysisResult(data);\n    },\n  });\n\n  // Content Generation\n  const [generatedContent, setGeneratedContent] = useState<any>(null);\n  const [generateTopic, setGenerateTopic] = useState('Custom Neon Signs');\n  const [contentType, setContentType] = useState<'blog_post' | 'product_description' | 'landing_page' | 'meta_description'>('blog_post');\n  const generateSeoContent = api.seo.generateSeoContent.useMutation({\n    onSuccess: (data) => {\n      setGeneratedContent(data);\n    },\n  });\n\n  // Keyword Research\n  const [keywordResults, setKeywordResults] = useState<any>(null);\n  const [seedKeyword, setSeedKeyword] = useState('neon signs');\n  const getKeywordResearch = api.seo.getKeywordResearch.useQuery(\n    { seedKeyword },\n    { enabled: false }\n  );\n\n  // Performance Metrics\n  const performanceMetrics = api.seo.getPerformanceMetrics.useQuery(\n    { timeRange: '30d' },\n    { enabled: activeTab === 'performance' }\n  );\n\n  const handleAnalyze = () => {\n    if (!analysisContent.trim()) return;\n    analyzeContent.mutate({\n      content: analysisContent,\n      targetKeywords: targetKeywords.length > 0 ? targetKeywords : undefined,\n    });\n  };\n\n  const handleGenerate = () => {\n    if (!generateTopic.trim() || targetKeywords.length === 0) return;\n    generateSeoContent.mutate({\n      topic: generateTopic,\n      targetKeywords,\n      contentType,\n    });\n  };\n\n  const handleKeywordResearch = () => {\n    if (!seedKeyword.trim()) return;\n    getKeywordResearch.refetch();\n  };\n\n  const addKeyword = () => {\n    if (newKeyword.trim() && !targetKeywords.includes(newKeyword.trim())) {\n      setTargetKeywords([...targetKeywords, newKeyword.trim()]);\n      setNewKeyword('');\n    }\n  };\n\n  const removeKeyword = (keyword: string) => {\n    setTargetKeywords(targetKeywords.filter(k => k !== keyword));\n  };\n\n  const copyToClipboard = (text: string, id: string) => {\n    navigator.clipboard.writeText(text);\n    setCopiedId(id);\n    setTimeout(() => setCopiedId(null), 2000);\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'high': return 'text-red-400';\n      case 'medium': return 'text-yellow-400';\n      case 'low': return 'text-green-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* SEO Agent Header */}\n      <div className=\"card-glow\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <MagnifyingGlassIcon className=\"h-8 w-8 text-purple-400\" />\n            <div>\n              <h2 className=\"text-xl font-semibold text-white\">SEO Agent</h2>\n              <p className=\"text-dark-400 text-sm\">AI-powered SEO optimization</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"status-indicator active\"></div>\n            <span className=\"text-green-400 text-sm\">Active</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Keywords Management */}\n      <div className=\"card-glow\">\n        <h3 className=\"text-lg font-semibold text-white mb-4\">Target Keywords</h3>\n        \n        <div className=\"flex flex-wrap gap-2 mb-4\">\n          {targetKeywords.map((keyword) => (\n            <span\n              key={keyword}\n              className=\"flex items-center space-x-2 px-3 py-1 bg-neon-400/20 text-neon-400 rounded-full text-sm\"\n            >\n              <span>{keyword}</span>\n              <button\n                onClick={() => removeKeyword(keyword)}\n                className=\"text-neon-400 hover:text-red-400\"\n              >\n                ×\n              </button>\n            </span>\n          ))}\n        </div>\n        \n        <div className=\"flex space-x-2\">\n          <input\n            type=\"text\"\n            value={newKeyword}\n            onChange={(e) => setNewKeyword(e.target.value)}\n            onKeyPress={(e) => e.key === 'Enter' && addKeyword()}\n            placeholder=\"Add keyword...\"\n            className=\"input flex-1\"\n          />\n          <button onClick={addKeyword} className=\"btn-secondary\">\n            Add\n          </button>\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"card-glow\">\n        <div className=\"flex space-x-1 mb-6\">\n          {[\n            { id: 'analyze', label: 'Content Analysis', icon: DocumentTextIcon },\n            { id: 'generate', label: 'Content Generation', icon: SparklesIcon },\n            { id: 'keywords', label: 'Keyword Research', icon: MagnifyingGlassIcon },\n            { id: 'performance', label: 'Performance', icon: ChartBarIcon }\n          ].map(({ id, label, icon: Icon }) => (\n            <button\n              key={id}\n              onClick={() => setActiveTab(id as any)}\n              className={`flex items-center space-x-2 px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n                activeTab === id\n                  ? 'bg-neon-400/20 text-neon-400'\n                  : 'text-dark-400 hover:text-white hover:bg-dark-700'\n              }`}\n            >\n              <Icon className=\"h-4 w-4\" />\n              <span>{label}</span>\n            </button>\n          ))}\n        </div>\n\n        {/* Content Analysis Tab */}\n        {activeTab === 'analyze' && (\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-dark-300 text-sm font-medium mb-2\">\n                Content to Analyze\n              </label>\n              <textarea\n                value={analysisContent}\n                onChange={(e) => setAnalysisContent(e.target.value)}\n                placeholder=\"Paste your content here for SEO analysis...\"\n                className=\"input w-full h-32 resize-none\"\n              />\n            </div>\n            \n            <button\n              onClick={handleAnalyze}\n              disabled={analyzeContent.isLoading || !analysisContent.trim()}\n              className=\"btn-primary flex items-center space-x-2\"\n            >\n              {analyzeContent.isLoading ? (\n                <>\n                  <SparklesIcon className=\"h-5 w-5 animate-spin\" />\n                  <span>Analyzing...</span>\n                </>\n              ) : (\n                <>\n                  <MagnifyingGlassIcon className=\"h-5 w-5\" />\n                  <span>Analyze Content</span>\n                </>\n              )}\n            </button>\n\n            {analysisResult && (\n              <div className=\"mt-6 space-y-4\">\n                {/* SEO Scores */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-dark-400 text-xs\">SEO Score</p>\n                    <p className=\"text-2xl font-bold text-neon-400\">{analysisResult.analysis.seoScore}/100</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-dark-400 text-xs\">Readability</p>\n                    <p className=\"text-2xl font-bold text-blue-400\">{analysisResult.analysis.readabilityScore}/100</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-dark-400 text-xs\">Word Count</p>\n                    <p className=\"text-2xl font-bold text-white\">{analysisResult.analysis.wordCount}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-dark-400 text-xs\">Keywords</p>\n                    <p className=\"text-2xl font-bold text-purple-400\">{analysisResult.analysis.keywordDensity.length}</p>\n                  </div>\n                </div>\n\n                {/* Suggestions */}\n                <div className=\"space-y-3\">\n                  <h4 className=\"text-white font-medium\">Optimization Suggestions</h4>\n                  {analysisResult.analysis.suggestions.map((suggestion: any, index: number) => (\n                    <div key={index} className=\"flex items-start space-x-3 p-3 bg-dark-800/50 rounded-lg\">\n                      <div className={`w-2 h-2 rounded-full mt-2 ${getSeverityColor(suggestion.severity)}`}></div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-white text-sm\">{suggestion.suggestion}</p>\n                        <p className=\"text-dark-400 text-xs mt-1\">{suggestion.impact}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Recommendations */}\n                <div className=\"space-y-2\">\n                  <h4 className=\"text-white font-medium\">Recommendations</h4>\n                  <ul className=\"space-y-1\">\n                    {analysisResult.recommendations.map((rec: string, index: number) => (\n                      <li key={index} className=\"text-dark-300 text-sm flex items-center space-x-2\">\n                        <span className=\"w-1 h-1 bg-neon-400 rounded-full\"></span>\n                        <span>{rec}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Content Generation Tab */}\n        {activeTab === 'generate' && (\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-dark-300 text-sm font-medium mb-2\">Topic</label>\n                <input\n                  type=\"text\"\n                  value={generateTopic}\n                  onChange={(e) => setGenerateTopic(e.target.value)}\n                  placeholder=\"e.g., Custom Neon Signs\"\n                  className=\"input w-full\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-dark-300 text-sm font-medium mb-2\">Content Type</label>\n                <select\n                  value={contentType}\n                  onChange={(e) => setContentType(e.target.value as any)}\n                  className=\"input w-full\"\n                >\n                  <option value=\"blog_post\">Blog Post</option>\n                  <option value=\"product_description\">Product Description</option>\n                  <option value=\"landing_page\">Landing Page</option>\n                  <option value=\"meta_description\">Meta Description</option>\n                </select>\n              </div>\n            </div>\n            \n            <button\n              onClick={handleGenerate}\n              disabled={generateSeoContent.isLoading || !generateTopic.trim() || targetKeywords.length === 0}\n              className=\"btn-primary flex items-center space-x-2\"\n            >\n              {generateSeoContent.isLoading ? (\n                <>\n                  <SparklesIcon className=\"h-5 w-5 animate-spin\" />\n                  <span>Generating...</span>\n                </>\n              ) : (\n                <>\n                  <DocumentTextIcon className=\"h-5 w-5\" />\n                  <span>Generate SEO Content</span>\n                </>\n              )}\n            </button>\n\n            {generatedContent && (\n              <div className=\"mt-6 space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h4 className=\"text-white font-medium\">Generated Content</h4>\n                  <button\n                    onClick={() => copyToClipboard(generatedContent.content, 'generated-content')}\n                    className=\"btn-pill flex items-center space-x-1\"\n                  >\n                    {copiedId === 'generated-content' ? (\n                      <CheckCircleIcon className=\"h-4 w-4 text-green-400\" />\n                    ) : (\n                      <ClipboardDocumentIcon className=\"h-4 w-4\" />\n                    )}\n                    <span className=\"text-xs\">{copiedId === 'generated-content' ? 'Copied!' : 'Copy'}</span>\n                  </button>\n                </div>\n                \n                <div className=\"p-4 bg-dark-800/50 rounded-lg\">\n                  <pre className=\"text-dark-300 text-sm whitespace-pre-wrap\">{generatedContent.content}</pre>\n                </div>\n                \n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-dark-400 text-xs\">Word Count</p>\n                    <p className=\"text-white font-semibold\">{generatedContent.seoMetrics.wordCount}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-dark-400 text-xs\">SEO Score</p>\n                    <p className=\"text-green-400 font-semibold\">{generatedContent.seoMetrics.seoScore}/100</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-dark-400 text-xs\">Readability</p>\n                    <p className=\"text-blue-400 font-semibold\">{generatedContent.seoMetrics.readabilityScore}/100</p>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Keyword Research Tab */}\n        {activeTab === 'keywords' && (\n          <div className=\"space-y-4\">\n            <div className=\"flex space-x-2\">\n              <input\n                type=\"text\"\n                value={seedKeyword}\n                onChange={(e) => setSeedKeyword(e.target.value)}\n                placeholder=\"Enter seed keyword...\"\n                className=\"input flex-1\"\n              />\n              <button\n                onClick={handleKeywordResearch}\n                disabled={getKeywordResearch.isFetching}\n                className=\"btn-primary\"\n              >\n                {getKeywordResearch.isFetching ? 'Researching...' : 'Research'}\n              </button>\n            </div>\n\n            {getKeywordResearch.data && (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-dark-400 text-xs\">Total Keywords</p>\n                    <p className=\"text-white font-semibold\">{getKeywordResearch.data.totalKeywords}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-dark-400 text-xs\">Avg Volume</p>\n                    <p className=\"text-blue-400 font-semibold\">{getKeywordResearch.data.avgSearchVolume.toLocaleString()}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-dark-400 text-xs\">Avg Difficulty</p>\n                    <p className=\"text-yellow-400 font-semibold\">{getKeywordResearch.data.avgDifficulty}/100</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-dark-400 text-xs\">Opportunities</p>\n                    <p className=\"text-green-400 font-semibold\">{getKeywordResearch.data.opportunities.length}</p>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <h4 className=\"text-white font-medium\">Keyword Opportunities</h4>\n                  {getKeywordResearch.data.keywords.map((keyword: any, index: number) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-dark-800/50 rounded-lg\">\n                      <div className=\"flex-1\">\n                        <p className=\"text-white text-sm font-medium\">{keyword.keyword}</p>\n                        <p className=\"text-dark-400 text-xs capitalize\">{keyword.intent} intent</p>\n                      </div>\n                      <div className=\"flex items-center space-x-4 text-right\">\n                        <div>\n                          <p className=\"text-white text-sm\">{keyword.searchVolume.toLocaleString()}</p>\n                          <p className=\"text-dark-400 text-xs\">Volume</p>\n                        </div>\n                        <div>\n                          <p className=\"text-yellow-400 text-sm\">{keyword.difficulty}/100</p>\n                          <p className=\"text-dark-400 text-xs\">Difficulty</p>\n                        </div>\n                        <div>\n                          <p className=\"text-green-400 text-sm\">${keyword.cpc}</p>\n                          <p className=\"text-dark-400 text-xs\">CPC</p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Performance Tab */}\n        {activeTab === 'performance' && (\n          <div className=\"space-y-4\">\n            {performanceMetrics.data && (\n              <>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-dark-400 text-xs\">Organic Traffic</p>\n                    <p className=\"text-2xl font-bold text-white\">{performanceMetrics.data.metrics.organicTraffic.current.toLocaleString()}</p>\n                    <p className=\"text-green-400 text-xs\">+{performanceMetrics.data.metrics.organicTraffic.change.toFixed(1)}%</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-dark-400 text-xs\">Avg Position</p>\n                    <p className=\"text-2xl font-bold text-blue-400\">{performanceMetrics.data.metrics.averagePosition.current}</p>\n                    <p className=\"text-green-400 text-xs\">+{performanceMetrics.data.metrics.averagePosition.change.toFixed(1)}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-dark-400 text-xs\">CTR</p>\n                    <p className=\"text-2xl font-bold text-purple-400\">{performanceMetrics.data.metrics.clickThroughRate.current}</p>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-dark-400 text-xs\">Total Keywords</p>\n                    <p className=\"text-white font-semibold\">{performanceMetrics.data.metrics.totalKeywords}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-dark-400 text-xs\">Top 10</p>\n                    <p className=\"text-green-400 font-semibold\">{performanceMetrics.data.metrics.keywordsTop10}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-dark-400 text-xs\">Top 3</p>\n                    <p className=\"text-neon-400 font-semibold\">{performanceMetrics.data.metrics.keywordsTop3}</p>\n                  </div>\n                </div>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Error Display */}\n      {(analyzeContent.error || generateSeoContent.error || getKeywordResearch.error) && (\n        <div className=\"card-glow border border-red-500/50\">\n          <div className=\"flex items-center space-x-2 text-red-400\">\n            <span className=\"text-sm\">\n              Error: {analyzeContent.error?.message || generateSeoContent.error?.message || getKeywordResearch.error?.message}\n            </span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/SegmentLiftChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[298,301],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[298,301],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[326,329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[326,329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'segmentData' is defined but never used. Allowed unused args must match /^_/u.","line":19,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'performanceInsights' is defined but never used. Allowed unused args must match /^_/u.","line":19,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":68}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  TrendingUp, \n  Users, \n  Target, \n  BarChart3,\n  ArrowUp,\n  ArrowDown\n} from 'lucide-react';\n\ninterface SegmentLiftChartProps {\n  segmentData: any;\n  performanceInsights: any[];\n}\n\nexport function SegmentLiftChart({ segmentData, performanceInsights }: SegmentLiftChartProps) {\n  const segments = [\n    { name: 'Young Professionals', performance: 88, lift: 15, size: 25000, color: 'text-neon-blue' },\n    { name: 'Small Business', performance: 92, lift: 23, size: 18000, color: 'text-neon-purple' },\n    { name: 'Tech Enthusiasts', performance: 95, lift: 28, size: 12000, color: 'text-green-400' },\n    { name: 'Enterprise', performance: 76, lift: -5, size: 35000, color: 'text-yellow-400' },\n    { name: 'Retail', performance: 82, lift: 8, size: 22000, color: 'text-orange-400' }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-2xl font-bold text-white mb-2\">Segment Performance Analytics</h2>\n        <p className=\"text-slate-400\">\n          Audience lift analysis and segment-specific pattern insights\n        </p>\n      </div>\n\n      {/* Segment Performance Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {segments.map((segment, index) => (\n          <Card key={index} className=\"bg-slate-800/50 backdrop-blur-sm border-slate-700/50\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center justify-between text-white text-lg\">\n                {segment.name}\n                <Badge \n                  variant=\"outline\" \n                  className={`${segment.performance > 85 ? 'text-green-400 border-green-400' : 'text-yellow-400 border-yellow-400'}`}\n                >\n                  {segment.performance}\n                </Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Performance Metrics */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-3 bg-slate-700/30 rounded-lg\">\n                  <Users className=\"w-5 h-5 mx-auto mb-1 text-slate-400\" />\n                  <div className=\"text-sm font-bold text-white\">\n                    {(segment.size / 1000).toFixed(0)}K\n                  </div>\n                  <div className=\"text-xs text-slate-400\">Audience</div>\n                </div>\n                <div className=\"text-center p-3 bg-slate-700/30 rounded-lg\">\n                  <div className=\"flex items-center justify-center mb-1\">\n                    {segment.lift > 0 ? (\n                      <ArrowUp className=\"w-4 h-4 text-green-400\" />\n                    ) : (\n                      <ArrowDown className=\"w-4 h-4 text-red-400\" />\n                    )}\n                  </div>\n                  <div className={`text-sm font-bold ${segment.lift > 0 ? 'text-green-400' : 'text-red-400'}`}>\n                    {segment.lift > 0 ? '+' : ''}{segment.lift}%\n                  </div>\n                  <div className=\"text-xs text-slate-400\">Lift</div>\n                </div>\n              </div>\n\n              {/* Performance Bar */}\n              <div>\n                <div className=\"flex justify-between text-sm mb-2\">\n                  <span className=\"text-slate-400\">Performance Score</span>\n                  <span className={segment.color}>{segment.performance}/100</span>\n                </div>\n                <div className=\"w-full bg-slate-700 rounded-full h-2\">\n                  <div \n                    className={`h-2 rounded-full bg-gradient-to-r ${\n                      segment.performance > 90 ? 'from-green-400 to-green-500' :\n                      segment.performance > 80 ? 'from-yellow-400 to-yellow-500' :\n                      'from-red-400 to-red-500'\n                    }`}\n                    style={{ width: `${segment.performance}%` }}\n                  ></div>\n                </div>\n              </div>\n\n              {/* Quick Insights */}\n              <div className=\"pt-2 border-t border-slate-700/50\">\n                <p className=\"text-xs text-slate-400\">\n                  {segment.performance > 90 ? '🎯 Top performer' :\n                   segment.performance > 80 ? '✅ Strong performance' :\n                   '⚠️ Needs optimization'}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Segment Insights Summary */}\n      <Card className=\"bg-slate-800/50 backdrop-blur-sm border-slate-700/50\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center gap-2\">\n            <BarChart3 className=\"w-5 h-5 text-neon-blue\" />\n            Performance Insights\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Top Performing Segments */}\n            <div>\n              <h4 className=\"font-medium text-white mb-3\">Top Performing Segments</h4>\n              <div className=\"space-y-2\">\n                {segments\n                  .sort((a, b) => b.performance - a.performance)\n                  .slice(0, 3)\n                  .map((segment, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 bg-slate-700/30 rounded\">\n                      <span className=\"text-slate-300\">{segment.name}</span>\n                      <div className=\"flex items-center gap-2\">\n                        <span className={segment.color}>{segment.performance}</span>\n                        <TrendingUp className=\"w-4 h-4 text-green-400\" />\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            </div>\n\n            {/* Optimization Opportunities */}\n            <div>\n              <h4 className=\"font-medium text-white mb-3\">Optimization Opportunities</h4>\n              <div className=\"space-y-2\">\n                <div className=\"p-3 bg-slate-700/30 rounded\">\n                  <div className=\"flex items-start gap-2\">\n                    <Target className=\"w-4 h-4 text-neon-blue mt-0.5\" />\n                    <div>\n                      <p className=\"text-sm text-white font-medium\">Tech Enthusiasts</p>\n                      <p className=\"text-xs text-slate-400\">Highest engagement - increase budget allocation</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/SocialAgentTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HashtagIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EyeIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2250,2253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2250,2253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2315,2318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2315,2318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":104,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":104,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3388,3440],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":113,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":113,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3611,3659],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4319,4322],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4319,4322],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4401,4404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4401,4404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":198,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6679,6682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6679,6682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":720,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":720,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31910,31913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31910,31913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { \n  GlobeAltIcon,\n  CalendarIcon,\n  ChartBarIcon,\n  PhotoIcon,\n  HashtagIcon,\n  ClockIcon,\n  CheckCircleIcon,\n  XCircleIcon,\n  SparklesIcon,\n  EyeIcon\n} from '@heroicons/react/24/outline';\nimport { trpc } from '../lib/trpc';\n\n// Form schemas\nconst contentGenerationSchema = z.object({\n  platform: z.enum(['FACEBOOK', 'INSTAGRAM', 'TIKTOK', 'TWITTER', 'LINKEDIN']),\n  contentType: z.enum(['post', 'story', 'reel', 'thread']),\n  topic: z.string().min(1, 'Topic is required').max(200),\n  tone: z.enum(['professional', 'casual', 'humorous', 'inspirational', 'promotional']).default('professional'),\n  targetAudience: z.string().optional(),\n  includeHashtags: z.boolean().default(true),\n  includeEmojis: z.boolean().default(true),\n  maxLength: z.number().optional(),\n});\n\nconst publishPostSchema = z.object({\n  platforms: z.array(z.enum(['FACEBOOK', 'INSTAGRAM', 'TIKTOK', 'TWITTER', 'LINKEDIN'])).min(1, 'Select at least one platform'),\n  content: z.object({\n    text: z.string().min(1, 'Content is required').max(2000),\n    images: z.array(z.string().url()).optional(),\n    video: z.string().url().optional(),\n    link: z.string().url().optional(),\n  }),\n  scheduling: z.object({\n    publishNow: z.boolean().default(true),\n    scheduledTime: z.date().optional(),\n    timezone: z.string().default('UTC'),\n  }),\n  hashtags: z.array(z.string()).optional(),\n});\n\ntype ContentGenerationForm = z.infer<typeof contentGenerationSchema>;\ntype PublishPostForm = z.infer<typeof publishPostSchema>;\n\nconst platformConfig = {\n  FACEBOOK: { name: 'Facebook', color: 'blue', maxLength: 63206 },\n  INSTAGRAM: { name: 'Instagram', color: 'pink', maxLength: 2200 },\n  TIKTOK: { name: 'TikTok', color: 'black', maxLength: 150 },\n  TWITTER: { name: 'Twitter', color: 'sky', maxLength: 280 },\n  LINKEDIN: { name: 'LinkedIn', color: 'blue', maxLength: 3000 },\n};\n\nexport default function SocialAgentTab() {\n  const [activeSection, setActiveSection] = useState<'generate' | 'publish' | 'schedule' | 'analytics'>('generate');\n  const [generatedContent, setGeneratedContent] = useState<any>(null);\n  const [publishResult, setPublishResult] = useState<any>(null);\n  const [selectedPlatforms, setSelectedPlatforms] = useState<string[]>(['INSTAGRAM']);\n\n  // Form setup\n  const contentForm = useForm<ContentGenerationForm>({\n    resolver: zodResolver(contentGenerationSchema),\n    defaultValues: {\n      platform: 'INSTAGRAM',\n      contentType: 'post',\n      topic: '',\n      tone: 'professional',\n      targetAudience: '',\n      includeHashtags: true,\n      includeEmojis: true,\n    },\n  });\n\n  const publishForm = useForm<PublishPostForm>({\n    resolver: zodResolver(publishPostSchema),\n    defaultValues: {\n      platforms: ['INSTAGRAM'],\n      content: {\n        text: '',\n        images: [],\n      },\n      scheduling: {\n        publishNow: true,\n        timezone: 'UTC',\n      },\n      hashtags: [],\n    },\n  });\n\n  // tRPC mutations\n  const generateContent = trpc.social.generateContent.useMutation({\n    onSuccess: (data) => {\n      setGeneratedContent(data);\n      publishForm.setValue('content.text', data.generatedText);\n      publishForm.setValue('hashtags', data.hashtags);\n    },\n    onError: (error) => {\n      console.error('Failed to generate content:', error);\n    },\n  });\n\n  const publishPost = trpc.social.publishPost.useMutation({\n    onSuccess: (data) => {\n      setPublishResult(data);\n    },\n    onError: (error) => {\n      console.error('Failed to publish post:', error);\n    },\n  });\n\n  // tRPC queries\n  const { data: analytics, isLoading: analyticsLoading } = trpc.social.getAnalytics.useQuery(\n    { timeRange: '30d' },\n    { enabled: activeSection === 'analytics' }\n  );\n\n  // Form handlers\n  const onGenerateContent = (data: ContentGenerationForm) => {\n    generateContent.mutate(data);\n  };\n\n  const onPublishPost = (data: PublishPostForm) => {\n    publishPost.mutate({\n      ...data,\n      campaignId: 'temp-campaign-id', // In real app, get from context\n    });\n  };\n\n  const togglePlatform = (platform: string) => {\n    const current = publishForm.getValues('platforms');\n    const updated = current.includes(platform as any)\n      ? current.filter(p => p !== platform)\n      : [...current, platform as any];\n    \n    if (updated.length > 0) {\n      publishForm.setValue('platforms', updated);\n      setSelectedPlatforms(updated);\n    }\n  };\n\n  const getCharacterCount = (text: string, platform: string) => {\n    const config = platformConfig[platform as keyof typeof platformConfig];\n    return `${text.length}/${config.maxLength}`;\n  };\n\n  const suggestedHashtags = [\n    '#marketing', '#socialmedia', '#digitalmarketing', '#branding', '#content',\n    '#business', '#entrepreneur', '#startup', '#growth', '#innovation',\n    '#ai', '#technology', '#automation', '#neonhub', '#success'\n  ];\n\n  const optimalTimes = {\n    FACEBOOK: '9:00 AM, 1:00 PM, 3:00 PM',\n    INSTAGRAM: '11:00 AM, 2:00 PM, 5:00 PM',\n    TWITTER: '8:00 AM, 12:00 PM, 7:00 PM',\n    LINKEDIN: '8:00 AM, 12:00 PM, 5:00 PM',\n    TIKTOK: '6:00 AM, 10:00 AM, 7:00 PM',\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 bg-pink-100 rounded-lg flex items-center justify-center\">\n            <GlobeAltIcon className=\"h-5 w-5 text-pink-600\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-semibold text-gray-900\">Social Media Agent</h1>\n            <p className=\"text-sm text-gray-600\">Generate content, schedule posts, and manage social platforms</p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <div className=\"h-2 w-2 bg-green-500 rounded-full\"></div>\n          <span className=\"text-sm text-gray-600\">Agent Online</span>\n        </div>\n      </div>\n\n      {/* Section Navigation */}\n      <div className=\"flex space-x-1 mb-6 bg-gray-100 p-1 rounded-lg\">\n        {[\n          { id: 'generate', name: 'Generate Content', icon: SparklesIcon },\n          { id: 'publish', name: 'Publish Post', icon: GlobeAltIcon },\n          { id: 'schedule', name: 'Schedule Calendar', icon: CalendarIcon },\n          { id: 'analytics', name: 'Analytics', icon: ChartBarIcon },\n        ].map((section) => {\n          const Icon = section.icon;\n          return (\n            <button\n              key={section.id}\n              onClick={() => setActiveSection(section.id as any)}\n              className={`flex items-center gap-2 px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n                activeSection === section.id\n                  ? 'bg-white text-pink-700 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              <Icon className=\"h-4 w-4\" />\n              {section.name}\n            </button>\n          );\n        })}\n      </div>\n\n      {/* Generate Content Section */}\n      {activeSection === 'generate' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Content Generation Form */}\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Content Generation</h3>\n            \n            <form onSubmit={contentForm.handleSubmit(onGenerateContent)} className=\"space-y-4\">\n              {/* Platform Selection */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Platform</label>\n                <Controller\n                  name=\"platform\"\n                  control={contentForm.control}\n                  render={({ field }) => (\n                    <select\n                      {...field}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500\"\n                    >\n                      {Object.entries(platformConfig).map(([key, config]) => (\n                        <option key={key} value={key}>{config.name}</option>\n                      ))}\n                    </select>\n                  )}\n                />\n              </div>\n\n              {/* Content Type */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Content Type</label>\n                <Controller\n                  name=\"contentType\"\n                  control={contentForm.control}\n                  render={({ field }) => (\n                    <select\n                      {...field}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500\"\n                    >\n                      <option value=\"post\">Post</option>\n                      <option value=\"story\">Story</option>\n                      <option value=\"reel\">Reel</option>\n                      <option value=\"thread\">Thread</option>\n                    </select>\n                  )}\n                />\n              </div>\n\n              {/* Topic */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Topic</label>\n                <input\n                  {...contentForm.register('topic')}\n                  type=\"text\"\n                  placeholder=\"What should the content be about?\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500\"\n                />\n                {contentForm.formState.errors.topic && (\n                  <p className=\"mt-1 text-sm text-red-600\">{contentForm.formState.errors.topic.message}</p>\n                )}\n              </div>\n\n              {/* Tone */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Tone</label>\n                <Controller\n                  name=\"tone\"\n                  control={contentForm.control}\n                  render={({ field }) => (\n                    <select\n                      {...field}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500\"\n                    >\n                      <option value=\"professional\">Professional</option>\n                      <option value=\"casual\">Casual</option>\n                      <option value=\"humorous\">Humorous</option>\n                      <option value=\"inspirational\">Inspirational</option>\n                      <option value=\"promotional\">Promotional</option>\n                    </select>\n                  )}\n                />\n              </div>\n\n              {/* Target Audience */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Target Audience (Optional)</label>\n                <input\n                  {...contentForm.register('targetAudience')}\n                  type=\"text\"\n                  placeholder=\"e.g., small business owners, marketers...\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500\"\n                />\n              </div>\n\n              {/* Options */}\n              <div className=\"flex items-center space-x-6\">\n                <label className=\"flex items-center\">\n                  <input\n                    {...contentForm.register('includeHashtags')}\n                    type=\"checkbox\"\n                    className=\"rounded border-gray-300 text-pink-600 focus:ring-pink-500\"\n                  />\n                  <span className=\"ml-2 text-sm text-gray-700\">Include Hashtags</span>\n                </label>\n                <label className=\"flex items-center\">\n                  <input\n                    {...contentForm.register('includeEmojis')}\n                    type=\"checkbox\"\n                    className=\"rounded border-gray-300 text-pink-600 focus:ring-pink-500\"\n                  />\n                  <span className=\"ml-2 text-sm text-gray-700\">Include Emojis</span>\n                </label>\n              </div>\n\n              {/* Generate Button */}\n              <button\n                type=\"submit\"\n                disabled={generateContent.isLoading}\n                className=\"w-full bg-pink-600 text-white py-2 px-4 rounded-md hover:bg-pink-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n              >\n                {generateContent.isLoading ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    Generating...\n                  </>\n                ) : (\n                  <>\n                    <SparklesIcon className=\"h-4 w-4\" />\n                    Generate Content\n                  </>\n                )}\n              </button>\n            </form>\n          </div>\n\n          {/* Content Preview */}\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Content Preview</h3>\n            \n            {generatedContent ? (\n              <div className=\"space-y-4\">\n                {/* Platform Preview Card */}\n                <div className=\"border border-gray-200 rounded-lg p-4 bg-gray-50\">\n                  <div className=\"flex items-center gap-2 mb-3\">\n                    <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white text-xs font-bold\">NH</span>\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-sm\">NeonHub</div>\n                      <div className=\"text-xs text-gray-500\">2 minutes ago</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-sm text-gray-900 mb-3 whitespace-pre-wrap\">\n                    {generatedContent.generatedText}\n                  </div>\n                  \n                  {generatedContent.hashtags && generatedContent.hashtags.length > 0 && (\n                    <div className=\"flex flex-wrap gap-1 mb-3\">\n                      {generatedContent.hashtags.map((tag: string, index: number) => (\n                        <span key={index} className=\"text-xs text-blue-600 hover:text-blue-700\">\n                          {tag}\n                        </span>\n                      ))}\n                    </div>\n                  )}\n                  \n                  <div className=\"flex items-center gap-4 text-gray-500 text-sm\">\n                    <button className=\"flex items-center gap-1 hover:text-red-500\">\n                      <span>❤️</span> Like\n                    </button>\n                    <button className=\"flex items-center gap-1 hover:text-blue-500\">\n                      <span>💬</span> Comment\n                    </button>\n                    <button className=\"flex items-center gap-1 hover:text-green-500\">\n                      <span>📤</span> Share\n                    </button>\n                  </div>\n                </div>\n                \n                {/* Content Stats */}\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div className=\"p-3 bg-blue-50 rounded-lg\">\n                    <div className=\"font-medium text-blue-700\">Character Count</div>\n                    <div className=\"text-blue-600\">{generatedContent.generatedText.length} characters</div>\n                  </div>\n                  <div className=\"p-3 bg-purple-50 rounded-lg\">\n                    <div className=\"font-medium text-purple-700\">Hashtags</div>\n                    <div className=\"text-purple-600\">{generatedContent.hashtags?.length || 0} tags</div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between pt-4 border-t border-gray-200\">\n                  <div className=\"text-sm text-gray-600\">\n                    Content generated successfully\n                  </div>\n                  <button\n                    onClick={() => setActiveSection('publish')}\n                    className=\"bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 flex items-center gap-2\"\n                  >\n                    <GlobeAltIcon className=\"h-4 w-4\" />\n                    Publish Now\n                  </button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-12 text-gray-500\">\n                <SparklesIcon className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                <p>Generate content to see the preview</p>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Publish Post Section */}\n      {activeSection === 'publish' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Publish Form */}\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Publish to Social Media</h3>\n            \n            <form onSubmit={publishForm.handleSubmit(onPublishPost)} className=\"space-y-4\">\n              {/* Platform Selection */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Select Platforms</label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {Object.entries(platformConfig).map(([key, config]) => (\n                    <label key={key} className=\"flex items-center p-3 border border-gray-200 rounded-lg hover:border-gray-300 cursor-pointer\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedPlatforms.includes(key)}\n                        onChange={() => togglePlatform(key)}\n                        className=\"rounded border-gray-300 text-pink-600 focus:ring-pink-500\"\n                      />\n                      <span className=\"ml-2 text-sm font-medium text-gray-700\">{config.name}</span>\n                    </label>\n                  ))}\n                </div>\n              </div>\n\n              {/* Content */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Content</label>\n                <textarea\n                  {...publishForm.register('content.text')}\n                  rows={6}\n                  placeholder=\"What's on your mind?\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500\"\n                />\n                <div className=\"mt-1 text-xs text-gray-500 flex justify-between\">\n                  <span>Character count for selected platforms</span>\n                  <div className=\"space-x-2\">\n                    {selectedPlatforms.map(platform => (\n                      <span key={platform}>\n                        {platformConfig[platform as keyof typeof platformConfig].name}: {getCharacterCount(publishForm.watch('content.text') || '', platform)}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              {/* Hashtags */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Hashtags</label>\n                <div className=\"flex flex-wrap gap-1 mb-2\">\n                  {suggestedHashtags.map((tag, index) => (\n                    <button\n                      key={index}\n                      type=\"button\"\n                      onClick={() => {\n                        const current = publishForm.getValues('hashtags') || [];\n                        if (!current.includes(tag)) {\n                          publishForm.setValue('hashtags', [...current, tag]);\n                        }\n                      }}\n                      className=\"text-xs px-2 py-1 bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200\"\n                    >\n                      {tag}\n                    </button>\n                  ))}\n                </div>\n                <div className=\"flex flex-wrap gap-1\">\n                  {(publishForm.watch('hashtags') || []).map((tag, index) => (\n                    <span key={index} className=\"inline-flex items-center gap-1 text-xs px-2 py-1 bg-blue-100 text-blue-700 rounded-full\">\n                      {tag}\n                      <button\n                        type=\"button\"\n                        onClick={() => {\n                          const current = publishForm.getValues('hashtags') || [];\n                          publishForm.setValue('hashtags', current.filter((_, i) => i !== index));\n                        }}\n                        className=\"text-blue-500 hover:text-blue-700\"\n                      >\n                        <XCircleIcon className=\"h-3 w-3\" />\n                      </button>\n                    </span>\n                  ))}\n                </div>\n              </div>\n\n              {/* Media Upload */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Media (Optional)</label>\n                <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                  <PhotoIcon className=\"h-8 w-8 mx-auto text-gray-400 mb-2\" />\n                  <p className=\"text-sm text-gray-600\">Drag and drop images or videos, or click to browse</p>\n                  <p className=\"text-xs text-gray-500 mt-1\">Supports JPG, PNG, MP4, MOV</p>\n                </div>\n              </div>\n\n              {/* Scheduling */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Scheduling</label>\n                <div className=\"space-y-3\">\n                  <label className=\"flex items-center\">\n                    <input\n                      {...publishForm.register('scheduling.publishNow')}\n                      type=\"radio\"\n                      value=\"true\"\n                      className=\"text-pink-600 focus:ring-pink-500\"\n                    />\n                    <span className=\"ml-2 text-sm text-gray-700\">Publish Now</span>\n                  </label>\n                  <label className=\"flex items-center\">\n                    <input\n                      type=\"radio\"\n                      value=\"false\"\n                      onChange={() => publishForm.setValue('scheduling.publishNow', false)}\n                      className=\"text-pink-600 focus:ring-pink-500\"\n                    />\n                    <span className=\"ml-2 text-sm text-gray-700\">Schedule for Later</span>\n                  </label>\n                  \n                  {!publishForm.watch('scheduling.publishNow') && (\n                    <Controller\n                      name=\"scheduling.scheduledTime\"\n                      control={publishForm.control}\n                      render={({ field }) => (\n                        <input\n                          {...field}\n                          type=\"datetime-local\"\n                          value={field.value ? new Date(field.value.getTime() - field.value.getTimezoneOffset() * 60000).toISOString().slice(0, 16) : ''}\n                          onChange={(e) => field.onChange(e.target.value ? new Date(e.target.value) : undefined)}\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-pink-500\"\n                        />\n                      )}\n                    />\n                  )}\n                </div>\n              </div>\n\n              {/* Publish Button */}\n              <button\n                type=\"submit\"\n                disabled={publishPost.isLoading || selectedPlatforms.length === 0}\n                className=\"w-full bg-pink-600 text-white py-2 px-4 rounded-md hover:bg-pink-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n              >\n                {publishPost.isLoading ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    Publishing...\n                  </>\n                ) : (\n                  <>\n                    <GlobeAltIcon className=\"h-4 w-4\" />\n                    {publishForm.watch('scheduling.publishNow') ? 'Publish Now' : 'Schedule Post'}\n                  </>\n                )}\n              </button>\n            </form>\n          </div>\n\n          {/* Publish Results & Optimal Times */}\n          <div className=\"space-y-6\">\n            {/* Publish Results */}\n            <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Publish Results</h3>\n              \n              {publishResult ? (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-2 text-green-600\">\n                    <CheckCircleIcon className=\"h-5 w-5\" />\n                    <span className=\"font-medium\">Post published successfully!</span>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    {publishResult.platforms.map((platform: string) => (\n                      <div key={platform} className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n                        <span className=\"font-medium text-green-700\">\n                          {platformConfig[platform as keyof typeof platformConfig].name}\n                        </span>\n                        <CheckCircleIcon className=\"h-4 w-4 text-green-600\" />\n                      </div>\n                    ))}\n                  </div>\n                  \n                  {publishResult.scheduledFor && (\n                    <div className=\"p-3 bg-blue-50 rounded-lg\">\n                      <div className=\"flex items-center gap-2 text-blue-700\">\n                        <CalendarIcon className=\"h-4 w-4\" />\n                        <span className=\"text-sm\">Scheduled for: {new Date(publishResult.scheduledFor).toLocaleString()}</span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className=\"text-center py-12 text-gray-500\">\n                  <GlobeAltIcon className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                  <p>Publish results will appear here</p>\n                </div>\n              )}\n            </div>\n\n            {/* Optimal Posting Times */}\n            <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Optimal Posting Times</h3>\n              \n              <div className=\"space-y-3\">\n                {Object.entries(optimalTimes).map(([platform, times]) => (\n                  <div key={platform} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"flex items-center gap-2\">\n                      <ClockIcon className=\"h-4 w-4 text-gray-600\" />\n                      <span className=\"font-medium text-gray-900\">\n                        {platformConfig[platform as keyof typeof platformConfig].name}\n                      </span>\n                    </div>\n                    <span className=\"text-sm text-gray-600\">{times}</span>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n                <p className=\"text-sm text-blue-700\">\n                  💡 These times are based on general audience engagement patterns. \n                  Check your analytics for personalized optimal times.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Schedule Calendar Section */}\n      {activeSection === 'schedule' && (\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Content Calendar</h3>\n          \n          <div className=\"text-center py-12 text-gray-500\">\n            <CalendarIcon className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n            <h4 className=\"text-lg font-medium text-gray-900 mb-2\">Content Calendar Coming Soon</h4>\n            <p className=\"text-gray-600 mb-4\">Plan and schedule your social media content across all platforms</p>\n            <div className=\"space-y-2 text-sm text-left max-w-md mx-auto\">\n              <div className=\"flex items-center gap-2\">\n                <CheckCircleIcon className=\"h-4 w-4 text-green-600\" />\n                <span>Visual calendar interface</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <CheckCircleIcon className=\"h-4 w-4 text-green-600\" />\n                <span>Bulk scheduling</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <CheckCircleIcon className=\"h-4 w-4 text-green-600\" />\n                <span>Content themes and templates</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <CheckCircleIcon className=\"h-4 w-4 text-green-600\" />\n                <span>Team collaboration</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Analytics Section */}\n      {activeSection === 'analytics' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Performance Metrics */}\n          <div className=\"lg:col-span-2 bg-white rounded-lg border border-gray-200 p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Social Media Performance (Last 30 Days)</h3>\n            \n            {analyticsLoading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-pink-600\"></div>\n              </div>\n            ) : analytics ? (\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"p-4 bg-blue-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-700\">{analytics.summary.totalReach.toLocaleString()}</div>\n                    <div className=\"text-sm text-blue-600\">Total Reach</div>\n                  </div>\n                  <div className=\"p-4 bg-green-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-green-700\">{analytics.summary.totalEngagement.toLocaleString()}</div>\n                    <div className=\"text-sm text-green-600\">Engagement</div>\n                  </div>\n                  <div className=\"p-4 bg-purple-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-purple-700\">{analytics.summary.avgEngagementRate.toFixed(1)}%</div>\n                    <div className=\"text-sm text-purple-600\">Engagement Rate</div>\n                  </div>\n                  <div className=\"p-4 bg-orange-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-orange-700\">{analytics.summary.totalPosts}</div>\n                    <div className=\"text-sm text-orange-600\">Posts Published</div>\n                  </div>\n                </div>\n                \n                <div className=\"border-t border-gray-200 pt-4\">\n                  <h4 className=\"font-medium text-gray-900 mb-3\">Platform Breakdown</h4>\n                  <div className=\"space-y-3\">\n                    {Object.entries(analytics.platforms).map(([platform, metrics]: [string, any]) => (\n                      <div key={platform} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                        <div className=\"flex items-center gap-3\">\n                          <span className=\"font-medium text-gray-900\">\n                            {platformConfig[platform as keyof typeof platformConfig]?.name || platform}\n                          </span>\n                          <span className=\"text-sm text-gray-600\">{metrics.posts} posts</span>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-sm font-medium text-gray-900\">{metrics.reach.toLocaleString()} reach</div>\n                          <div className=\"text-xs text-gray-600\">{metrics.engagementRate.toFixed(1)}% engagement</div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-12 text-gray-500\">\n                <ChartBarIcon className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                <p>No analytics data available</p>\n              </div>\n            )}\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Quick Actions</h3>\n            \n            <div className=\"space-y-3\">\n              <button\n                onClick={() => setActiveSection('generate')}\n                className=\"w-full p-3 text-left border border-gray-200 rounded-lg hover:border-pink-300 hover:bg-pink-50 transition-colors\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  <SparklesIcon className=\"h-5 w-5 text-pink-600\" />\n                  <div>\n                    <div className=\"font-medium text-gray-900\">Generate Content</div>\n                    <div className=\"text-sm text-gray-600\">AI-powered content creation</div>\n                  </div>\n                </div>\n              </button>\n              \n              <button\n                onClick={() => setActiveSection('publish')}\n                className=\"w-full p-3 text-left border border-gray-200 rounded-lg hover:border-green-300 hover:bg-green-50 transition-colors\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  <GlobeAltIcon className=\"h-5 w-5 text-green-600\" />\n                  <div>\n                    <div className=\"font-medium text-gray-900\">Publish Post</div>\n                    <div className=\"text-sm text-gray-600\">Share across platforms</div>\n                  </div>\n                </div>\n              </button>\n              \n              <div className=\"p-3 border border-gray-200 rounded-lg bg-gray-50\">\n                <div className=\"flex items-center gap-3\">\n                  <CalendarIcon className=\"h-5 w-5 text-gray-400\" />\n                  <div>\n                    <div className=\"font-medium text-gray-700\">Content Calendar</div>\n                    <div className=\"text-sm text-gray-500\">Coming soon</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/VariantAnalyticsPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'api' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tabs' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsContent' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsList' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsTrigger' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Bar' is defined but never used. Allowed unused vars must match /^_/u.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PieChart' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Pie' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Cell' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Area' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AreaChart' is defined but never used. Allowed unused vars must match /^_/u.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used. Allowed unused vars must match /^_/u.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'campaignId' is defined but never used. Allowed unused args must match /^_/u.","line":129,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":129,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'testId' is defined but never used. Allowed unused args must match /^_/u.","line":130,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showConfidenceIntervals' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":137,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":137,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setShowConfidenceIntervals' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":137,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":137,"endColumn":61},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":244,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":244,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5894,5938],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":255,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":255,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6217,6267],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":262,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":262,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6367,6396],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":265,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":265,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6488,6533],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":481,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":481,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15808,15811],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15808,15811],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":497,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":497,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16406,16409],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16406,16409],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Variant Analytics Panel - Real-time A/B Test Performance\n * Provides live charting and comparison of campaign variants\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { api } from '../utils/trpc';\nimport { Button } from './ui/button';\nimport { Badge } from './ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\nimport { Progress } from './ui/progress';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  Legend,\n  Area,\n  AreaChart\n} from 'recharts';\nimport { \n  TrendingUp,\n  TrendingDown,\n  Target,\n  Users,\n  Mail,\n  MousePointer,\n  DollarSign,\n  Clock,\n  Trophy,\n  AlertTriangle,\n  CheckCircle,\n  Zap,\n  BarChart3,\n  Activity,\n  Sparkles,\n  ArrowUp,\n  ArrowDown,\n  Minus,\n  Play,\n  Pause,\n  Stop\n} from 'lucide-react';\n\ninterface VariantAnalyticsPanelProps {\n  campaignId?: string;\n  testId?: string;\n  className?: string;\n  autoRefresh?: boolean;\n  refreshInterval?: number; // seconds\n}\n\ninterface ABTestData {\n  id: string;\n  name: string;\n  status: 'running' | 'completed' | 'winner_declared' | 'paused';\n  progress: number;\n  variants: VariantPerformance[];\n  timeline: TimelineData[];\n  insights: TestInsight[];\n  recommendation: TestRecommendation;\n  statisticalSignificance: {\n    isSignificant: boolean;\n    pValue: number;\n    confidenceLevel: number;\n  };\n}\n\ninterface VariantPerformance {\n  id: string;\n  name: string;\n  status: 'active' | 'winner' | 'loser' | 'paused';\n  metrics: {\n    impressions: number;\n    opens: number;\n    clicks: number;\n    conversions: number;\n    revenue: number;\n    openRate: number;\n    clickRate: number;\n    conversionRate: number;\n    revenuePerUser: number;\n  };\n  lift: number;\n  confidence: number;\n  trafficAllocation: number;\n  color: string;\n}\n\ninterface TimelineData {\n  timestamp: string;\n  hour: number;\n  variants: Record<string, {\n    openRate: number;\n    clickRate: number;\n    conversionRate: number;\n    impressions: number;\n  }>;\n}\n\ninterface TestInsight {\n  type: 'positive' | 'negative' | 'neutral' | 'warning';\n  title: string;\n  description: string;\n  confidence: number;\n  action?: string;\n}\n\ninterface TestRecommendation {\n  action: 'continue' | 'declare_winner' | 'stop_test' | 'extend_duration';\n  reason: string;\n  confidence: number;\n  expectedLift?: number;\n  estimatedRevenue?: number;\n}\n\nexport default function VariantAnalyticsPanel({\n  campaignId,\n  testId,\n  className = '',\n  autoRefresh = true,\n  refreshInterval = 30\n}: VariantAnalyticsPanelProps): JSX.Element {\n  const [selectedMetric, setSelectedMetric] = useState<'openRate' | 'clickRate' | 'conversionRate' | 'revenue'>('conversionRate');\n  const [timeRange, setTimeRange] = useState<'1h' | '6h' | '24h' | '7d'>('24h');\n  const [showConfidenceIntervals, setShowConfidenceIntervals] = useState(false);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  // Mock data - replace with real tRPC calls\n  const mockABTestData: ABTestData = {\n    id: 'test_001',\n    name: 'Holiday Email Campaign A/B Test',\n    status: 'running',\n    progress: 65,\n    variants: [\n      {\n        id: 'variant_a',\n        name: 'Control (Original)',\n        status: 'active',\n        metrics: {\n          impressions: 5420,\n          opens: 1407,\n          clicks: 267,\n          conversions: 89,\n          revenue: 2670,\n          openRate: 26.0,\n          clickRate: 19.0,\n          conversionRate: 33.3,\n          revenuePerUser: 0.49\n        },\n        lift: 0,\n        confidence: 0.95,\n        trafficAllocation: 50,\n        color: '#00f2ff'\n      },\n      {\n        id: 'variant_b',\n        name: 'Personalized Subject',\n        status: 'winner',\n        metrics: {\n          impressions: 5380,\n          opens: 1531,\n          clicks: 321,\n          conversions: 118,\n          revenue: 3540,\n          openRate: 28.5,\n          clickRate: 21.0,\n          conversionRate: 36.8,\n          revenuePerUser: 0.66\n        },\n        lift: 32.6,\n        confidence: 0.98,\n        trafficAllocation: 50,\n        color: '#b347d9'\n      }\n    ],\n    timeline: generateMockTimeline(),\n    insights: [\n      {\n        type: 'positive',\n        title: 'Strong Winner Detected',\n        description: 'Variant B shows statistically significant improvement across all metrics',\n        confidence: 0.98,\n        action: 'Consider declaring winner'\n      },\n      {\n        type: 'warning',\n        title: 'Traffic Imbalance',\n        description: 'Slight traffic allocation difference detected between variants',\n        confidence: 0.75\n      },\n      {\n        type: 'positive',\n        title: 'Revenue Impact',\n        description: 'Estimated additional revenue of $2,400 from winner variant',\n        confidence: 0.92\n      }\n    ],\n    recommendation: {\n      action: 'declare_winner',\n      reason: 'Variant B shows statistically significant improvement with 98% confidence',\n      confidence: 0.98,\n      expectedLift: 32.6,\n      estimatedRevenue: 2400\n    },\n    statisticalSignificance: {\n      isSignificant: true,\n      pValue: 0.02,\n      confidenceLevel: 0.98\n    }\n  };\n\n  const [testData, setTestData] = useState<ABTestData>(mockABTestData);\n\n  // Auto-refresh logic\n  useEffect(() => {\n    if (!autoRefresh) return;\n\n    const interval = setInterval(async () => {\n      setIsRefreshing(true);\n      // Simulate data refresh\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      // In real implementation, call tRPC to refresh data\n      setIsRefreshing(false);\n    }, refreshInterval * 1000);\n\n    return () => clearInterval(interval);\n  }, [autoRefresh, refreshInterval]);\n\n  const handleDeclareWinner = async (variantId: string) => {\n    try {\n      // Call tRPC to declare winner\n      console.log('Declaring winner:', variantId);\n      // Update local state\n      setTestData(prev => ({\n        ...prev,\n        status: 'winner_declared',\n        variants: prev.variants.map(v => ({\n          ...v,\n          status: v.id === variantId ? 'winner' : 'loser'\n        }))\n      }));\n    } catch (error) {\n      console.error('Failed to declare winner:', error);\n    }\n  };\n\n  const handleStopTest = async () => {\n    try {\n      // Call tRPC to stop test\n      console.log('Stopping test');\n      setTestData(prev => ({ ...prev, status: 'completed' }));\n    } catch (error) {\n      console.error('Failed to stop test:', error);\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'running': return <Activity className=\"h-4 w-4 text-neon-green animate-pulse\" />;\n      case 'winner_declared': return <Trophy className=\"h-4 w-4 text-neon-blue\" />;\n      case 'completed': return <CheckCircle className=\"h-4 w-4 text-neon-green\" />;\n      case 'paused': return <Pause className=\"h-4 w-4 text-neon-purple\" />;\n      default: return <Clock className=\"h-4 w-4 text-secondary\" />;\n    }\n  };\n\n  const getVariantStatusBadge = (variant: VariantPerformance) => {\n    switch (variant.status) {\n      case 'winner':\n        return <Badge className=\"bg-neon-green text-black\"><Trophy className=\"h-3 w-3 mr-1\" />Winner</Badge>;\n      case 'loser':\n        return <Badge variant=\"destructive\">Loser</Badge>;\n      case 'active':\n        return <Badge className=\"bg-neon-blue text-black\"><Activity className=\"h-3 w-3 mr-1\" />Active</Badge>;\n      case 'paused':\n        return <Badge variant=\"secondary\"><Pause className=\"h-3 w-3 mr-1\" />Paused</Badge>;\n      default:\n        return <Badge variant=\"outline\">Unknown</Badge>;\n    }\n  };\n\n  const getLiftIcon = (lift: number) => {\n    if (lift > 0) return <ArrowUp className=\"h-4 w-4 text-neon-green\" />;\n    if (lift < 0) return <ArrowDown className=\"h-4 w-4 text-neon-pink\" />;\n    return <Minus className=\"h-4 w-4 text-secondary\" />;\n  };\n\n  const formatMetric = (value: number, type: string) => {\n    switch (type) {\n      case 'percentage':\n        return `${value.toFixed(1)}%`;\n      case 'currency':\n        return `$${value.toFixed(2)}`;\n      case 'number':\n        return value.toLocaleString();\n      default:\n        return value.toString();\n    }\n  };\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"glass-strong p-6 rounded-2xl\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-12 h-12 bg-gradient-to-r from-neon-blue to-neon-purple rounded-2xl flex items-center justify-center\">\n              <BarChart3 className=\"h-6 w-6 text-white\" />\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold text-primary\">{testData.name}</h2>\n              <div className=\"flex items-center space-x-3 mt-1\">\n                {getStatusIcon(testData.status)}\n                <span className=\"text-sm text-secondary capitalize\">{testData.status.replace('_', ' ')}</span>\n                <div className=\"text-xs text-muted\">•</div>\n                <span className=\"text-sm text-secondary\">{testData.progress}% Complete</span>\n                {isRefreshing && <Sparkles className=\"h-4 w-4 text-neon-blue animate-spin\" />}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-3\">\n            {testData.status === 'running' && (\n              <>\n                <Button\n                  onClick={() => handleDeclareWinner(testData.variants.find(v => v.lift > 0)?.id || '')}\n                  className=\"btn-neon-green\"\n                  disabled={!testData.statisticalSignificance.isSignificant}\n                >\n                  <Trophy className=\"h-4 w-4 mr-2\" />\n                  Declare Winner\n                </Button>\n                <Button\n                  onClick={handleStopTest}\n                  variant=\"outline\"\n                  className=\"border-neon-pink text-neon-pink hover:bg-neon-pink hover:text-black\"\n                >\n                  <Stop className=\"h-4 w-4 mr-2\" />\n                  Stop Test\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-secondary\">Test Progress</span>\n            <span className=\"text-primary font-semibold\">{testData.progress}%</span>\n          </div>\n          <Progress value={testData.progress} className=\"h-3 bg-glass\" />\n        </div>\n      </div>\n\n      {/* Variant Performance Cards */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {testData.variants.map((variant, index) => (\n          <Card key={variant.id} className=\"card-neon relative overflow-hidden\">\n            <div \n              className=\"absolute top-0 left-0 w-full h-1\"\n              style={{ backgroundColor: variant.color }}\n            />\n            \n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"text-lg\">{variant.name}</CardTitle>\n                  <CardDescription>\n                    Traffic: {variant.trafficAllocation}% • Confidence: {(variant.confidence * 100).toFixed(1)}%\n                  </CardDescription>\n                </div>\n                {getVariantStatusBadge(variant)}\n              </div>\n            </CardHeader>\n\n            <CardContent className=\"space-y-4\">\n              {/* Key Metrics */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Mail className=\"h-4 w-4 text-neon-blue\" />\n                    <span className=\"text-sm text-secondary\">Open Rate</span>\n                  </div>\n                  <div className=\"text-xl font-bold text-primary\">\n                    {formatMetric(variant.metrics.openRate, 'percentage')}\n                  </div>\n                </div>\n\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <MousePointer className=\"h-4 w-4 text-neon-purple\" />\n                    <span className=\"text-sm text-secondary\">Click Rate</span>\n                  </div>\n                  <div className=\"text-xl font-bold text-primary\">\n                    {formatMetric(variant.metrics.clickRate, 'percentage')}\n                  </div>\n                </div>\n\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Target className=\"h-4 w-4 text-neon-green\" />\n                    <span className=\"text-sm text-secondary\">Conversion</span>\n                  </div>\n                  <div className=\"text-xl font-bold text-primary\">\n                    {formatMetric(variant.metrics.conversionRate, 'percentage')}\n                  </div>\n                </div>\n\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <DollarSign className=\"h-4 w-4 text-neon-pink\" />\n                    <span className=\"text-sm text-secondary\">Revenue/User</span>\n                  </div>\n                  <div className=\"text-xl font-bold text-primary\">\n                    {formatMetric(variant.metrics.revenuePerUser, 'currency')}\n                  </div>\n                </div>\n              </div>\n\n              {/* Lift Indicator */}\n              {index > 0 && (\n                <div className=\"glass p-3 rounded-xl\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      {getLiftIcon(variant.lift)}\n                      <span className=\"text-sm text-secondary\">Performance Lift</span>\n                    </div>\n                    <div className={`text-lg font-bold ${\n                      variant.lift > 0 ? 'text-neon-green' : \n                      variant.lift < 0 ? 'text-neon-pink' : 'text-secondary'\n                    }`}>\n                      {variant.lift > 0 ? '+' : ''}{variant.lift.toFixed(1)}%\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Sample Size */}\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-secondary\">Sample Size</span>\n                <span className=\"text-primary font-semibold\">\n                  {formatMetric(variant.metrics.impressions, 'number')}\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Performance Charts */}\n      <div className=\"glass-strong p-6 rounded-2xl\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-xl font-bold text-primary\">Performance Timeline</h3>\n          \n          <div className=\"flex items-center space-x-4\">\n            {/* Metric Selector */}\n            <div className=\"flex items-center space-x-2\">\n              {[\n                { key: 'openRate', label: 'Open Rate', icon: Mail },\n                { key: 'clickRate', label: 'Click Rate', icon: MousePointer },\n                { key: 'conversionRate', label: 'Conversion', icon: Target },\n                { key: 'revenue', label: 'Revenue', icon: DollarSign }\n              ].map(({ key, label, icon: Icon }) => (\n                <Button\n                  key={key}\n                  variant={selectedMetric === key ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setSelectedMetric(key as any)}\n                  className={selectedMetric === key ? 'btn-neon' : ''}\n                >\n                  <Icon className=\"h-4 w-4 mr-1\" />\n                  {label}\n                </Button>\n              ))}\n            </div>\n\n            {/* Time Range Selector */}\n            <div className=\"flex items-center space-x-1\">\n              {['1h', '6h', '24h', '7d'].map(range => (\n                <Button\n                  key={range}\n                  variant={timeRange === range ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setTimeRange(range as any)}\n                  className={timeRange === range ? 'btn-neon-purple text-xs' : 'text-xs'}\n                >\n                  {range}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Line Chart */}\n        <div className=\"h-80\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={testData.timeline}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" opacity={0.3} />\n              <XAxis \n                dataKey=\"hour\" \n                stroke=\"#9CA3AF\"\n                tick={{ fontSize: 12 }}\n              />\n              <YAxis \n                stroke=\"#9CA3AF\"\n                tick={{ fontSize: 12 }}\n                tickFormatter={(value) => `${value}%`}\n              />\n              <Tooltip \n                contentStyle={{\n                  backgroundColor: '#1F2937',\n                  border: '1px solid #374151',\n                  borderRadius: '12px',\n                  color: '#F9FAFB'\n                }}\n                formatter={(value, name) => [`${Number(value).toFixed(1)}%`, name]}\n              />\n              <Legend />\n              \n              {testData.variants.map((variant) => (\n                <Line\n                  key={variant.id}\n                  type=\"monotone\"\n                  dataKey={`variants.${variant.id}.${selectedMetric}`}\n                  stroke={variant.color}\n                  strokeWidth={3}\n                  dot={{ fill: variant.color, strokeWidth: 2, r: 4 }}\n                  name={variant.name}\n                  connectNulls={false}\n                />\n              ))}\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n\n      {/* Insights and Recommendations */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Test Insights */}\n        <Card className=\"card-neon\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Sparkles className=\"h-5 w-5 text-neon-blue\" />\n              <span>Test Insights</span>\n            </CardTitle>\n            <CardDescription>\n              AI-generated insights based on performance data\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {testData.insights.map((insight, index) => (\n              <div key={index} className=\"glass p-4 rounded-xl\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${\n                    insight.type === 'positive' ? 'bg-neon-green' :\n                    insight.type === 'negative' ? 'bg-neon-pink' :\n                    insight.type === 'warning' ? 'bg-yellow-500' :\n                    'bg-gray-500'\n                  }`}>\n                    {insight.type === 'positive' ? <TrendingUp className=\"h-4 w-4 text-black\" /> :\n                     insight.type === 'negative' ? <TrendingDown className=\"h-4 w-4 text-white\" /> :\n                     insight.type === 'warning' ? <AlertTriangle className=\"h-4 w-4 text-black\" /> :\n                     <CheckCircle className=\"h-4 w-4 text-white\" />}\n                  </div>\n                  \n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-primary mb-1\">{insight.title}</h4>\n                    <p className=\"text-sm text-secondary mb-2\">{insight.description}</p>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-xs text-muted\">\n                        Confidence: {(insight.confidence * 100).toFixed(0)}%\n                      </span>\n                      {insight.action && (\n                        <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">\n                          {insight.action}\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n\n        {/* Recommendations */}\n        <Card className=\"card-neon\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Zap className=\"h-5 w-5 text-neon-purple\" />\n              <span>Recommendations</span>\n            </CardTitle>\n            <CardDescription>\n              Next best actions based on current performance\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"glass p-4 rounded-xl\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-10 h-10 bg-gradient-to-r from-neon-blue to-neon-purple rounded-xl flex items-center justify-center\">\n                  {testData.recommendation.action === 'declare_winner' ? <Trophy className=\"h-5 w-5 text-white\" /> :\n                   testData.recommendation.action === 'continue' ? <Play className=\"h-5 w-5 text-white\" /> :\n                   testData.recommendation.action === 'stop_test' ? <Stop className=\"h-5 w-5 text-white\" /> :\n                   <Clock className=\"h-5 w-5 text-white\" />}\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold text-primary capitalize\">\n                    {testData.recommendation.action.replace('_', ' ')}\n                  </h4>\n                  <p className=\"text-sm text-secondary\">{testData.recommendation.reason}</p>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-secondary\">Confidence</span>\n                  <span className=\"text-sm font-semibold text-primary\">\n                    {(testData.recommendation.confidence * 100).toFixed(1)}%\n                  </span>\n                </div>\n\n                {testData.recommendation.expectedLift && (\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-secondary\">Expected Lift</span>\n                    <span className=\"text-sm font-semibold text-neon-green\">\n                      +{testData.recommendation.expectedLift.toFixed(1)}%\n                    </span>\n                  </div>\n                )}\n\n                {testData.recommendation.estimatedRevenue && (\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-secondary\">Revenue Impact</span>\n                    <span className=\"text-sm font-semibold text-neon-green\">\n                      +${testData.recommendation.estimatedRevenue.toLocaleString()}\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Statistical Significance */}\n            <div className=\"mt-4 glass p-4 rounded-xl\">\n              <h5 className=\"font-semibold text-primary mb-3\">Statistical Significance</h5>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-secondary\">P-Value</span>\n                  <span className=\"text-sm font-semibold text-primary\">\n                    {testData.statisticalSignificance.pValue.toFixed(3)}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-secondary\">Confidence Level</span>\n                  <span className=\"text-sm font-semibold text-primary\">\n                    {(testData.statisticalSignificance.confidenceLevel * 100).toFixed(1)}%\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-secondary\">Significant</span>\n                  <div className=\"flex items-center space-x-2\">\n                    {testData.statisticalSignificance.isSignificant ? \n                      <CheckCircle className=\"h-4 w-4 text-neon-green\" /> :\n                      <Clock className=\"h-4 w-4 text-neon-purple\" />\n                    }\n                    <span className={`text-sm font-semibold ${\n                      testData.statisticalSignificance.isSignificant ? 'text-neon-green' : 'text-neon-purple'\n                    }`}>\n                      {testData.statisticalSignificance.isSignificant ? 'Yes' : 'Not Yet'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\n// Helper function to generate mock timeline data\nfunction generateMockTimeline(): TimelineData[] {\n  const data: TimelineData[] = [];\n  const now = new Date();\n  \n  for (let i = 23; i >= 0; i--) {\n    const hour = new Date(now.getTime() - i * 60 * 60 * 1000);\n    const baseOpenA = 25 + Math.random() * 4;\n    const baseOpenB = 27 + Math.random() * 4;\n    \n    data.push({\n      timestamp: hour.toISOString(),\n      hour: 24 - i,\n      variants: {\n        variant_a: {\n          openRate: baseOpenA,\n          clickRate: baseOpenA * 0.75,\n          conversionRate: baseOpenA * 0.3,\n          impressions: 200 + Math.floor(Math.random() * 100)\n        },\n        variant_b: {\n          openRate: baseOpenB,\n          clickRate: baseOpenB * 0.78,\n          conversionRate: baseOpenB * 0.32,\n          impressions: 195 + Math.floor(Math.random() * 100)\n        }\n      }\n    });\n  }\n  \n  return data;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/VoiceGuidelinesPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[289,292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[289,292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1401,1452],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'realGuidelines'. Either include it or remove the dependency array.","line":53,"column":6,"nodeType":"ArrayExpression","endLine":53,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [profileId, realGuidelines]","fix":{"range":[1543,1554],"text":"[profileId, realGuidelines]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":179,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6611,6629],"text":"\n                &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6611,6629],"text":"\n                &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6611,6629],"text":"\n                &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6611,6629],"text":"\n                &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":179,"column":57,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6668,6684],"text":"&quot;\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6668,6684],"text":"&ldquo;\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6668,6684],"text":"&#34;\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6668,6684],"text":"&rdquo;\n              "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { brand } from '@/lib/brand';\n\ninterface VoiceGuidelinesPanelProps {\n  profileId?: string;\n}\n\nexport function VoiceGuidelinesPanel({ profileId }: VoiceGuidelinesPanelProps) {\n  const [guidelines, setGuidelines] = useState<any>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Real brand guidelines from brand configuration\n  const realGuidelines = {\n    tone: {\n      primary: brand.voice.primary,\n      secondary: brand.voice.secondary,\n      avoid: brand.guidelines.tone.avoid\n    },\n    vocabulary: {\n      preferred: brand.vocabulary.preferred,\n      prohibited: brand.vocabulary.prohibited,\n      brandTerms: brand.vocabulary.brandTerms\n    },\n    style: {\n      sentenceLength: brand.guidelines.style.sentenceLength,\n      paragraphLength: 'short-to-medium',\n      readingLevel: brand.guidelines.style.readingLevel,\n      punctuation: brand.guidelines.style.punctuation\n    },\n    messaging: {\n      valueProposition: brand.messaging.primaryValue,\n      keyMessages: brand.messaging.keyMessages.slice(0, 3) // Take first 3 key messages\n    }\n  };\n\n  useEffect(() => {\n    const loadGuidelines = async () => {\n      setIsLoading(true);\n      try {\n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 500));\n        setGuidelines(realGuidelines);\n      } catch (error) {\n        console.error('Failed to load guidelines:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadGuidelines();\n  }, [profileId]);\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-gray-500\">Loading guidelines...</p>\n      </div>\n    );\n  }\n\n  if (!guidelines) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-gray-500\">No guidelines available</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"text-lg font-semibold mb-2\">Brand Voice Guidelines</h3>\n        <p className=\"text-gray-600\">\n          Reference guide for maintaining consistent brand voice across all content\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Tone Guidelines */}\n        <div className=\"p-6 border rounded-lg\">\n          <h4 className=\"text-md font-semibold mb-4 text-blue-700\">Tone Guidelines</h4>\n          <div className=\"space-y-3\">\n            <div>\n              <span className=\"font-medium text-sm\">Primary Tone:</span>\n              <span className=\"ml-2 px-2 py-1 bg-blue-100 text-blue-700 rounded text-sm capitalize\">\n                {guidelines.tone.primary}\n              </span>\n            </div>\n            <div>\n              <span className=\"font-medium text-sm\">Secondary Tone:</span>\n              <span className=\"ml-2 px-2 py-1 bg-green-100 text-green-700 rounded text-sm capitalize\">\n                {guidelines.tone.secondary}\n              </span>\n            </div>\n            <div>\n              <span className=\"font-medium text-sm block mb-2\">Avoid:</span>\n              <div className=\"flex flex-wrap gap-1\">\n                {guidelines.tone.avoid.map((item: string, index: number) => (\n                  <span key={index} className=\"px-2 py-1 bg-red-100 text-red-700 rounded text-sm\">\n                    {item}\n                  </span>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Vocabulary Guidelines */}\n        <div className=\"p-6 border rounded-lg\">\n          <h4 className=\"text-md font-semibold mb-4 text-green-700\">Vocabulary Guidelines</h4>\n          <div className=\"space-y-3\">\n            <div>\n              <span className=\"font-medium text-sm block mb-2\">Preferred Words:</span>\n              <div className=\"flex flex-wrap gap-1\">\n                {guidelines.vocabulary.preferred.map((word: string, index: number) => (\n                  <span key={index} className=\"px-2 py-1 bg-green-100 text-green-700 rounded text-sm\">\n                    {word}\n                  </span>\n                ))}\n              </div>\n            </div>\n            <div>\n              <span className=\"font-medium text-sm block mb-2\">Prohibited Words:</span>\n              <div className=\"flex flex-wrap gap-1\">\n                {guidelines.vocabulary.prohibited.map((word: string, index: number) => (\n                  <span key={index} className=\"px-2 py-1 bg-red-100 text-red-700 rounded text-sm\">\n                    {word}\n                  </span>\n                ))}\n              </div>\n            </div>\n            <div>\n              <span className=\"font-medium text-sm block mb-2\">Brand Terms:</span>\n              <div className=\"flex flex-wrap gap-1\">\n                {guidelines.vocabulary.brandTerms.map((term: string, index: number) => (\n                  <span key={index} className=\"px-2 py-1 bg-blue-100 text-blue-700 rounded text-sm\">\n                    {term}\n                  </span>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Style Guidelines */}\n        <div className=\"p-6 border rounded-lg\">\n          <h4 className=\"text-md font-semibold mb-4 text-purple-700\">Style Guidelines</h4>\n          <div className=\"space-y-3\">\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"font-medium\">Sentence Length:</span>\n                <span className=\"ml-2 capitalize\">{guidelines.style.sentenceLength}</span>\n              </div>\n              <div>\n                <span className=\"font-medium\">Paragraph Length:</span>\n                <span className=\"ml-2 capitalize\">{guidelines.style.paragraphLength}</span>\n              </div>\n              <div>\n                <span className=\"font-medium\">Reading Level:</span>\n                <span className=\"ml-2 capitalize\">{guidelines.style.readingLevel}</span>\n              </div>\n              <div>\n                <span className=\"font-medium\">Punctuation:</span>\n                <span className=\"ml-2 capitalize\">{guidelines.style.punctuation}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Messaging Guidelines */}\n        <div className=\"p-6 border rounded-lg\">\n          <h4 className=\"text-md font-semibold mb-4 text-orange-700\">Messaging Guidelines</h4>\n          <div className=\"space-y-3\">\n            <div>\n              <span className=\"font-medium text-sm block mb-2\">Value Proposition:</span>\n              <p className=\"text-sm italic p-3 bg-orange-50 rounded\">\n                \"{guidelines.messaging.valueProposition}\"\n              </p>\n            </div>\n            <div>\n              <span className=\"font-medium text-sm block mb-2\">Key Messages:</span>\n              <ul className=\"space-y-1\">\n                {guidelines.messaging.keyMessages.map((message: string, index: number) => (\n                  <li key={index} className=\"text-sm flex items-start\">\n                    <span className=\"text-orange-600 mr-2\">•</span>\n                    {message}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex justify-end space-x-3\">\n        <button className=\"px-4 py-2 border rounded-md hover:bg-gray-50\">\n          Export Guidelines\n        </button>\n        <button className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\">\n          Edit Guidelines\n        </button>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/ui/alert.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":29,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":29,"endColumn":33,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[797,874],"text":"type AlertTitleProps = React.HTMLAttributes<HTMLHeadingElement>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":40,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":40,"endColumn":39,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1087,1172],"text":"type AlertDescriptionProps = React.HTMLAttributes<HTMLParagraphElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '../../lib/utils';\n\nexport interface AlertProps extends React.HTMLAttributes<HTMLDivElement> {\n  variant?: 'default' | 'destructive' | 'success' | 'warning' | 'info';\n}\n\nexport function Alert({ className, variant = 'default', ...props }: AlertProps) {\n  const variants = {\n    default: 'glass border-border-glass text-primary',\n    destructive: 'bg-neon-pink border-neon-pink text-white',\n    success: 'bg-neon-green border-neon-green text-black',\n    warning: 'bg-neon-orange border-neon-orange text-white',\n    info: 'bg-neon-blue border-neon-blue text-white'\n  };\n\n  return (\n    <div\n      className={cn(\n        'relative w-full rounded-xl border p-4',\n        variants[variant],\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport interface AlertTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {}\n\nexport function AlertTitle({ className, ...props }: AlertTitleProps) {\n  return (\n    <h5\n      className={cn('mb-1 font-semibold leading-none tracking-tight', className)}\n      {...props}\n    />\n  );\n}\n\nexport interface AlertDescriptionProps extends React.HTMLAttributes<HTMLParagraphElement> {}\n\nexport function AlertDescription({ className, ...props }: AlertDescriptionProps) {\n  return (\n    <div\n      className={cn('text-sm opacity-90', className)}\n      {...props}\n    />\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/ui/card.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":4,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":4,"endColumn":27,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[73,140],"text":"type CardProps = React.HTMLAttributes<HTMLDivElement>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":15,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":15,"endColumn":33,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[305,378],"text":"type CardHeaderProps = React.HTMLAttributes<HTMLDivElement>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":26,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":26,"endColumn":32,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[575,651],"text":"type CardTitleProps = React.HTMLAttributes<HTMLHeadingElement>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":37,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":37,"endColumn":38,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[879,963],"text":"type CardDescriptionProps = React.HTMLAttributes<HTMLParagraphElement>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":48,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":48,"endColumn":34,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1161,1235],"text":"type CardContentProps = React.HTMLAttributes<HTMLDivElement>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":59,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":59,"endColumn":33,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1413,1486],"text":"type CardFooterProps = React.HTMLAttributes<HTMLDivElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '../../lib/utils';\n\nexport interface CardProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport function Card({ className, ...props }: CardProps) {\n  return (\n    <div\n      className={cn('card-neon', className)}\n      {...props}\n    />\n  );\n}\n\nexport interface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport function CardHeader({ className, ...props }: CardHeaderProps) {\n  return (\n    <div\n      className={cn('flex flex-col space-y-1.5 p-6', className)}\n      {...props}\n    />\n  );\n}\n\nexport interface CardTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {}\n\nexport function CardTitle({ className, ...props }: CardTitleProps) {\n  return (\n    <h3\n      className={cn('text-2xl font-semibold leading-none tracking-tight text-primary', className)}\n      {...props}\n    />\n  );\n}\n\nexport interface CardDescriptionProps extends React.HTMLAttributes<HTMLParagraphElement> {}\n\nexport function CardDescription({ className, ...props }: CardDescriptionProps) {\n  return (\n    <p\n      className={cn('text-sm text-secondary', className)}\n      {...props}\n    />\n  );\n}\n\nexport interface CardContentProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport function CardContent({ className, ...props }: CardContentProps) {\n  return (\n    <div\n      className={cn('p-6 pt-0', className)}\n      {...props}\n    />\n  );\n}\n\nexport interface CardFooterProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport function CardFooter({ className, ...props }: CardFooterProps) {\n  return (\n    <div\n      className={cn('flex items-center p-6 pt-0', className)}\n      {...props}\n    />\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/ui/dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":13,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":13,"endColumn":36,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[320,399],"text":"type DialogTriggerProps = React.HTMLAttributes<HTMLButtonElement>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":24,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":24,"endColumn":36,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[584,660],"text":"type DialogContentProps = React.HTMLAttributes<HTMLDivElement>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":39,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":39,"endColumn":35,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[943,1018],"text":"type DialogHeaderProps = React.HTMLAttributes<HTMLDivElement>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":50,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":50,"endColumn":34,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1245,1323],"text":"type DialogTitleProps = React.HTMLAttributes<HTMLHeadingElement>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":61,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":61,"endColumn":40,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1523,1609],"text":"type DialogDescriptionProps = React.HTMLAttributes<HTMLParagraphElement>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":72,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":72,"endColumn":35,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1811,1886],"text":"type DialogFooterProps = React.HTMLAttributes<HTMLDivElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '../../lib/utils';\n\nexport interface DialogProps extends React.HTMLAttributes<HTMLDivElement> {\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}\n\nexport function Dialog({ children, ...props }: DialogProps) {\n  return <div {...props}>{children}</div>;\n}\n\nexport interface DialogTriggerProps extends React.HTMLAttributes<HTMLButtonElement> {}\n\nexport function DialogTrigger({ className, ...props }: DialogTriggerProps) {\n  return (\n    <button\n      className={cn('btn-neon', className)}\n      {...props}\n    />\n  );\n}\n\nexport interface DialogContentProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport function DialogContent({ className, children, ...props }: DialogContentProps) {\n  return (\n    <div className=\"modal-overlay\">\n      <div\n        className={cn('modal-content', className)}\n        {...props}\n      >\n        {children}\n      </div>\n    </div>\n  );\n}\n\nexport interface DialogHeaderProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport function DialogHeader({ className, ...props }: DialogHeaderProps) {\n  return (\n    <div\n      className={cn('flex flex-col space-y-1.5 text-center sm:text-left mb-6', className)}\n      {...props}\n    />\n  );\n}\n\nexport interface DialogTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {}\n\nexport function DialogTitle({ className, ...props }: DialogTitleProps) {\n  return (\n    <h2\n      className={cn('text-2xl font-bold text-primary', className)}\n      {...props}\n    />\n  );\n}\n\nexport interface DialogDescriptionProps extends React.HTMLAttributes<HTMLParagraphElement> {}\n\nexport function DialogDescription({ className, ...props }: DialogDescriptionProps) {\n  return (\n    <p\n      className={cn('text-sm text-secondary', className)}\n      {...props}\n    />\n  );\n}\n\nexport interface DialogFooterProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport function DialogFooter({ className, ...props }: DialogFooterProps) {\n  return (\n    <div\n      className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 mt-6', className)}\n      {...props}\n    />\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/ui/form.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":4,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":4,"endColumn":27,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[73,145],"text":"type FormProps = React.FormHTMLAttributes<HTMLFormElement>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":15,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":15,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[311,382],"text":"type FormItemProps = React.HTMLAttributes<HTMLDivElement>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":26,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":26,"endColumn":32,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[555,634],"text":"type FormLabelProps = React.LabelHTMLAttributes<HTMLLabelElement>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":37,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":37,"endColumn":34,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[834,908],"text":"type FormControlProps = React.HTMLAttributes<HTMLDivElement>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":48,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":48,"endColumn":38,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1086,1170],"text":"type FormDescriptionProps = React.HTMLAttributes<HTMLParagraphElement>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":59,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":59,"endColumn":34,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1368,1448],"text":"type FormMessageProps = React.HTMLAttributes<HTMLParagraphElement>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1769,1772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1769,1772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1823,1826],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1823,1826],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '../../lib/utils';\n\nexport interface FormProps extends React.FormHTMLAttributes<HTMLFormElement> {}\n\nexport function Form({ className, ...props }: FormProps) {\n  return (\n    <form\n      className={cn('space-y-6', className)}\n      {...props}\n    />\n  );\n}\n\nexport interface FormItemProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport function FormItem({ className, ...props }: FormItemProps) {\n  return (\n    <div\n      className={cn('space-y-2', className)}\n      {...props}\n    />\n  );\n}\n\nexport interface FormLabelProps extends React.LabelHTMLAttributes<HTMLLabelElement> {}\n\nexport function FormLabel({ className, ...props }: FormLabelProps) {\n  return (\n    <label\n      className={cn('text-sm font-medium text-primary', className)}\n      {...props}\n    />\n  );\n}\n\nexport interface FormControlProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport function FormControl({ className, ...props }: FormControlProps) {\n  return (\n    <div\n      className={cn('relative', className)}\n      {...props}\n    />\n  );\n}\n\nexport interface FormDescriptionProps extends React.HTMLAttributes<HTMLParagraphElement> {}\n\nexport function FormDescription({ className, ...props }: FormDescriptionProps) {\n  return (\n    <p\n      className={cn('text-xs text-secondary', className)}\n      {...props}\n    />\n  );\n}\n\nexport interface FormMessageProps extends React.HTMLAttributes<HTMLParagraphElement> {}\n\nexport function FormMessage({ className, ...props }: FormMessageProps) {\n  return (\n    <p\n      className={cn('text-xs text-neon-pink', className)}\n      {...props}\n    />\n  );\n}\n\n// Added FormField component for compatibility\nexport interface FormFieldProps extends React.HTMLAttributes<HTMLDivElement> {\n  control?: any;\n  name?: string;\n  render?: ({ field }: { field: any }) => React.ReactNode;\n}\n\nexport function FormField({ className, children, ...props }: FormFieldProps) {\n  return (\n    <div className={cn('space-y-2', className)} {...props}>\n      {children}\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/ui/input.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":4,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":4,"endColumn":28,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[73,148],"text":"type InputProps = React.InputHTMLAttributes<HTMLInputElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '../../lib/utils';\n\nexport interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nexport const Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn('input-neon', className)}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\n\nInput.displayName = 'Input'; ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/ui/tabs.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":19,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":19,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[389,460],"text":"type TabsListProps = React.HTMLAttributes<HTMLDivElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '../../lib/utils';\n\nexport interface TabsProps extends React.HTMLAttributes<HTMLDivElement> {\n  defaultValue?: string;\n  value?: string;\n  onValueChange?: (value: string) => void;\n}\n\nexport function Tabs({ className, ...props }: TabsProps) {\n  return (\n    <div\n      className={cn('w-full', className)}\n      {...props}\n    />\n  );\n}\n\nexport interface TabsListProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport function TabsList({ className, ...props }: TabsListProps) {\n  return (\n    <div\n      className={cn(\n        'glass inline-flex h-10 items-center justify-center rounded-xl p-1',\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport interface TabsTriggerProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  value: string;\n}\n\nexport function TabsTrigger({ className, ...props }: TabsTriggerProps) {\n  return (\n    <button\n      className={cn(\n        'inline-flex items-center justify-center whitespace-nowrap rounded-lg px-3 py-1.5 text-sm font-medium ring-offset-transparent transition-all focus-visible:outline-none focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:glass-strong data-[state=active]:text-neon-blue data-[state=active]:shadow-sm text-secondary hover:text-primary',\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport interface TabsContentProps extends React.HTMLAttributes<HTMLDivElement> {\n  value: string;\n}\n\nexport function TabsContent({ className, ...props }: TabsContentProps) {\n  return (\n    <div\n      className={cn(\n        'mt-2 ring-offset-transparent focus-visible:outline-none focus-visible:ring-2',\n        className\n      )}\n      {...props}\n    />\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/components/ui/textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":4,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":4,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[73,157],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '../../lib/utils';\n\nexport interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nexport const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn('input-neon min-h-[80px] resize-none', className)}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\n\nTextarea.displayName = 'Textarea'; ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/lib/brand.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/lib/hooks/useAgentMemory.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":72,"column":16,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":72,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3259,3262],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3259,3262],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3374,3377],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3374,3377],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":100,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":103,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3478,3481],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3478,3481],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3578,3581],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3578,3581],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'days'. Either exclude it or remove the dependency array.","line":120,"column":6,"nodeType":"ArrayExpression","endLine":120,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [agentId]","fix":{"range":[3945,3960],"text":"[agentId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'days'. Either exclude it or remove the dependency array.","line":304,"column":6,"nodeType":"ArrayExpression","endLine":304,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[9082,9088],"text":"[]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\nimport { api } from '@/utils/trpc';\n\nexport interface AgentMemoryData {\n  agentId: string;\n  agentName: string;\n  totalRuns: number;\n  successRate: number;\n  averageCost: number;\n  averageTokens: number;\n  averageExecutionTime: number;\n  totalCost: number;\n  healthScore: number;\n  overallHealth: 'excellent' | 'good' | 'fair' | 'poor' | 'critical';\n  trends: {\n    costTrend: 'improving' | 'stable' | 'declining';\n    performanceTrend: 'improving' | 'stable' | 'declining';\n    successTrend: 'improving' | 'stable' | 'declining';\n  };\n  recentExecutions: Array<{\n    id: string;\n    timestamp: Date;\n    success: boolean;\n    executionTime: number;\n    cost: number;\n    tokensUsed: number;\n    task: string;\n    errorMessage?: string;\n  }>;\n  costTrend: Array<{ date: string; cost: number }>;\n  performanceTrend: Array<{ date: string; executionTime: number }>;\n  recommendations: Array<{\n    type: 'cost' | 'performance' | 'accuracy' | 'reliability';\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    title: string;\n    description: string;\n    recommendation: string;\n    expectedImpact: string;\n  }>;\n}\n\nexport interface UseAgentMemoryOptions {\n  agentId?: string;\n  days?: number;\n  autoRefresh?: boolean;\n  refreshInterval?: number; // in milliseconds\n}\n\nexport interface UseAgentMemoryReturn {\n  data: AgentMemoryData | null;\n  loading: boolean;\n  error: Error | null;\n  refetch: () => Promise<void>;\n  clearMemory: (olderThanDays?: number) => Promise<void>;\n  updateScore: (memoryId: string, score: number) => Promise<void>;\n}\n\nexport const useAgentMemory = (options: UseAgentMemoryOptions = {}): UseAgentMemoryReturn => {\n  const {\n    agentId,\n    days = 30,\n    autoRefresh = false,\n    refreshInterval = 60000, // 1 minute\n  } = options;\n\n  const [data, setData] = useState<AgentMemoryData | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  // tRPC queries (these would be implemented in the actual tRPC router)\n  const agentMemoryQuery = api.agents.getMemory.useQuery(\n    { agentId: agentId!, days },\n    { \n      enabled: !!agentId,\n      refetchInterval: autoRefresh ? refreshInterval : false,\n      onError: (err) => setError(err as Error),\n    }\n  );\n\n  const clearMemoryMutation = api.agents.clearMemory.useMutation();\n  const updateScoreMutation = api.agents.updateMemoryScore.useMutation();\n\n  const fetchData = useCallback(async () => {\n    if (!agentId) return;\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // In a real implementation, this would use the tRPC query\n      // For now, we'll use mock data\n      const mockData: AgentMemoryData = {\n        agentId,\n        agentName: getAgentName(agentId),\n        totalRuns: Math.floor(Math.random() * 300) + 100,\n        successRate: Math.random() * 10 + 90,\n        averageCost: Math.random() * 0.05 + 0.01,\n        averageTokens: Math.floor(Math.random() * 1000) + 500,\n        averageExecutionTime: Math.floor(Math.random() * 3000) + 1000,\n        totalCost: Math.random() * 10 + 2,\n        healthScore: Math.floor(Math.random() * 30) + 70,\n        overallHealth: ['excellent', 'good', 'fair'][Math.floor(Math.random() * 3)] as any,\n        trends: {\n          costTrend: ['improving', 'stable', 'declining'][Math.floor(Math.random() * 3)] as any,\n          performanceTrend: ['improving', 'stable', 'declining'][Math.floor(Math.random() * 3)] as any,\n          successTrend: ['improving', 'stable', 'declining'][Math.floor(Math.random() * 3)] as any,\n        },\n        recentExecutions: generateMockExecutions(),\n        costTrend: generateMockTrend('cost'),\n        performanceTrend: generateMockTrend('performance'),\n        recommendations: generateMockRecommendations(),\n      };\n\n      setData(mockData);\n    } catch (err) {\n      setError(err as Error);\n    } finally {\n      setLoading(false);\n    }\n  }, [agentId, days]);\n\n  const refetch = useCallback(async () => {\n    await fetchData();\n  }, [fetchData]);\n\n  const clearMemory = useCallback(async (olderThanDays?: number) => {\n    if (!agentId) return;\n\n    try {\n      await clearMemoryMutation.mutateAsync({ agentId, olderThanDays });\n      await refetch();\n    } catch (err) {\n      setError(err as Error);\n    }\n  }, [agentId, clearMemoryMutation, refetch]);\n\n  const updateScore = useCallback(async (memoryId: string, score: number) => {\n    try {\n      await updateScoreMutation.mutateAsync({ memoryId, score });\n      await refetch();\n    } catch (err) {\n      setError(err as Error);\n    }\n  }, [updateScoreMutation, refetch]);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return {\n    data,\n    loading: loading || agentMemoryQuery.isLoading,\n    error: error || (agentMemoryQuery.error as Error),\n    refetch,\n    clearMemory,\n    updateScore,\n  };\n};\n\n// Helper functions for mock data generation\nfunction getAgentName(agentId: string): string {\n  const agentNames: Record<string, string> = {\n    'content-agent': 'Content Agent',\n    'seo-agent': 'SEO Agent',\n    'email-agent': 'Email Agent',\n    'social-agent': 'Social Agent',\n    'support-agent': 'Support Agent',\n    'ad-agent': 'Ad Agent',\n    'outreach-agent': 'Outreach Agent',\n    'trend-agent': 'Trend Agent',\n    'insight-agent': 'Insight Agent',\n    'design-agent': 'Design Agent',\n    'brand-voice-agent': 'Brand Voice Agent',\n  };\n\n  return agentNames[agentId] || agentId;\n}\n\nfunction generateMockExecutions() {\n  const tasks = [\n    'Generate blog post content',\n    'Create social media posts',\n    'Optimize SEO metadata',\n    'Analyze competitor content',\n    'Generate email campaign',\n    'Create ad copy',\n    'Analyze brand voice',\n  ];\n\n  return Array.from({ length: 5 }, (_, i) => ({\n    id: `exec-${i}`,\n    timestamp: new Date(Date.now() - i * 3600000), // 1 hour intervals\n    success: Math.random() > 0.1, // 90% success rate\n    executionTime: Math.floor(Math.random() * 5000) + 1000,\n    cost: Math.random() * 0.05 + 0.01,\n    tokensUsed: Math.floor(Math.random() * 1000) + 500,\n    task: tasks[Math.floor(Math.random() * tasks.length)],\n    errorMessage: Math.random() > 0.9 ? 'API rate limit exceeded' : undefined,\n  }));\n}\n\nfunction generateMockTrend(type: 'cost' | 'performance') {\n  const days = 7;\n  const data = [];\n  \n  for (let i = days - 1; i >= 0; i--) {\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n    \n    if (type === 'cost') {\n      data.push({\n        date: date.toISOString().split('T')[0],\n        cost: Math.random() * 0.05 + 0.01,\n      });\n    } else {\n      data.push({\n        date: date.toISOString().split('T')[0],\n        executionTime: Math.floor(Math.random() * 3000) + 1000,\n      });\n    }\n  }\n  \n  return data;\n}\n\nfunction generateMockRecommendations() {\n  const recommendations = [\n    {\n      type: 'cost' as const,\n      severity: 'medium' as const,\n      title: 'Optimize Token Usage',\n      description: 'Current token usage is above optimal range',\n      recommendation: 'Refine prompts to reduce unnecessary context',\n      expectedImpact: 'Could reduce costs by 20-30%',\n    },\n    {\n      type: 'performance' as const,\n      severity: 'high' as const,\n      title: 'Implement Caching',\n      description: 'Response times could benefit from caching',\n      recommendation: 'Add caching layer for frequent requests',\n      expectedImpact: 'Could improve response time by 40-60%',\n    },\n  ];\n\n  return recommendations.slice(0, Math.floor(Math.random() * 3) + 1);\n}\n\n// Hook for system-wide memory analysis\nexport interface UseSystemMemoryReturn {\n  data: {\n    totalAgents: number;\n    overallHealth: 'excellent' | 'good' | 'fair' | 'poor' | 'critical';\n    totalCost: number;\n    averageSuccessRate: number;\n    topPerformers: Array<{ agentId: string; score: number }>;\n    criticalIssues: Array<{\n      agentId: string;\n      issue: string;\n      impact: 'high' | 'critical';\n    }>;\n  } | null;\n  loading: boolean;\n  error: Error | null;\n  refetch: () => Promise<void>;\n}\n\nexport const useSystemMemory = (days: number = 30): UseSystemMemoryReturn => {\n  const [data, setData] = useState<UseSystemMemoryReturn['data']>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const fetchSystemData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Mock system-wide data\n      const mockData = {\n        totalAgents: 11,\n        overallHealth: 'good' as const,\n        totalCost: 45.67,\n        averageSuccessRate: 92.3,\n        topPerformers: [\n          { agentId: 'seo-agent', score: 95 },\n          { agentId: 'email-agent', score: 92 },\n          { agentId: 'content-agent', score: 87 },\n        ],\n        criticalIssues: [\n          {\n            agentId: 'ad-agent',\n            issue: 'High cost per execution',\n            impact: 'high' as const,\n          },\n        ],\n      };\n\n      setData(mockData);\n    } catch (err) {\n      setError(err as Error);\n    } finally {\n      setLoading(false);\n    }\n  }, [days]);\n\n  const refetch = useCallback(async () => {\n    await fetchSystemData();\n  }, [fetchSystemData]);\n\n  useEffect(() => {\n    fetchSystemData();\n  }, [fetchSystemData]);\n\n  return {\n    data,\n    loading,\n    error,\n    refetch,\n  };\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/lib/hooks/useContentGenerator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/lib/hooks/useSEOOptimizer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/lib/metrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/lib/providers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/lib/trpc.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/kofirusu/Neon-v0.2/Neon-v0.2/apps/dashboard/src/utils/trpc.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
