[{"filePath":"/workspace/packages/utils/src/__tests__/agentLogger.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/packages/utils/src/__tests__/index.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/packages/utils/src/agentLogger.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/packages/utils/src/agentLogger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/packages/utils/src/index.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/packages/utils/src/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/packages/utils/src/lead-scraper.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2905,2954],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":115,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":115,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3922,3969],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":143,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":143,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4780,4839],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":185,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":185,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6207,6252],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Lead Scraper for B2B Outreach\n * Uses Puppeteer for LinkedIn and business directory scraping\n */\n\nimport puppeteer, { Browser } from 'puppeteer';\n\nexport interface LeadData {\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  company?: string;\n  position?: string;\n  linkedinUrl?: string;\n  industry?: string;\n  companySize?: string;\n  location?: string;\n}\n\nexport class LeadScraper {\n  private browser: Browser | null = null;\n  private isHeadless: boolean;\n\n  constructor(headless = true) {\n    this.isHeadless = headless;\n  }\n\n  private async initBrowser(): Promise<Browser> {\n    if (!this.browser) {\n      this.browser = await puppeteer.launch({\n        headless: this.isHeadless,\n        args: [\n          '--no-sandbox',\n          '--disable-setuid-sandbox',\n          '--disable-dev-shm-usage',\n          '--disable-accelerated-2d-canvas',\n          '--no-first-run',\n          '--no-zygote',\n          '--single-process',\n          '--disable-gpu'\n        ]\n      });\n    }\n    return this.browser;\n  }\n\n  async scrapeLinkedIn(searchQuery: string, maxResults = 50): Promise<LeadData[]> {\n    try {\n      const browser = await this.initBrowser();\n      const page = await browser.newPage();\n      \n      // Set user agent to avoid detection\n      await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');\n      \n      // In production, implement LinkedIn login and search\n      // For now, return enhanced mock data based on search query\n      const leads: LeadData[] = [];\n      const queryKeywords = searchQuery.toLowerCase().split(' ');\n      \n      for (let i = 0; i < Math.min(maxResults, 25); i++) {\n        const industryGuess = queryKeywords.find(word => \n          ['tech', 'marketing', 'sales', 'healthcare', 'finance', 'education'].includes(word)\n        ) || 'technology';\n        \n        const companySize = ['1-10', '11-50', '51-200', '201-1000', '1000+'][Math.floor(Math.random() * 5)];\n        const positions = ['Manager', 'Director', 'VP', 'President', 'CEO', 'CMO', 'CTO'];\n        const locations = ['San Francisco, CA', 'New York, NY', 'Austin, TX', 'Seattle, WA', 'Boston, MA'];\n        \n        leads.push({\n          email: `lead${i}.${searchQuery.replace(/\\s+/g, '').toLowerCase()}@company${i}.com`,\n          firstName: `First${i}`,\n          lastName: `Last${i}`,\n          company: `${industryGuess.charAt(0).toUpperCase() + industryGuess.slice(1)} Corp ${i}`,\n          position: positions[Math.floor(Math.random() * positions.length)] || 'Manager',\n          linkedinUrl: `https://linkedin.com/in/lead${i}`,\n          industry: industryGuess,\n          companySize,\n          location: locations[Math.floor(Math.random() * locations.length)] || 'San Francisco, CA',\n        });\n      }\n\n      await page.close();\n      return leads;\n    } catch (error) {\n      console.error('LinkedIn scraping error:', error);\n      // Return fallback mock data\n      return this.getMockLeads(searchQuery, maxResults);\n    }\n  }\n\n  async enrichLeadData(email: string): Promise<LeadData | null> {\n    try {\n      const browser = await this.initBrowser();\n      const page = await browser.newPage();\n      \n      // In production, use email lookup services like Hunter.io, Clearbit, or ZoomInfo\n      // For now, return enhanced mock data\n      const domain = email.split('@')[1];\n      const companyName = domain?.split('.')[0];\n      \n      const enrichedData: LeadData = {\n        email,\n        firstName: 'John',\n        lastName: 'Doe',\n        company: companyName ? `${companyName.charAt(0).toUpperCase() + companyName.slice(1)} Inc` : 'Unknown Company',\n        position: 'Marketing Manager',\n        industry: 'Technology',\n        companySize: '100-500',\n        location: 'San Francisco, CA',\n      };\n\n      await page.close();\n      return enrichedData;\n    } catch (error) {\n      console.error('Lead enrichment error:', error);\n      return null;\n    }\n  }\n\n  async scrapeBusinessDirectory(industry: string, location: string): Promise<LeadData[]> {\n    try {\n      const browser = await this.initBrowser();\n      const page = await browser.newPage();\n      \n      // In production, scrape from business directories like Yellow Pages, Yelp Business, etc.\n      // For now, return enhanced mock data\n      const leads: LeadData[] = [];\n      \n      for (let i = 0; i < 15; i++) {\n        leads.push({\n          email: `contact${i}@${industry.replace(/\\s+/g, '').toLowerCase()}${i}.com`,\n          company: `${industry} Business ${i}`,\n          industry,\n          location,\n          position: 'Business Owner',\n          companySize: '10-50',\n        });\n      }\n\n      await page.close();\n      return leads;\n    } catch (error) {\n      console.error('Business directory scraping error:', error);\n      return [];\n    }\n  }\n\n  async validateEmail(email: string): Promise<boolean> {\n    // Enhanced email validation with domain verification\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      return false;\n    }\n\n    // In production, add DNS MX record verification\n    const domain = email.split('@')[1];\n    \n    // Basic domain validation\n    return Boolean(domain?.includes('.') && domain?.length > 3);\n  }\n\n  async searchGoogleForContacts(companyName: string): Promise<LeadData[]> {\n    try {\n      const browser = await this.initBrowser();\n      const page = await browser.newPage();\n      \n      // Search for company contacts on Google\n      const searchQuery = `\"${companyName}\" \"email\" contact marketing manager`;\n      const googleUrl = `https://www.google.com/search?q=${encodeURIComponent(searchQuery)}`;\n      \n      await page.goto(googleUrl, { waitUntil: 'networkidle2' });\n      \n      // In production, parse search results for contact information\n      // For now, return mock data based on company\n      const leads: LeadData[] = [{\n        email: `info@${companyName.toLowerCase().replace(/\\s+/g, '')}.com`,\n        company: companyName,\n        position: 'Marketing Manager',\n        industry: 'Business Services',\n      }];\n\n      await page.close();\n      return leads;\n    } catch (error) {\n      console.error('Google search error:', error);\n      return [];\n    }\n  }\n\n  private getMockLeads(_searchQuery: string, maxResults: number): LeadData[] {\n    const leads: LeadData[] = [];\n    for (let i = 0; i < Math.min(maxResults, 20); i++) {\n      leads.push({\n        email: `lead${i}@company${i}.com`,\n        firstName: `FirstName${i}`,\n        lastName: `LastName${i}`,\n        company: `Company ${i}`,\n        position: 'Manager',\n        linkedinUrl: `https://linkedin.com/in/lead${i}`,\n        industry: 'Technology',\n        companySize: '50-200',\n        location: 'San Francisco, CA',\n      });\n    }\n    return leads;\n  }\n\n  async close(): Promise<void> {\n    if (this.browser) {\n      await this.browser.close();\n      this.browser = null;\n    }\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/workspace/packages/utils/src/logger.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/packages/utils/src/logger.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":130,"column":84,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":130,"endColumn":86}],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[2382,2408],"text":""},"desc":"Remove the console.debug()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"info"},"fix":{"range":[2506,2531],"text":""},"desc":"Remove the console.info()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[2629,2654],"text":""},"desc":"Remove the console.warn()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2753,2779],"text":""},"desc":"Remove the console.error()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * NeonHub Logging Utility\n *\n * Centralized logging system with different levels and output options\n */\n\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\nexport interface LogEntry {\n  level: LogLevel;\n  message: string;\n  timestamp: Date;\n  context?: Record<string, unknown> | undefined;\n  source?: string | undefined;\n}\n\nclass Logger {\n  private logLevel: LogLevel = 'info';\n\n  constructor(level: LogLevel = 'info') {\n    this.logLevel = level;\n  }\n\n  debug(message: string, context?: Record<string, unknown>, source?: string): void {\n    this.log('debug', message, context, source);\n  }\n\n  info(message: string, context?: Record<string, unknown>, source?: string): void {\n    this.log('info', message, context, source);\n  }\n\n  warn(message: string, context?: Record<string, unknown>, source?: string): void {\n    this.log('warn', message, context, source);\n  }\n\n  error(message: string, context?: Record<string, unknown>, source?: string): void {\n    this.log('error', message, context, source);\n  }\n\n  private log(\n    level: LogLevel,\n    message: string,\n    context?: Record<string, unknown>,\n    source?: string\n  ): void {\n    const logEntry: LogEntry = {\n      level,\n      message,\n      timestamp: new Date(),\n      context,\n      source,\n    };\n\n    // Only log if level is appropriate\n    if (this.shouldLog(level)) {\n      this.output(logEntry);\n    }\n  }\n\n  private shouldLog(level: LogLevel): boolean {\n    const levels: Record<LogLevel, number> = {\n      debug: 0,\n      info: 1,\n      warn: 2,\n      error: 3,\n    };\n\n    return levels[level] >= levels[this.logLevel];\n  }\n\n  private output(entry: LogEntry): void {\n    const timestamp = entry.timestamp.toISOString();\n    const contextStr = entry.context ? ` | Context: ${JSON.stringify(entry.context)}` : '';\n    const sourceStr = entry.source ? ` | Source: ${entry.source}` : '';\n\n    const logMessage = `[${timestamp}] ${entry.level.toUpperCase()}: ${entry.message}${sourceStr}${contextStr}`;\n\n    // In production, you might want to send to external logging service\n    if (process.env.NODE_ENV === 'production') {\n      // Send to external logging service (e.g., Sentry, LogRocket, etc.)\n      this.sendToExternalLogger(entry);\n    } else {\n      // Development logging to console\n      switch (entry.level) {\n        case 'debug':\n          // eslint-disable-next-line no-console\n          console.debug(logMessage);\n          break;\n        case 'info':\n          // eslint-disable-next-line no-console\n          console.info(logMessage);\n          break;\n        case 'warn':\n          // eslint-disable-next-line no-console\n          console.warn(logMessage);\n          break;\n        case 'error':\n          // eslint-disable-next-line no-console\n          console.error(logMessage);\n          break;\n      }\n    }\n  }\n\n  private sendToExternalLogger(_entry: LogEntry): void {\n    // Implementation for external logging service\n    // This could be Sentry, LogRocket, Datadog, etc.\n    if (process.env.SENTRY_DSN) {\n      // Send to Sentry\n    }\n\n    if (process.env.LOGROCK_APP_ID) {\n      // Send to LogRocket\n    }\n  }\n\n  setLevel(level: LogLevel): void {\n    this.logLevel = level;\n  }\n}\n\n// Create default logger instance\nexport const logger = new Logger(process.env.NODE_ENV === 'development' ? 'debug' : 'info');\n\n// Export logger factory for creating specific loggers\nexport const createLogger = (source: string, level?: LogLevel): Logger => {\n  const l = new Logger(level);\n  // Override the log method to include source automatically\n  const originalLog = l['log'].bind(l);\n  l['log'] = (level: LogLevel, message: string, context?: Record<string, unknown>) => {\n    originalLog(level, message, context, source);\n  };\n  return l;\n};\n\n// Convenience functions for common logging patterns\nexport const logAgentAction = (\n  agentName: string,\n  action: string,\n  result: 'success' | 'error',\n  context?: Record<string, unknown>\n): void => {\n  const message = `Agent ${agentName} ${action}: ${result}`;\n  if (result === 'success') {\n    logger.info(message, context, 'AgentSystem');\n  } else {\n    logger.error(message, context, 'AgentSystem');\n  }\n};\n\nexport const logPerformanceMetric = (metric: string, value: number, threshold?: number): void => {\n  const context = { metric, value, threshold };\n  if (threshold && value < threshold) {\n    logger.warn(`Performance metric ${metric} below threshold`, context, 'Performance');\n  } else {\n    logger.info(`Performance metric ${metric} recorded`, context, 'Performance');\n  }\n};\n\nexport const logSystemEvent = (event: string, details?: Record<string, unknown>): void => {\n  logger.info(`System event: ${event}`, details, 'System');\n};\n","usedDeprecatedRules":[]},{"filePath":"/workspace/packages/utils/src/pdf-generator.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":278,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":278,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7842,7845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7842,7845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * PDF Generator for B2B Proposals and Offer Sheets\n * Creates professional marketing materials using jsPDF\n */\n\nimport jsPDF from 'jspdf';\n\nexport interface ProposalData {\n  clientName: string;\n  clientCompany: string;\n  signType: string;\n  dimensions: string;\n  price: number;\n  deliveryTime: string;\n  customFeatures?: string[];\n  designMockup?: string;\n}\n\nexport class PDFGenerator {\n  private createHeader(doc: jsPDF, title: string): void {\n    // Add company logo area\n    doc.setFillColor(0, 255, 255); // Neon cyan\n    doc.rect(20, 10, 170, 25, 'F');\n    \n    // Company name\n    doc.setTextColor(0, 0, 0);\n    doc.setFontSize(20);\n    doc.setFont('helvetica', 'bold');\n    doc.text('NEONHUB', 25, 27);\n    \n    // Tagline\n    doc.setFontSize(10);\n    doc.setFont('helvetica', 'normal');\n    doc.text('Illuminating Your Brand', 25, 32);\n    \n    // Document title\n    doc.setTextColor(0, 0, 0);\n    doc.setFontSize(16);\n    doc.setFont('helvetica', 'bold');\n    doc.text(title, 20, 50);\n    \n    // Date\n    doc.setFontSize(10);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`Date: ${new Date().toLocaleDateString()}`, 150, 50);\n  }\n\n  private createFooter(doc: jsPDF, pageHeight: number): void {\n    doc.setTextColor(100, 100, 100);\n    doc.setFontSize(8);\n    doc.text('NeonHub - Professional Neon Sign Solutions', 20, pageHeight - 20);\n    doc.text('Phone: (555) 123-NEON | Email: info@neonhub.com | www.neonhub.com', 20, pageHeight - 15);\n  }\n\n  async generateProposal(data: ProposalData): Promise<Buffer> {\n    const doc = new jsPDF();\n    const pageHeight = doc.internal.pageSize.height;\n    \n    // Header\n    this.createHeader(doc, 'CUSTOM NEON SIGN PROPOSAL');\n    \n    let yPos = 70;\n    \n    // Client Information\n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Client Information', 20, yPos);\n    yPos += 10;\n    \n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`Name: ${data.clientName}`, 25, yPos);\n    yPos += 8;\n    doc.text(`Company: ${data.clientCompany}`, 25, yPos);\n    yPos += 15;\n    \n    // Project Details\n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Project Details', 20, yPos);\n    yPos += 10;\n    \n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`Sign Type: ${data.signType}`, 25, yPos);\n    yPos += 8;\n    doc.text(`Dimensions: ${data.dimensions}`, 25, yPos);\n    yPos += 8;\n    doc.text(`Price: $${data.price.toLocaleString()}`, 25, yPos);\n    yPos += 8;\n    doc.text(`Delivery Time: ${data.deliveryTime}`, 25, yPos);\n    yPos += 15;\n    \n    // Custom Features\n    if (data.customFeatures && data.customFeatures.length > 0) {\n      doc.setFontSize(14);\n      doc.setFont('helvetica', 'bold');\n      doc.text('Custom Features', 20, yPos);\n      yPos += 10;\n      \n      doc.setFontSize(12);\n      doc.setFont('helvetica', 'normal');\n      data.customFeatures.forEach(feature => {\n        doc.text(`• ${feature}`, 25, yPos);\n        yPos += 8;\n      });\n      yPos += 10;\n    }\n    \n    // Pricing Breakdown\n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Investment Breakdown', 20, yPos);\n    yPos += 10;\n    \n    // Create pricing table\n    const subtotal = data.price * 0.9;\n    const tax = data.price * 0.1;\n    \n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    doc.text('Design & Fabrication:', 25, yPos);\n    doc.text(`$${subtotal.toLocaleString()}`, 150, yPos);\n    yPos += 8;\n    doc.text('Installation & Setup:', 25, yPos);\n    doc.text('Included', 150, yPos);\n    yPos += 8;\n    doc.text('Tax & Fees:', 25, yPos);\n    doc.text(`$${tax.toLocaleString()}`, 150, yPos);\n    yPos += 10;\n    \n    // Total line\n    doc.setFont('helvetica', 'bold');\n    doc.line(25, yPos, 170, yPos);\n    yPos += 8;\n    doc.text('Total Investment:', 25, yPos);\n    doc.text(`$${data.price.toLocaleString()}`, 150, yPos);\n    yPos += 15;\n    \n    // Next Steps\n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Next Steps', 20, yPos);\n    yPos += 10;\n    \n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    const steps = [\n      '1. Review and approve this proposal',\n      '2. Sign contract and provide 50% deposit',\n      '3. Design confirmation and final approval',\n      '4. Manufacturing begins (typical 7-14 days)',\n      '5. Professional installation and testing',\n      '6. Final payment and warranty activation'\n    ];\n    \n    steps.forEach(step => {\n      doc.text(step, 25, yPos);\n      yPos += 8;\n    });\n    \n    // Warranty information\n    yPos += 10;\n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Warranty & Support', 20, yPos);\n    yPos += 10;\n    \n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    doc.text('• 2-year full warranty on all components', 25, yPos);\n    yPos += 8;\n    doc.text('• Free maintenance checkup at 6 months', 25, yPos);\n    yPos += 8;\n    doc.text('• 24/7 emergency support hotline', 25, yPos);\n    \n    // Footer\n    this.createFooter(doc, pageHeight);\n    \n    return Buffer.from(doc.output('arraybuffer'));\n  }\n\n  async generateOfferSheet(signType: string, targetMarket: string): Promise<Buffer> {\n    const doc = new jsPDF();\n    const pageHeight = doc.internal.pageSize.height;\n    \n    // Header\n    this.createHeader(doc, `${signType.toUpperCase()} SPECIAL OFFER`);\n    \n    let yPos = 70;\n    \n    // Main offer\n    doc.setFillColor(255, 255, 0); // Yellow highlight\n    doc.rect(15, yPos - 5, 180, 30, 'F');\n    \n    doc.setTextColor(0, 0, 0);\n    doc.setFontSize(18);\n    doc.setFont('helvetica', 'bold');\n    doc.text('LIMITED TIME PROMOTION', 20, yPos + 5);\n    \n    doc.setFontSize(24);\n    doc.setTextColor(255, 0, 0);\n    doc.text('20% OFF', 20, yPos + 18);\n    \n    doc.setFontSize(12);\n    doc.setTextColor(0, 0, 0);\n    doc.text(`All custom ${signType} orders`, 80, yPos + 18);\n    \n    yPos += 45;\n    \n    // Offer details\n    doc.setFontSize(16);\n    doc.setFont('helvetica', 'bold');\n    doc.text('What\\'s Included:', 20, yPos);\n    yPos += 15;\n    \n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    const includes = [\n      '✓ FREE Design Consultation (Value: $200)',\n      '✓ Professional Installation Included',\n      '✓ Fast 7-day turnaround',\n      '✓ 2-year comprehensive warranty',\n      '✓ Energy-efficient LED technology',\n      '✓ Weather-resistant materials',\n      '✓ Remote control capabilities (where applicable)'\n    ];\n    \n    includes.forEach(item => {\n      doc.text(item, 25, yPos);\n      yPos += 10;\n    });\n    \n    yPos += 10;\n    \n    // Target market benefits\n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.text(`Perfect for ${targetMarket}:`, 20, yPos);\n    yPos += 12;\n    \n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    const benefits = [\n      '• Increase visibility and foot traffic by up to 150%',\n      '• Stand out from competitors 24/7',\n      '• Modern, professional brand image',\n      '• Low energy costs with LED technology',\n      '• Customizable to match your brand colors',\n      '• Easy maintenance and long-lasting durability'\n    ];\n    \n    benefits.forEach(benefit => {\n      doc.text(benefit, 25, yPos);\n      yPos += 8;\n    });\n    \n    yPos += 15;\n    \n    // Call to action\n    doc.setFillColor(0, 255, 255);\n    doc.rect(15, yPos - 5, 180, 25, 'F');\n    \n    doc.setTextColor(0, 0, 0);\n    doc.setFontSize(16);\n    doc.setFont('helvetica', 'bold');\n    doc.text('CONTACT US TODAY!', 20, yPos + 8);\n    \n    doc.setFontSize(12);\n    doc.text('Offer expires end of month • Limited availability', 20, yPos + 18);\n    \n    // Footer\n    this.createFooter(doc, pageHeight);\n    \n    return Buffer.from(doc.output('arraybuffer'));\n  }\n\n  async generateCatalog(products: any[]): Promise<Buffer> {\n    const doc = new jsPDF();\n    const pageHeight = doc.internal.pageSize.height;\n    \n    // Header\n    this.createHeader(doc, 'NEONHUB PRODUCT CATALOG');\n    \n    let yPos = 70;\n    \n    // Introduction\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    doc.text('Discover our complete range of custom neon signs and lighting solutions.', 20, yPos);\n    doc.text('Each product is crafted with premium materials and cutting-edge LED technology.', 20, yPos + 8);\n    yPos += 25;\n    \n    // Products\n    products.forEach((product, index) => {\n      // Check if we need a new page\n      if (yPos > pageHeight - 80) {\n        doc.addPage();\n        yPos = 30;\n      }\n      \n      // Product header\n      doc.setFontSize(16);\n      doc.setFont('helvetica', 'bold');\n      doc.text(product.name, 20, yPos);\n      yPos += 12;\n      \n      // Product details\n      doc.setFontSize(12);\n      doc.setFont('helvetica', 'normal');\n      \n      // Price\n      doc.setFont('helvetica', 'bold');\n      doc.text(`Starting at $${product.price}`, 20, yPos);\n      yPos += 8;\n      \n      doc.setFont('helvetica', 'normal');\n      \n      // Size options\n      if (product.sizes) {\n        doc.text(`Size Options: ${product.sizes.join(', ')}`, 25, yPos);\n        yPos += 8;\n      }\n      \n      // Colors\n      if (product.colors) {\n        doc.text(`Available Colors: ${product.colors.join(', ')}`, 25, yPos);\n        yPos += 8;\n      }\n      \n      // Lead time\n      if (product.leadTime) {\n        doc.text(`Lead Time: ${product.leadTime}`, 25, yPos);\n        yPos += 8;\n      }\n      \n      // Description\n      if (product.description) {\n        const lines = doc.splitTextToSize(product.description, 160);\n        doc.text(lines, 25, yPos);\n        yPos += lines.length * 6;\n      }\n      \n      yPos += 15;\n      \n      // Add separator line\n      if (index < products.length - 1) {\n        doc.setDrawColor(200, 200, 200);\n        doc.line(20, yPos - 5, 190, yPos - 5);\n      }\n    });\n    \n    // Custom design services section\n    if (yPos > pageHeight - 60) {\n      doc.addPage();\n      yPos = 30;\n    }\n    \n    doc.setFontSize(16);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Custom Design Services', 20, yPos);\n    yPos += 15;\n    \n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    doc.text('Don\\'t see exactly what you\\'re looking for? We specialize in creating unique', 20, yPos);\n    doc.text('neon signs tailored to your specific brand and vision.', 20, yPos + 8);\n    yPos += 20;\n    \n    doc.text('Our design process includes:', 20, yPos);\n    yPos += 10;\n    \n    const designProcess = [\n      '• Initial consultation and concept development',\n      '• 3D mockups and design refinements',\n      '• Material selection and engineering',\n      '• Professional manufacturing and quality testing',\n      '• Complete installation and setup'\n    ];\n    \n    designProcess.forEach(item => {\n      doc.text(item, 25, yPos);\n      yPos += 8;\n    });\n    \n    // Footer\n    this.createFooter(doc, pageHeight);\n    \n    return Buffer.from(doc.output('arraybuffer'));\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/workspace/packages/utils/src/social-api-client.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[276,279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[276,279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1722,1725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1722,1725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Social Media API Client for Market Pulse Integration\n * Handles TikTok, Instagram, Twitter trend data\n */\n\nexport interface TrendData {\n  keyword: string;\n  signalType: 'hashtag' | 'sound' | 'topic';\n  score: number;\n  platform: string;\n  region?: string;\n  metadata?: any;\n}\n\nexport class SocialApiClient {\n  private _initialized: boolean = false;\n\n  constructor() {\n    // Initialize API connections if needed\n    this._initialized = true;\n  }\n\n  async fetchTrendingTikTok(): Promise<TrendData[]> {\n    // Mock implementation - replace with real API\n    return [\n      { keyword: '#neonsigns', signalType: 'hashtag', score: 0.92, platform: 'tiktok' },\n      { keyword: '#ledlights', signalType: 'hashtag', score: 0.88, platform: 'tiktok' },\n      { keyword: 'neon aesthetic', signalType: 'sound', score: 0.85, platform: 'tiktok' },\n    ];\n  }\n\n  async fetchTrendingInstagram(): Promise<TrendData[]> {\n    return [\n      { keyword: '#lightingdecor', signalType: 'hashtag', score: 0.81, platform: 'instagram' },\n      { keyword: '#customsigns', signalType: 'hashtag', score: 0.79, platform: 'instagram' },\n    ];\n  }\n\n  async fetchTrendingTwitter(): Promise<TrendData[]> {\n    return [\n      { keyword: '#businesssignage', signalType: 'hashtag', score: 0.76, platform: 'twitter' },\n      { keyword: '#brandidentity', signalType: 'hashtag', score: 0.74, platform: 'twitter' },\n    ];\n  }\n\n  async getAllTrends(): Promise<TrendData[]> {\n    const [tiktok, instagram, twitter] = await Promise.all([\n      this.fetchTrendingTikTok(),\n      this.fetchTrendingInstagram(),\n      this.fetchTrendingTwitter(),\n    ]);\n\n    return [...tiktok, ...instagram, ...twitter];\n  }\n\n  async getRegionScores(region: string): Promise<any> {\n    // Mock regional data\n    return {\n      region,\n      platforms: {\n        tiktok: Math.random() * 0.3 + 0.7,\n        instagram: Math.random() * 0.3 + 0.6,\n        twitter: Math.random() * 0.3 + 0.5,\n      },\n      updatedAt: new Date().toISOString(),\n    };\n  }\n} ","usedDeprecatedRules":[]}]
