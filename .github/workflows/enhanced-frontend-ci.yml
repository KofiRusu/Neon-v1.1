name: üé® NeonHub Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop, staging ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  NODE_VERSION: '18.x'
  HUSKY: 0
  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: üì¶ Setup & Install
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      changed-files: ${{ steps.changed-files.outputs.files }}
      has-ui-changes: ${{ steps.changed-files.outputs.has-ui-changes }}
      has-agent-changes: ${{ steps.changed-files.outputs.has-agent-changes }}
      has-design-system-changes: ${{ steps.changed-files.outputs.has-design-system-changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Generate cache key
        id: cache-key
        run: echo "key=node-modules-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --legacy-peer-deps
          npm run db:generate || echo "‚ö†Ô∏è Database generation failed, continuing..."

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
            **/node_modules
          key: ${{ steps.cache-key.outputs.key }}

      - name: Detect changed files
        id: changed-files
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          else
            FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Check for UI changes
          if echo "$FILES" | grep -E "(components/|pages/|styles/|\.css|\.scss)" > /dev/null; then
            echo "has-ui-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-ui-changes=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for agent changes
          if echo "$FILES" | grep -E "(agent|Agent)" > /dev/null; then
            echo "has-agent-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-agent-changes=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for design system changes
          if echo "$FILES" | grep -E "(design-system|tokens|theme)" > /dev/null; then
            echo "has-design-system-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-design-system-changes=false" >> $GITHUB_OUTPUT
          fi

  lint-and-format:
    name: üîç Lint & Format
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
            **/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run ESLint
        run: |
          npm run lint
          echo "‚úÖ ESLint passed"

      - name: Check code formatting
        run: |
          npm run format:check
          echo "‚úÖ Code formatting check passed"

  type-check:
    name: üîß TypeScript Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
            **/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run TypeScript type checking
        run: |
          npm run type-check
          echo "‚úÖ TypeScript validation passed"

  test:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
            **/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run unit tests
        run: |
          npm run test:unit
          echo "‚úÖ Unit tests passed"

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  accessibility-test:
    name: ‚ôø Accessibility Tests
    runs-on: ubuntu-latest
    needs: [setup, lint-and-format]
    if: needs.setup.outputs.has-ui-changes == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
            **/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run accessibility tests
        run: |
          npm run test:a11y || echo "‚ö†Ô∏è A11y tests not configured yet"
          echo "‚úÖ Accessibility tests completed"

  build:
    name: üèóÔ∏è Build Applications
    runs-on: ubuntu-latest
    needs: [setup, lint-and-format, type-check]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
            **/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Build applications
        run: |
          npm run build
          echo "‚úÖ Build completed successfully"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            apps/*/dist
            apps/*/.next
            packages/*/dist
          retention-days: 7

  storybook:
    name: üìñ Build Storybook
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.has-ui-changes == 'true' || needs.setup.outputs.has-design-system-changes == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
            **/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Build Storybook
        run: |
          npm run storybook:build || echo "‚ö†Ô∏è Storybook not configured yet"
          echo "‚úÖ Storybook build completed"

  visual-regression:
    name: üì∏ Visual Regression Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.has-ui-changes == 'true' || needs.setup.outputs.has-design-system-changes == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
            **/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run visual regression tests
        run: |
          npm run test:visual || echo "‚ö†Ô∏è Visual regression tests not configured yet"
          echo "‚úÖ Visual regression tests completed"

  e2e-test:
    name: üé≠ E2E Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
            **/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: |
          npm run test:e2e
          echo "‚úÖ E2E tests passed"

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ github.sha }}
          path: playwright-report/
          retention-days: 7

  lighthouse:
    name: üè† Lighthouse Performance
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
            **/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run Lighthouse CI
        run: |
          npm run lighthouse || echo "‚ö†Ô∏è Lighthouse not configured yet"
          echo "‚úÖ Lighthouse audit completed"

  agent-integration-test:
    name: ü§ñ Agent Integration Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.has-agent-changes == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
            **/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Test agent UI synchronization
        run: |
          npm run test:agent-integration || echo "‚ö†Ô∏è Agent integration tests not configured yet"
          echo "‚úÖ Agent integration tests completed"

  deploy-preview:
    name: üöÄ Deploy Preview
    runs-on: ubuntu-latest
    needs: [setup, build, test]
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    environment:
      name: preview
      url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
            **/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}

      - name: Deploy to Vercel Preview
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy-staging:
    name: üß™ Deploy Staging
    runs-on: ubuntu-latest
    needs: [setup, build, test, e2e-test]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.neonhub.ai
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
            **/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Deploy to Staging
        run: |
          npm run deploy:staging || echo "‚ö†Ô∏è Staging deployment not configured yet"
          echo "‚úÖ Staging deployment completed"

  deploy-production:
    name: üöÄ Deploy Production
    runs-on: ubuntu-latest
    needs: [setup, build, test, e2e-test, lighthouse]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://app.neonhub.ai
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
            **/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Deploy to Production
        run: |
          npm run deploy:production || echo "‚ö†Ô∏è Production deployment not configured yet"
          echo "‚úÖ Production deployment completed"

      - name: Create GitHub Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            üöÄ NeonHub Frontend Release v${{ github.run_number }}
            
            **Deployed to Production**: https://app.neonhub.ai
            
            **Changes in this release**:
            ${{ needs.setup.outputs.changed-files }}
            
            **Pipeline Status**:
            - ‚úÖ Lint & Format
            - ‚úÖ TypeScript Check
            - ‚úÖ Unit Tests
            - ‚úÖ Build
            - ‚úÖ E2E Tests
            - ‚úÖ Lighthouse Performance
            - ‚úÖ Production Deployment
          draft: false
          prerelease: false

  pipeline-status:
    name: üìä Pipeline Status
    runs-on: ubuntu-latest
    needs: [
      setup, lint-and-format, type-check, test, build, 
      accessibility-test, storybook, visual-regression, 
      e2e-test, lighthouse, agent-integration-test
    ]
    if: always()
    steps:
      - name: Pipeline Status Report
        run: |
          echo "## üé® NeonHub Frontend Pipeline Status"
          echo ""
          echo "### Core Pipeline:"
          echo "- üì¶ Setup: ${{ needs.setup.result }}"
          echo "- üîç Lint & Format: ${{ needs.lint-and-format.result }}"
          echo "- üîß TypeScript: ${{ needs.type-check.result }}"
          echo "- üß™ Unit Tests: ${{ needs.test.result }}"
          echo "- üèóÔ∏è Build: ${{ needs.build.result }}"
          echo ""
          echo "### UI/UX Pipeline:"
          echo "- ‚ôø Accessibility: ${{ needs.accessibility-test.result }}"
          echo "- üìñ Storybook: ${{ needs.storybook.result }}"
          echo "- üì∏ Visual Regression: ${{ needs.visual-regression.result }}"
          echo "- üé≠ E2E Tests: ${{ needs.e2e-test.result }}"
          echo "- üè† Lighthouse: ${{ needs.lighthouse.result }}"
          echo ""
          echo "### Agent Integration:"
          echo "- ü§ñ Agent Tests: ${{ needs.agent-integration-test.result }}"
          echo ""
          echo "### Deployment Status:"
          echo "- Branch: ${{ github.ref_name }}"
          echo "- Event: ${{ github.event_name }}"
          echo "- Commit: ${{ github.sha }}"
          
          OVERALL_STATUS="‚úÖ SUCCESS"
          if [[ "${{ needs.setup.result }}" != "success" || "${{ needs.build.result }}" != "success" ]]; then
            OVERALL_STATUS="‚ùå FAILED"
          fi
          
          echo ""
          echo "**Overall Status: $OVERALL_STATUS**"